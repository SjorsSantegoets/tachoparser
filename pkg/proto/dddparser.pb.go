// protoc *.proto --go_out=. --go-grpc_out=.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.21.12
// source: dddparser.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParseVuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ParseVuRequest) Reset() {
	*x = ParseVuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseVuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseVuRequest) ProtoMessage() {}

func (x *ParseVuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseVuRequest.ProtoReflect.Descriptor instead.
func (*ParseVuRequest) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{0}
}

func (x *ParseVuRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ParseVuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vu *Vu `protobuf:"bytes,1,opt,name=vu,proto3" json:"vu,omitempty"`
}

func (x *ParseVuResponse) Reset() {
	*x = ParseVuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseVuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseVuResponse) ProtoMessage() {}

func (x *ParseVuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseVuResponse.ProtoReflect.Descriptor instead.
func (*ParseVuResponse) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{1}
}

func (x *ParseVuResponse) GetVu() *Vu {
	if x != nil {
		return x.Vu
	}
	return nil
}

type ParseCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ParseCardRequest) Reset() {
	*x = ParseCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCardRequest) ProtoMessage() {}

func (x *ParseCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCardRequest.ProtoReflect.Descriptor instead.
func (*ParseCardRequest) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{2}
}

func (x *ParseCardRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ParseCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *ParseCardResponse) Reset() {
	*x = ParseCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseCardResponse) ProtoMessage() {}

func (x *ParseCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseCardResponse.ProtoReflect.Descriptor instead.
func (*ParseCardResponse) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{3}
}

func (x *ParseCardResponse) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardIccIdentification_1                                  *CardIccIdentificationFirstGen                       `protobuf:"bytes,1,opt,name=card_icc_identification_1,json=cardIccIdentification1,proto3" json:"card_icc_identification_1,omitempty"`
	CardIccIdentification_1Sig                               *SignatureFirstGen                                   `protobuf:"bytes,2,opt,name=card_icc_identification_1_sig,json=cardIccIdentification1Sig,proto3" json:"card_icc_identification_1_sig,omitempty"`
	CardIccIdentification_2                                  *CardIccIdentificationSecondGen                      `protobuf:"bytes,3,opt,name=card_icc_identification_2,json=cardIccIdentification2,proto3" json:"card_icc_identification_2,omitempty"`
	CardIccIdentification_2Sig                               *SignatureSecondGen                                  `protobuf:"bytes,4,opt,name=card_icc_identification_2_sig,json=cardIccIdentification2Sig,proto3" json:"card_icc_identification_2_sig,omitempty"`
	CardChipIdentification_1                                 *CardChipIdentification                              `protobuf:"bytes,5,opt,name=card_chip_identification_1,json=cardChipIdentification1,proto3" json:"card_chip_identification_1,omitempty"`
	CardChipIdentification_1Sig                              *SignatureFirstGen                                   `protobuf:"bytes,6,opt,name=card_chip_identification_1_sig,json=cardChipIdentification1Sig,proto3" json:"card_chip_identification_1_sig,omitempty"`
	CardChipIdentification_2                                 *CardChipIdentification                              `protobuf:"bytes,7,opt,name=card_chip_identification_2,json=cardChipIdentification2,proto3" json:"card_chip_identification_2,omitempty"`
	CardChipIdentification_2Sig                              *SignatureSecondGen                                  `protobuf:"bytes,8,opt,name=card_chip_identification_2_sig,json=cardChipIdentification2Sig,proto3" json:"card_chip_identification_2_sig,omitempty"`
	DriverCardApplicationIdentification_1                    *DriverCardApplicationIdentificationFirstGen         `protobuf:"bytes,9,opt,name=driver_card_application_identification_1,json=driverCardApplicationIdentification1,proto3" json:"driver_card_application_identification_1,omitempty"`
	DriverCardApplicationIdentification_1Sig                 *SignatureFirstGen                                   `protobuf:"bytes,10,opt,name=driver_card_application_identification_1_sig,json=driverCardApplicationIdentification1Sig,proto3" json:"driver_card_application_identification_1_sig,omitempty"`
	DriverCardApplicationIdentification_2                    *DriverCardApplicationIdentificationSecondGen        `protobuf:"bytes,11,opt,name=driver_card_application_identification_2,json=driverCardApplicationIdentification2,proto3" json:"driver_card_application_identification_2,omitempty"`
	DriverCardApplicationIdentification_2Sig                 *SignatureSecondGen                                  `protobuf:"bytes,12,opt,name=driver_card_application_identification_2_sig,json=driverCardApplicationIdentification2Sig,proto3" json:"driver_card_application_identification_2_sig,omitempty"`
	CardEventData_1                                          *CardEventDataFirstGen                               `protobuf:"bytes,13,opt,name=card_event_data_1,json=cardEventData1,proto3" json:"card_event_data_1,omitempty"`
	CardEventData_1Sig                                       *SignatureFirstGen                                   `protobuf:"bytes,14,opt,name=card_event_data_1_sig,json=cardEventData1Sig,proto3" json:"card_event_data_1_sig,omitempty"`
	CardEventData_2                                          *CardEventDataSecondGen                              `protobuf:"bytes,15,opt,name=card_event_data_2,json=cardEventData2,proto3" json:"card_event_data_2,omitempty"`
	CardEventData_2Sig                                       *SignatureSecondGen                                  `protobuf:"bytes,16,opt,name=card_event_data_2_sig,json=cardEventData2Sig,proto3" json:"card_event_data_2_sig,omitempty"`
	CardFaultData_1                                          *CardFaultDataFirstGen                               `protobuf:"bytes,17,opt,name=card_fault_data_1,json=cardFaultData1,proto3" json:"card_fault_data_1,omitempty"`
	CardFaultData_1Sig                                       *SignatureFirstGen                                   `protobuf:"bytes,18,opt,name=card_fault_data_1_sig,json=cardFaultData1Sig,proto3" json:"card_fault_data_1_sig,omitempty"`
	CardFaultData_2                                          *CardFaultDataSecondGen                              `protobuf:"bytes,19,opt,name=card_fault_data_2,json=cardFaultData2,proto3" json:"card_fault_data_2,omitempty"`
	CardFaultData_2Sig                                       *SignatureSecondGen                                  `protobuf:"bytes,20,opt,name=card_fault_data_2_sig,json=cardFaultData2Sig,proto3" json:"card_fault_data_2_sig,omitempty"`
	CardDriverActivity_1                                     *CardDriverActivityFirstGen                          `protobuf:"bytes,21,opt,name=card_driver_activity_1,json=cardDriverActivity1,proto3" json:"card_driver_activity_1,omitempty"`
	CardDriverActivity_1Sig                                  *SignatureFirstGen                                   `protobuf:"bytes,22,opt,name=card_driver_activity_1_sig,json=cardDriverActivity1Sig,proto3" json:"card_driver_activity_1_sig,omitempty"`
	CardDriverActivity_2                                     *CardDriverActivitySecondGen                         `protobuf:"bytes,23,opt,name=card_driver_activity_2,json=cardDriverActivity2,proto3" json:"card_driver_activity_2,omitempty"`
	CardDriverActivity_2Sig                                  *SignatureSecondGen                                  `protobuf:"bytes,24,opt,name=card_driver_activity_2_sig,json=cardDriverActivity2Sig,proto3" json:"card_driver_activity_2_sig,omitempty"`
	CardVehiclesUsed_1                                       *CardVehiclesUsedFirstGen                            `protobuf:"bytes,25,opt,name=card_vehicles_used_1,json=cardVehiclesUsed1,proto3" json:"card_vehicles_used_1,omitempty"`
	CardVehiclesUsed_1Sig                                    *SignatureFirstGen                                   `protobuf:"bytes,26,opt,name=card_vehicles_used_1_sig,json=cardVehiclesUsed1Sig,proto3" json:"card_vehicles_used_1_sig,omitempty"`
	CardVehiclesUsed_2                                       *CardVehiclesUsedSecondGen                           `protobuf:"bytes,27,opt,name=card_vehicles_used_2,json=cardVehiclesUsed2,proto3" json:"card_vehicles_used_2,omitempty"`
	CardVehiclesUsed_2Sig                                    *SignatureSecondGen                                  `protobuf:"bytes,28,opt,name=card_vehicles_used_2_sig,json=cardVehiclesUsed2Sig,proto3" json:"card_vehicles_used_2_sig,omitempty"`
	CardPlaceDailyWorkPeriod_1                               *CardPlaceDailyWorkPeriodFirstGen                    `protobuf:"bytes,29,opt,name=card_place_daily_work_period_1,json=cardPlaceDailyWorkPeriod1,proto3" json:"card_place_daily_work_period_1,omitempty"`
	CardPlaceDailyWorkPeriod_1Sig                            *SignatureFirstGen                                   `protobuf:"bytes,30,opt,name=card_place_daily_work_period_1_sig,json=cardPlaceDailyWorkPeriod1Sig,proto3" json:"card_place_daily_work_period_1_sig,omitempty"`
	CardPlaceDailyWorkPeriod_2                               *CardPlaceDailyWorkPeriodSecondGen                   `protobuf:"bytes,31,opt,name=card_place_daily_work_period_2,json=cardPlaceDailyWorkPeriod2,proto3" json:"card_place_daily_work_period_2,omitempty"`
	CardPlaceDailyWorkPeriod_2Sig                            *SignatureSecondGen                                  `protobuf:"bytes,32,opt,name=card_place_daily_work_period_2_sig,json=cardPlaceDailyWorkPeriod2Sig,proto3" json:"card_place_daily_work_period_2_sig,omitempty"`
	CardCurrentUse_1                                         *CardCurrentUse                                      `protobuf:"bytes,33,opt,name=card_current_use_1,json=cardCurrentUse1,proto3" json:"card_current_use_1,omitempty"`
	CardCurrentUse_1Sig                                      *SignatureFirstGen                                   `protobuf:"bytes,34,opt,name=card_current_use_1_sig,json=cardCurrentUse1Sig,proto3" json:"card_current_use_1_sig,omitempty"`
	CardCurrentUse_2                                         *CardCurrentUse                                      `protobuf:"bytes,35,opt,name=card_current_use_2,json=cardCurrentUse2,proto3" json:"card_current_use_2,omitempty"`
	CardCurrentUse_2Sig                                      *SignatureSecondGen                                  `protobuf:"bytes,36,opt,name=card_current_use_2_sig,json=cardCurrentUse2Sig,proto3" json:"card_current_use_2_sig,omitempty"`
	CardControlActivityDataRecord_1                          *CardControlActivityDataRecord                       `protobuf:"bytes,37,opt,name=card_control_activity_data_record_1,json=cardControlActivityDataRecord1,proto3" json:"card_control_activity_data_record_1,omitempty"`
	CardControlActivityDataRecord_1Sig                       *SignatureFirstGen                                   `protobuf:"bytes,38,opt,name=card_control_activity_data_record_1_sig,json=cardControlActivityDataRecord1Sig,proto3" json:"card_control_activity_data_record_1_sig,omitempty"`
	CardControlActivityDataRecord_2                          *CardControlActivityDataRecord                       `protobuf:"bytes,39,opt,name=card_control_activity_data_record_2,json=cardControlActivityDataRecord2,proto3" json:"card_control_activity_data_record_2,omitempty"`
	CardControlActivityDataRecord_2Sig                       *SignatureSecondGen                                  `protobuf:"bytes,40,opt,name=card_control_activity_data_record_2_sig,json=cardControlActivityDataRecord2Sig,proto3" json:"card_control_activity_data_record_2_sig,omitempty"`
	LastCardDownload_1                                       *LastCardDownload                                    `protobuf:"bytes,41,opt,name=last_card_download_1,json=lastCardDownload1,proto3" json:"last_card_download_1,omitempty"`
	LastCardDownload_1Sig                                    *SignatureFirstGen                                   `protobuf:"bytes,42,opt,name=last_card_download_1_sig,json=lastCardDownload1Sig,proto3" json:"last_card_download_1_sig,omitempty"`
	LastCardDownload_2                                       *LastCardDownload                                    `protobuf:"bytes,43,opt,name=last_card_download_2,json=lastCardDownload2,proto3" json:"last_card_download_2,omitempty"`
	LastCardDownload_2Sig                                    *SignatureSecondGen                                  `protobuf:"bytes,44,opt,name=last_card_download_2_sig,json=lastCardDownload2Sig,proto3" json:"last_card_download_2_sig,omitempty"`
	CardIdentificationAndDriverCardHolderIdentification_1    *CardIdentificationAndDriverCardHolderIdentification `protobuf:"bytes,45,opt,name=card_identification_and_driver_card_holder_identification_1,json=cardIdentificationAndDriverCardHolderIdentification1,proto3" json:"card_identification_and_driver_card_holder_identification_1,omitempty"`
	CardIdentificationAndDriverCardHolderIdentification_1Sig *SignatureFirstGen                                   `protobuf:"bytes,46,opt,name=card_identification_and_driver_card_holder_identification_1_sig,json=cardIdentificationAndDriverCardHolderIdentification1Sig,proto3" json:"card_identification_and_driver_card_holder_identification_1_sig,omitempty"`
	CardIdentificationAndDriverCardHolderIdentification_2    *CardIdentificationAndDriverCardHolderIdentification `protobuf:"bytes,47,opt,name=card_identification_and_driver_card_holder_identification_2,json=cardIdentificationAndDriverCardHolderIdentification2,proto3" json:"card_identification_and_driver_card_holder_identification_2,omitempty"`
	CardIdentificationAndDriverCardHolderIdentification_2Sig *SignatureSecondGen                                  `protobuf:"bytes,48,opt,name=card_identification_and_driver_card_holder_identification_2_sig,json=cardIdentificationAndDriverCardHolderIdentification2Sig,proto3" json:"card_identification_and_driver_card_holder_identification_2_sig,omitempty"`
	CardDrivingLicenceInformation_1                          *CardDrivingLicenceInformation                       `protobuf:"bytes,49,opt,name=card_driving_licence_information_1,json=cardDrivingLicenceInformation1,proto3" json:"card_driving_licence_information_1,omitempty"`
	CardDrivingLicenceInformation_1Sig                       *SignatureFirstGen                                   `protobuf:"bytes,50,opt,name=card_driving_licence_information_1_sig,json=cardDrivingLicenceInformation1Sig,proto3" json:"card_driving_licence_information_1_sig,omitempty"`
	CardDrivingLicenceInformation_2                          *CardDrivingLicenceInformation                       `protobuf:"bytes,51,opt,name=card_driving_licence_information_2,json=cardDrivingLicenceInformation2,proto3" json:"card_driving_licence_information_2,omitempty"`
	CardDrivingLicenceInformation_2Sig                       *SignatureSecondGen                                  `protobuf:"bytes,52,opt,name=card_driving_licence_information_2_sig,json=cardDrivingLicenceInformation2Sig,proto3" json:"card_driving_licence_information_2_sig,omitempty"`
	SpecificConditions_1                                     *SpecificConditionsFirstGen                          `protobuf:"bytes,53,opt,name=specific_conditions_1,json=specificConditions1,proto3" json:"specific_conditions_1,omitempty"`
	SpecificConditions_1Sig                                  *SignatureFirstGen                                   `protobuf:"bytes,54,opt,name=specific_conditions_1_sig,json=specificConditions1Sig,proto3" json:"specific_conditions_1_sig,omitempty"`
	SpecificConditions_2                                     *SpecificConditionsSecondGen                         `protobuf:"bytes,55,opt,name=specific_conditions_2,json=specificConditions2,proto3" json:"specific_conditions_2,omitempty"`
	SpecificConditions_2Sig                                  *SignatureSecondGen                                  `protobuf:"bytes,56,opt,name=specific_conditions_2_sig,json=specificConditions2Sig,proto3" json:"specific_conditions_2_sig,omitempty"`
	CardVehicleUnitsUsed                                     *CardVehicleUnitsUsed                                `protobuf:"bytes,57,opt,name=card_vehicle_units_used,json=cardVehicleUnitsUsed,proto3" json:"card_vehicle_units_used,omitempty"`
	CardVehicleUnitsUsedSig                                  *SignatureSecondGen                                  `protobuf:"bytes,58,opt,name=card_vehicle_units_used_sig,json=cardVehicleUnitsUsedSig,proto3" json:"card_vehicle_units_used_sig,omitempty"`
	GnssAccumulatedDriving                                   *GNSSAccumulatedDriving                              `protobuf:"bytes,59,opt,name=gnss_accumulated_driving,json=gnssAccumulatedDriving,proto3" json:"gnss_accumulated_driving,omitempty"`
	GnssAccumulatedDrivingSig                                *SignatureSecondGen                                  `protobuf:"bytes,60,opt,name=gnss_accumulated_driving_sig,json=gnssAccumulatedDrivingSig,proto3" json:"gnss_accumulated_driving_sig,omitempty"`
	CardCertificate                                          *CertificateFirstGen                                 `protobuf:"bytes,61,opt,name=card_certificate,json=cardCertificate,proto3" json:"card_certificate,omitempty"`
	CardMaCertificate                                        *CertificateSecondGen                                `protobuf:"bytes,62,opt,name=card_ma_certificate,json=cardMaCertificate,proto3" json:"card_ma_certificate,omitempty"`
	CardSignCertificate                                      *CertificateSecondGen                                `protobuf:"bytes,63,opt,name=card_sign_certificate,json=cardSignCertificate,proto3" json:"card_sign_certificate,omitempty"`
	MemberStateCertificate                                   *CertificateFirstGen                                 `protobuf:"bytes,64,opt,name=member_state_certificate,json=memberStateCertificate,proto3" json:"member_state_certificate,omitempty"`
	CaCertificate                                            *CertificateSecondGen                                `protobuf:"bytes,65,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	LinkCertificate                                          *CertificateSecondGen                                `protobuf:"bytes,66,opt,name=link_certificate,json=linkCertificate,proto3" json:"link_certificate,omitempty"`
	DriverCardApplicationIdentification_2_2                  *DriverCardApplicationIdentificationSecondGenV2      `protobuf:"bytes,67,opt,name=driver_card_application_identification_2_2,json=driverCardApplicationIdentification22,proto3" json:"driver_card_application_identification_2_2,omitempty"`
	DriverCardApplicationIdentification_2_2Sig               *SignatureSecondGen                                  `protobuf:"bytes,68,opt,name=driver_card_application_identification_2_2_sig,json=driverCardApplicationIdentification22Sig,proto3" json:"driver_card_application_identification_2_2_sig,omitempty"`
	CardPlaceAuthDailyWorkPeriod                             *CardPlaceAuthDailyWorkPeriod                        `protobuf:"bytes,69,opt,name=card_place_auth_daily_work_period,json=cardPlaceAuthDailyWorkPeriod,proto3" json:"card_place_auth_daily_work_period,omitempty"`
	CardPlaceAuthDailyWorkPeriodSig                          *SignatureSecondGen                                  `protobuf:"bytes,70,opt,name=card_place_auth_daily_work_period_sig,json=cardPlaceAuthDailyWorkPeriodSig,proto3" json:"card_place_auth_daily_work_period_sig,omitempty"`
	GnssAuthAccumulatedDriving                               *GNSSAuthAccumulatedDriving                          `protobuf:"bytes,71,opt,name=gnss_auth_accumulated_driving,json=gnssAuthAccumulatedDriving,proto3" json:"gnss_auth_accumulated_driving,omitempty"`
	GnssAuthAccumulatedDrivingSig                            *SignatureSecondGen                                  `protobuf:"bytes,72,opt,name=gnss_auth_accumulated_driving_sig,json=gnssAuthAccumulatedDrivingSig,proto3" json:"gnss_auth_accumulated_driving_sig,omitempty"`
	CardBorderCrossings                                      *CardBorderCrossings                                 `protobuf:"bytes,73,opt,name=card_border_crossings,json=cardBorderCrossings,proto3" json:"card_border_crossings,omitempty"`
	CardBorderCrossingsSig                                   *SignatureSecondGen                                  `protobuf:"bytes,74,opt,name=card_border_crossings_sig,json=cardBorderCrossingsSig,proto3" json:"card_border_crossings_sig,omitempty"`
	CardLoadUnloadOperations                                 *CardLoadUnloadOperations                            `protobuf:"bytes,75,opt,name=card_load_unload_operations,json=cardLoadUnloadOperations,proto3" json:"card_load_unload_operations,omitempty"`
	CardLoadUnloadOperationsSig                              *SignatureSecondGen                                  `protobuf:"bytes,76,opt,name=card_load_unload_operations_sig,json=cardLoadUnloadOperationsSig,proto3" json:"card_load_unload_operations_sig,omitempty"`
	CardLoadTypeEntries                                      *CardLoadTypeEntries                                 `protobuf:"bytes,77,opt,name=card_load_type_entries,json=cardLoadTypeEntries,proto3" json:"card_load_type_entries,omitempty"`
	CardLoadTypeEntriesSig                                   *SignatureSecondGen                                  `protobuf:"bytes,78,opt,name=card_load_type_entries_sig,json=cardLoadTypeEntriesSig,proto3" json:"card_load_type_entries_sig,omitempty"`
	VuConfiguration                                          *VuConfiguration                                     `protobuf:"bytes,79,opt,name=vu_configuration,json=vuConfiguration,proto3" json:"vu_configuration,omitempty"`
	VuConfigurationSig                                       *SignatureSecondGen                                  `protobuf:"bytes,80,opt,name=vu_configuration_sig,json=vuConfigurationSig,proto3" json:"vu_configuration_sig,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{4}
}

func (x *Card) GetCardIccIdentification_1() *CardIccIdentificationFirstGen {
	if x != nil {
		return x.CardIccIdentification_1
	}
	return nil
}

func (x *Card) GetCardIccIdentification_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardIccIdentification_1Sig
	}
	return nil
}

func (x *Card) GetCardIccIdentification_2() *CardIccIdentificationSecondGen {
	if x != nil {
		return x.CardIccIdentification_2
	}
	return nil
}

func (x *Card) GetCardIccIdentification_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardIccIdentification_2Sig
	}
	return nil
}

func (x *Card) GetCardChipIdentification_1() *CardChipIdentification {
	if x != nil {
		return x.CardChipIdentification_1
	}
	return nil
}

func (x *Card) GetCardChipIdentification_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardChipIdentification_1Sig
	}
	return nil
}

func (x *Card) GetCardChipIdentification_2() *CardChipIdentification {
	if x != nil {
		return x.CardChipIdentification_2
	}
	return nil
}

func (x *Card) GetCardChipIdentification_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardChipIdentification_2Sig
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_1() *DriverCardApplicationIdentificationFirstGen {
	if x != nil {
		return x.DriverCardApplicationIdentification_1
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.DriverCardApplicationIdentification_1Sig
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_2() *DriverCardApplicationIdentificationSecondGen {
	if x != nil {
		return x.DriverCardApplicationIdentification_2
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.DriverCardApplicationIdentification_2Sig
	}
	return nil
}

func (x *Card) GetCardEventData_1() *CardEventDataFirstGen {
	if x != nil {
		return x.CardEventData_1
	}
	return nil
}

func (x *Card) GetCardEventData_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardEventData_1Sig
	}
	return nil
}

func (x *Card) GetCardEventData_2() *CardEventDataSecondGen {
	if x != nil {
		return x.CardEventData_2
	}
	return nil
}

func (x *Card) GetCardEventData_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardEventData_2Sig
	}
	return nil
}

func (x *Card) GetCardFaultData_1() *CardFaultDataFirstGen {
	if x != nil {
		return x.CardFaultData_1
	}
	return nil
}

func (x *Card) GetCardFaultData_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardFaultData_1Sig
	}
	return nil
}

func (x *Card) GetCardFaultData_2() *CardFaultDataSecondGen {
	if x != nil {
		return x.CardFaultData_2
	}
	return nil
}

func (x *Card) GetCardFaultData_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardFaultData_2Sig
	}
	return nil
}

func (x *Card) GetCardDriverActivity_1() *CardDriverActivityFirstGen {
	if x != nil {
		return x.CardDriverActivity_1
	}
	return nil
}

func (x *Card) GetCardDriverActivity_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardDriverActivity_1Sig
	}
	return nil
}

func (x *Card) GetCardDriverActivity_2() *CardDriverActivitySecondGen {
	if x != nil {
		return x.CardDriverActivity_2
	}
	return nil
}

func (x *Card) GetCardDriverActivity_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardDriverActivity_2Sig
	}
	return nil
}

func (x *Card) GetCardVehiclesUsed_1() *CardVehiclesUsedFirstGen {
	if x != nil {
		return x.CardVehiclesUsed_1
	}
	return nil
}

func (x *Card) GetCardVehiclesUsed_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardVehiclesUsed_1Sig
	}
	return nil
}

func (x *Card) GetCardVehiclesUsed_2() *CardVehiclesUsedSecondGen {
	if x != nil {
		return x.CardVehiclesUsed_2
	}
	return nil
}

func (x *Card) GetCardVehiclesUsed_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardVehiclesUsed_2Sig
	}
	return nil
}

func (x *Card) GetCardPlaceDailyWorkPeriod_1() *CardPlaceDailyWorkPeriodFirstGen {
	if x != nil {
		return x.CardPlaceDailyWorkPeriod_1
	}
	return nil
}

func (x *Card) GetCardPlaceDailyWorkPeriod_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardPlaceDailyWorkPeriod_1Sig
	}
	return nil
}

func (x *Card) GetCardPlaceDailyWorkPeriod_2() *CardPlaceDailyWorkPeriodSecondGen {
	if x != nil {
		return x.CardPlaceDailyWorkPeriod_2
	}
	return nil
}

func (x *Card) GetCardPlaceDailyWorkPeriod_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardPlaceDailyWorkPeriod_2Sig
	}
	return nil
}

func (x *Card) GetCardCurrentUse_1() *CardCurrentUse {
	if x != nil {
		return x.CardCurrentUse_1
	}
	return nil
}

func (x *Card) GetCardCurrentUse_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardCurrentUse_1Sig
	}
	return nil
}

func (x *Card) GetCardCurrentUse_2() *CardCurrentUse {
	if x != nil {
		return x.CardCurrentUse_2
	}
	return nil
}

func (x *Card) GetCardCurrentUse_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardCurrentUse_2Sig
	}
	return nil
}

func (x *Card) GetCardControlActivityDataRecord_1() *CardControlActivityDataRecord {
	if x != nil {
		return x.CardControlActivityDataRecord_1
	}
	return nil
}

func (x *Card) GetCardControlActivityDataRecord_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardControlActivityDataRecord_1Sig
	}
	return nil
}

func (x *Card) GetCardControlActivityDataRecord_2() *CardControlActivityDataRecord {
	if x != nil {
		return x.CardControlActivityDataRecord_2
	}
	return nil
}

func (x *Card) GetCardControlActivityDataRecord_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardControlActivityDataRecord_2Sig
	}
	return nil
}

func (x *Card) GetLastCardDownload_1() *LastCardDownload {
	if x != nil {
		return x.LastCardDownload_1
	}
	return nil
}

func (x *Card) GetLastCardDownload_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.LastCardDownload_1Sig
	}
	return nil
}

func (x *Card) GetLastCardDownload_2() *LastCardDownload {
	if x != nil {
		return x.LastCardDownload_2
	}
	return nil
}

func (x *Card) GetLastCardDownload_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.LastCardDownload_2Sig
	}
	return nil
}

func (x *Card) GetCardIdentificationAndDriverCardHolderIdentification_1() *CardIdentificationAndDriverCardHolderIdentification {
	if x != nil {
		return x.CardIdentificationAndDriverCardHolderIdentification_1
	}
	return nil
}

func (x *Card) GetCardIdentificationAndDriverCardHolderIdentification_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardIdentificationAndDriverCardHolderIdentification_1Sig
	}
	return nil
}

func (x *Card) GetCardIdentificationAndDriverCardHolderIdentification_2() *CardIdentificationAndDriverCardHolderIdentification {
	if x != nil {
		return x.CardIdentificationAndDriverCardHolderIdentification_2
	}
	return nil
}

func (x *Card) GetCardIdentificationAndDriverCardHolderIdentification_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardIdentificationAndDriverCardHolderIdentification_2Sig
	}
	return nil
}

func (x *Card) GetCardDrivingLicenceInformation_1() *CardDrivingLicenceInformation {
	if x != nil {
		return x.CardDrivingLicenceInformation_1
	}
	return nil
}

func (x *Card) GetCardDrivingLicenceInformation_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.CardDrivingLicenceInformation_1Sig
	}
	return nil
}

func (x *Card) GetCardDrivingLicenceInformation_2() *CardDrivingLicenceInformation {
	if x != nil {
		return x.CardDrivingLicenceInformation_2
	}
	return nil
}

func (x *Card) GetCardDrivingLicenceInformation_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.CardDrivingLicenceInformation_2Sig
	}
	return nil
}

func (x *Card) GetSpecificConditions_1() *SpecificConditionsFirstGen {
	if x != nil {
		return x.SpecificConditions_1
	}
	return nil
}

func (x *Card) GetSpecificConditions_1Sig() *SignatureFirstGen {
	if x != nil {
		return x.SpecificConditions_1Sig
	}
	return nil
}

func (x *Card) GetSpecificConditions_2() *SpecificConditionsSecondGen {
	if x != nil {
		return x.SpecificConditions_2
	}
	return nil
}

func (x *Card) GetSpecificConditions_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.SpecificConditions_2Sig
	}
	return nil
}

func (x *Card) GetCardVehicleUnitsUsed() *CardVehicleUnitsUsed {
	if x != nil {
		return x.CardVehicleUnitsUsed
	}
	return nil
}

func (x *Card) GetCardVehicleUnitsUsedSig() *SignatureSecondGen {
	if x != nil {
		return x.CardVehicleUnitsUsedSig
	}
	return nil
}

func (x *Card) GetGnssAccumulatedDriving() *GNSSAccumulatedDriving {
	if x != nil {
		return x.GnssAccumulatedDriving
	}
	return nil
}

func (x *Card) GetGnssAccumulatedDrivingSig() *SignatureSecondGen {
	if x != nil {
		return x.GnssAccumulatedDrivingSig
	}
	return nil
}

func (x *Card) GetCardCertificate() *CertificateFirstGen {
	if x != nil {
		return x.CardCertificate
	}
	return nil
}

func (x *Card) GetCardMaCertificate() *CertificateSecondGen {
	if x != nil {
		return x.CardMaCertificate
	}
	return nil
}

func (x *Card) GetCardSignCertificate() *CertificateSecondGen {
	if x != nil {
		return x.CardSignCertificate
	}
	return nil
}

func (x *Card) GetMemberStateCertificate() *CertificateFirstGen {
	if x != nil {
		return x.MemberStateCertificate
	}
	return nil
}

func (x *Card) GetCaCertificate() *CertificateSecondGen {
	if x != nil {
		return x.CaCertificate
	}
	return nil
}

func (x *Card) GetLinkCertificate() *CertificateSecondGen {
	if x != nil {
		return x.LinkCertificate
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_2_2() *DriverCardApplicationIdentificationSecondGenV2 {
	if x != nil {
		return x.DriverCardApplicationIdentification_2_2
	}
	return nil
}

func (x *Card) GetDriverCardApplicationIdentification_2_2Sig() *SignatureSecondGen {
	if x != nil {
		return x.DriverCardApplicationIdentification_2_2Sig
	}
	return nil
}

func (x *Card) GetCardPlaceAuthDailyWorkPeriod() *CardPlaceAuthDailyWorkPeriod {
	if x != nil {
		return x.CardPlaceAuthDailyWorkPeriod
	}
	return nil
}

func (x *Card) GetCardPlaceAuthDailyWorkPeriodSig() *SignatureSecondGen {
	if x != nil {
		return x.CardPlaceAuthDailyWorkPeriodSig
	}
	return nil
}

func (x *Card) GetGnssAuthAccumulatedDriving() *GNSSAuthAccumulatedDriving {
	if x != nil {
		return x.GnssAuthAccumulatedDriving
	}
	return nil
}

func (x *Card) GetGnssAuthAccumulatedDrivingSig() *SignatureSecondGen {
	if x != nil {
		return x.GnssAuthAccumulatedDrivingSig
	}
	return nil
}

func (x *Card) GetCardBorderCrossings() *CardBorderCrossings {
	if x != nil {
		return x.CardBorderCrossings
	}
	return nil
}

func (x *Card) GetCardBorderCrossingsSig() *SignatureSecondGen {
	if x != nil {
		return x.CardBorderCrossingsSig
	}
	return nil
}

func (x *Card) GetCardLoadUnloadOperations() *CardLoadUnloadOperations {
	if x != nil {
		return x.CardLoadUnloadOperations
	}
	return nil
}

func (x *Card) GetCardLoadUnloadOperationsSig() *SignatureSecondGen {
	if x != nil {
		return x.CardLoadUnloadOperationsSig
	}
	return nil
}

func (x *Card) GetCardLoadTypeEntries() *CardLoadTypeEntries {
	if x != nil {
		return x.CardLoadTypeEntries
	}
	return nil
}

func (x *Card) GetCardLoadTypeEntriesSig() *SignatureSecondGen {
	if x != nil {
		return x.CardLoadTypeEntriesSig
	}
	return nil
}

func (x *Card) GetVuConfiguration() *VuConfiguration {
	if x != nil {
		return x.VuConfiguration
	}
	return nil
}

func (x *Card) GetVuConfigurationSig() *SignatureSecondGen {
	if x != nil {
		return x.VuConfigurationSig
	}
	return nil
}

type Vu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VuOverview_1        *VuOverviewFirstGen           `protobuf:"bytes,1,opt,name=vu_overview_1,json=vuOverview1,proto3" json:"vu_overview_1,omitempty"`
	VuOverview_2        *VuOverviewSecondGen          `protobuf:"bytes,2,opt,name=vu_overview_2,json=vuOverview2,proto3" json:"vu_overview_2,omitempty"`
	VuActivities_1      []*VuActivitiesFirstGen       `protobuf:"bytes,3,rep,name=vu_activities_1,json=vuActivities1,proto3" json:"vu_activities_1,omitempty"`
	VuActivities_2      []*VuActivitiesSecondGen      `protobuf:"bytes,4,rep,name=vu_activities_2,json=vuActivities2,proto3" json:"vu_activities_2,omitempty"`
	VuEventsAndFaults_1 []*VuEventsAndFaultsFirstGen  `protobuf:"bytes,5,rep,name=vu_events_and_faults_1,json=vuEventsAndFaults1,proto3" json:"vu_events_and_faults_1,omitempty"`
	VuEventsAndFaults_2 []*VuEventsAndFaultsSecondGen `protobuf:"bytes,6,rep,name=vu_events_and_faults_2,json=vuEventsAndFaults2,proto3" json:"vu_events_and_faults_2,omitempty"`
	VuDetailedSpeed_1   []*VuDetailedSpeedFirstGen    `protobuf:"bytes,7,rep,name=vu_detailed_speed_1,json=vuDetailedSpeed1,proto3" json:"vu_detailed_speed_1,omitempty"`
	VuDetailedSpeed_2   []*VuDetailedSpeedSecondGen   `protobuf:"bytes,8,rep,name=vu_detailed_speed_2,json=vuDetailedSpeed2,proto3" json:"vu_detailed_speed_2,omitempty"`
	VuTechnicalData_1   []*VuTechnicalDataFirstGen    `protobuf:"bytes,9,rep,name=vu_technical_data_1,json=vuTechnicalData1,proto3" json:"vu_technical_data_1,omitempty"`
	VuTechnicalData_2   []*VuTechnicalDataSecondGen   `protobuf:"bytes,10,rep,name=vu_technical_data_2,json=vuTechnicalData2,proto3" json:"vu_technical_data_2,omitempty"`
	// SecondGenV2 follows
	VuDownloadInterfaceVersion *VuDownloadInterfaceVersion     `protobuf:"bytes,11,opt,name=vu_download_interface_version,json=vuDownloadInterfaceVersion,proto3" json:"vu_download_interface_version,omitempty"`
	VuOverview_2_2             *VuOverviewSecondGenV2          `protobuf:"bytes,12,opt,name=vu_overview_2_2,json=vuOverview22,proto3" json:"vu_overview_2_2,omitempty"`
	VuActivities_2_2           []*VuActivitiesSecondGenV2      `protobuf:"bytes,13,rep,name=vu_activities_2_2,json=vuActivities22,proto3" json:"vu_activities_2_2,omitempty"`
	VuEventsAndFaults_2_2      []*VuEventsAndFaultsSecondGenV2 `protobuf:"bytes,14,rep,name=vu_events_and_faults_2_2,json=vuEventsAndFaults22,proto3" json:"vu_events_and_faults_2_2,omitempty"`
	VuTechnicalData_2_2        []*VuTechnicalDataSecondGenV2   `protobuf:"bytes,15,rep,name=vu_technical_data_2_2,json=vuTechnicalData22,proto3" json:"vu_technical_data_2_2,omitempty"`
}

func (x *Vu) Reset() {
	*x = Vu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vu) ProtoMessage() {}

func (x *Vu) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vu.ProtoReflect.Descriptor instead.
func (*Vu) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{5}
}

func (x *Vu) GetVuOverview_1() *VuOverviewFirstGen {
	if x != nil {
		return x.VuOverview_1
	}
	return nil
}

func (x *Vu) GetVuOverview_2() *VuOverviewSecondGen {
	if x != nil {
		return x.VuOverview_2
	}
	return nil
}

func (x *Vu) GetVuActivities_1() []*VuActivitiesFirstGen {
	if x != nil {
		return x.VuActivities_1
	}
	return nil
}

func (x *Vu) GetVuActivities_2() []*VuActivitiesSecondGen {
	if x != nil {
		return x.VuActivities_2
	}
	return nil
}

func (x *Vu) GetVuEventsAndFaults_1() []*VuEventsAndFaultsFirstGen {
	if x != nil {
		return x.VuEventsAndFaults_1
	}
	return nil
}

func (x *Vu) GetVuEventsAndFaults_2() []*VuEventsAndFaultsSecondGen {
	if x != nil {
		return x.VuEventsAndFaults_2
	}
	return nil
}

func (x *Vu) GetVuDetailedSpeed_1() []*VuDetailedSpeedFirstGen {
	if x != nil {
		return x.VuDetailedSpeed_1
	}
	return nil
}

func (x *Vu) GetVuDetailedSpeed_2() []*VuDetailedSpeedSecondGen {
	if x != nil {
		return x.VuDetailedSpeed_2
	}
	return nil
}

func (x *Vu) GetVuTechnicalData_1() []*VuTechnicalDataFirstGen {
	if x != nil {
		return x.VuTechnicalData_1
	}
	return nil
}

func (x *Vu) GetVuTechnicalData_2() []*VuTechnicalDataSecondGen {
	if x != nil {
		return x.VuTechnicalData_2
	}
	return nil
}

func (x *Vu) GetVuDownloadInterfaceVersion() *VuDownloadInterfaceVersion {
	if x != nil {
		return x.VuDownloadInterfaceVersion
	}
	return nil
}

func (x *Vu) GetVuOverview_2_2() *VuOverviewSecondGenV2 {
	if x != nil {
		return x.VuOverview_2_2
	}
	return nil
}

func (x *Vu) GetVuActivities_2_2() []*VuActivitiesSecondGenV2 {
	if x != nil {
		return x.VuActivities_2_2
	}
	return nil
}

func (x *Vu) GetVuEventsAndFaults_2_2() []*VuEventsAndFaultsSecondGenV2 {
	if x != nil {
		return x.VuEventsAndFaults_2_2
	}
	return nil
}

func (x *Vu) GetVuTechnicalData_2_2() []*VuTechnicalDataSecondGenV2 {
	if x != nil {
		return x.VuTechnicalData_2_2
	}
	return nil
}

type CardIccIdentificationFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool                          `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ClockStop                uint32                        `protobuf:"varint,2,opt,name=clock_stop,json=clockStop,proto3" json:"clock_stop,omitempty"` // ClockStop byte
	CardExtendedSerialNumber *ExtendedSerialNumberFirstGen `protobuf:"bytes,3,opt,name=card_extended_serial_number,json=cardExtendedSerialNumber,proto3" json:"card_extended_serial_number,omitempty"`
	CardApprovalNumber       string                        `protobuf:"bytes,4,opt,name=card_approval_number,json=cardApprovalNumber,proto3" json:"card_approval_number,omitempty"`  // CardApprovalNumber [8]byte
	CardPersonaliserId       uint32                        `protobuf:"varint,5,opt,name=card_personaliser_id,json=cardPersonaliserId,proto3" json:"card_personaliser_id,omitempty"` // ManufacturerCode byte
	EmbedderIcAssemblerId    *EmbedderIcAssemblerId        `protobuf:"bytes,6,opt,name=embedder_ic_assembler_id,json=embedderIcAssemblerId,proto3" json:"embedder_ic_assembler_id,omitempty"`
	IcIdentifier             []byte                        `protobuf:"bytes,7,opt,name=ic_identifier,json=icIdentifier,proto3" json:"ic_identifier,omitempty"` // IcIdentifier [2]byte
}

func (x *CardIccIdentificationFirstGen) Reset() {
	*x = CardIccIdentificationFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIccIdentificationFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIccIdentificationFirstGen) ProtoMessage() {}

func (x *CardIccIdentificationFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIccIdentificationFirstGen.ProtoReflect.Descriptor instead.
func (*CardIccIdentificationFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{6}
}

func (x *CardIccIdentificationFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardIccIdentificationFirstGen) GetClockStop() uint32 {
	if x != nil {
		return x.ClockStop
	}
	return 0
}

func (x *CardIccIdentificationFirstGen) GetCardExtendedSerialNumber() *ExtendedSerialNumberFirstGen {
	if x != nil {
		return x.CardExtendedSerialNumber
	}
	return nil
}

func (x *CardIccIdentificationFirstGen) GetCardApprovalNumber() string {
	if x != nil {
		return x.CardApprovalNumber
	}
	return ""
}

func (x *CardIccIdentificationFirstGen) GetCardPersonaliserId() uint32 {
	if x != nil {
		return x.CardPersonaliserId
	}
	return 0
}

func (x *CardIccIdentificationFirstGen) GetEmbedderIcAssemblerId() *EmbedderIcAssemblerId {
	if x != nil {
		return x.EmbedderIcAssemblerId
	}
	return nil
}

func (x *CardIccIdentificationFirstGen) GetIcIdentifier() []byte {
	if x != nil {
		return x.IcIdentifier
	}
	return nil
}

type CardIccIdentificationSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool                           `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ClockStop                uint32                         `protobuf:"varint,2,opt,name=clock_stop,json=clockStop,proto3" json:"clock_stop,omitempty"` // ClockStop byte
	CardExtendedSerialNumber *ExtendedSerialNumberSecondGen `protobuf:"bytes,3,opt,name=card_extended_serial_number,json=cardExtendedSerialNumber,proto3" json:"card_extended_serial_number,omitempty"`
	CardApprovalNumber       string                         `protobuf:"bytes,4,opt,name=card_approval_number,json=cardApprovalNumber,proto3" json:"card_approval_number,omitempty"`  // CardApprovalNumber [8]byte
	CardPersonaliserId       uint32                         `protobuf:"varint,5,opt,name=card_personaliser_id,json=cardPersonaliserId,proto3" json:"card_personaliser_id,omitempty"` // ManufacturerCode byte
	EmbedderIcAssemblerId    *EmbedderIcAssemblerId         `protobuf:"bytes,6,opt,name=embedder_ic_assembler_id,json=embedderIcAssemblerId,proto3" json:"embedder_ic_assembler_id,omitempty"`
	IcIdentifier             []byte                         `protobuf:"bytes,7,opt,name=ic_identifier,json=icIdentifier,proto3" json:"ic_identifier,omitempty"` // IcIdentifier [2]byte
}

func (x *CardIccIdentificationSecondGen) Reset() {
	*x = CardIccIdentificationSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIccIdentificationSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIccIdentificationSecondGen) ProtoMessage() {}

func (x *CardIccIdentificationSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIccIdentificationSecondGen.ProtoReflect.Descriptor instead.
func (*CardIccIdentificationSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{7}
}

func (x *CardIccIdentificationSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardIccIdentificationSecondGen) GetClockStop() uint32 {
	if x != nil {
		return x.ClockStop
	}
	return 0
}

func (x *CardIccIdentificationSecondGen) GetCardExtendedSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.CardExtendedSerialNumber
	}
	return nil
}

func (x *CardIccIdentificationSecondGen) GetCardApprovalNumber() string {
	if x != nil {
		return x.CardApprovalNumber
	}
	return ""
}

func (x *CardIccIdentificationSecondGen) GetCardPersonaliserId() uint32 {
	if x != nil {
		return x.CardPersonaliserId
	}
	return 0
}

func (x *CardIccIdentificationSecondGen) GetEmbedderIcAssemblerId() *EmbedderIcAssemblerId {
	if x != nil {
		return x.EmbedderIcAssemblerId
	}
	return nil
}

func (x *CardIccIdentificationSecondGen) GetIcIdentifier() []byte {
	if x != nil {
		return x.IcIdentifier
	}
	return nil
}

type ExtendedSerialNumberFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber     uint32     `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	MonthYear        *MonthYear `protobuf:"bytes,2,opt,name=month_year,json=monthYear,proto3" json:"month_year,omitempty"`
	Type             uint32     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	ManufacturerCode uint32     `protobuf:"varint,4,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"` // ManufacturerCode byte
}

func (x *ExtendedSerialNumberFirstGen) Reset() {
	*x = ExtendedSerialNumberFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSerialNumberFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSerialNumberFirstGen) ProtoMessage() {}

func (x *ExtendedSerialNumberFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSerialNumberFirstGen.ProtoReflect.Descriptor instead.
func (*ExtendedSerialNumberFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{8}
}

func (x *ExtendedSerialNumberFirstGen) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ExtendedSerialNumberFirstGen) GetMonthYear() *MonthYear {
	if x != nil {
		return x.MonthYear
	}
	return nil
}

func (x *ExtendedSerialNumberFirstGen) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExtendedSerialNumberFirstGen) GetManufacturerCode() uint32 {
	if x != nil {
		return x.ManufacturerCode
	}
	return 0
}

type ExtendedSerialNumberSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber     uint32     `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	MonthYear        *MonthYear `protobuf:"bytes,2,opt,name=month_year,json=monthYear,proto3" json:"month_year,omitempty"`
	Type             uint32     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                 // EquipmentType byte
	ManufacturerCode uint32     `protobuf:"varint,4,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"` // ManufacturerCode byte
}

func (x *ExtendedSerialNumberSecondGen) Reset() {
	*x = ExtendedSerialNumberSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSerialNumberSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSerialNumberSecondGen) ProtoMessage() {}

func (x *ExtendedSerialNumberSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSerialNumberSecondGen.ProtoReflect.Descriptor instead.
func (*ExtendedSerialNumberSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{9}
}

func (x *ExtendedSerialNumberSecondGen) GetSerialNumber() uint32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ExtendedSerialNumberSecondGen) GetMonthYear() *MonthYear {
	if x != nil {
		return x.MonthYear
	}
	return nil
}

func (x *ExtendedSerialNumberSecondGen) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExtendedSerialNumberSecondGen) GetManufacturerCode() uint32 {
	if x != nil {
		return x.ManufacturerCode
	}
	return 0
}

type EmbedderIcAssemblerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode             string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`           // CountryCode [2]byte
	ModuleEmbedder          uint32 `protobuf:"varint,2,opt,name=module_embedder,json=moduleEmbedder,proto3" json:"module_embedder,omitempty"` // ModuleEmbedder BCDString
	ManufacturerInformation uint32 `protobuf:"varint,3,opt,name=manufacturer_information,json=manufacturerInformation,proto3" json:"manufacturer_information,omitempty"`
}

func (x *EmbedderIcAssemblerId) Reset() {
	*x = EmbedderIcAssemblerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedderIcAssemblerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedderIcAssemblerId) ProtoMessage() {}

func (x *EmbedderIcAssemblerId) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedderIcAssemblerId.ProtoReflect.Descriptor instead.
func (*EmbedderIcAssemblerId) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{10}
}

func (x *EmbedderIcAssemblerId) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *EmbedderIcAssemblerId) GetModuleEmbedder() uint32 {
	if x != nil {
		return x.ModuleEmbedder
	}
	return 0
}

func (x *EmbedderIcAssemblerId) GetManufacturerInformation() uint32 {
	if x != nil {
		return x.ManufacturerInformation
	}
	return 0
}

type MonthYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *MonthYear) Reset() {
	*x = MonthYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthYear) ProtoMessage() {}

func (x *MonthYear) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthYear.ProtoReflect.Descriptor instead.
func (*MonthYear) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{11}
}

func (x *MonthYear) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *MonthYear) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type SignatureFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"` // Signature [128]byte
}

func (x *SignatureFirstGen) Reset() {
	*x = SignatureFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureFirstGen) ProtoMessage() {}

func (x *SignatureFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureFirstGen.ProtoReflect.Descriptor instead.
func (*SignatureFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{12}
}

func (x *SignatureFirstGen) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SignatureSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"` // Signature []byte size=64..132
}

func (x *SignatureSecondGen) Reset() {
	*x = SignatureSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureSecondGen) ProtoMessage() {}

func (x *SignatureSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureSecondGen.ProtoReflect.Descriptor instead.
func (*SignatureSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{13}
}

func (x *SignatureSecondGen) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CardChipIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	IcSerialNumber           []byte `protobuf:"bytes,2,opt,name=ic_serial_number,json=icSerialNumber,proto3" json:"ic_serial_number,omitempty"`                               // [4]byte
	IcManufacturingReference []byte `protobuf:"bytes,3,opt,name=ic_manufacturing_reference,json=icManufacturingReference,proto3" json:"ic_manufacturing_reference,omitempty"` // [4]byte
}

func (x *CardChipIdentification) Reset() {
	*x = CardChipIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChipIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChipIdentification) ProtoMessage() {}

func (x *CardChipIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChipIdentification.ProtoReflect.Descriptor instead.
func (*CardChipIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{14}
}

func (x *CardChipIdentification) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardChipIdentification) GetIcSerialNumber() []byte {
	if x != nil {
		return x.IcSerialNumber
	}
	return nil
}

func (x *CardChipIdentification) GetIcManufacturingReference() []byte {
	if x != nil {
		return x.IcManufacturingReference
	}
	return nil
}

type DriverCardApplicationIdentificationFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	TypeOfTachographCardId  uint32 `protobuf:"varint,2,opt,name=type_of_tachograph_card_id,json=typeOfTachographCardId,proto3" json:"type_of_tachograph_card_id,omitempty"` // EquipmentType byte
	CardStructureVersion    []byte `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion,proto3" json:"card_structure_version,omitempty"`            // CardStructureVersion [2]byte
	NoOfEventsPerType       uint32 `protobuf:"varint,4,opt,name=no_of_events_per_type,json=noOfEventsPerType,proto3" json:"no_of_events_per_type,omitempty"`                // NoOfEventsPerType byte
	NoOfFaultsPerType       uint32 `protobuf:"varint,5,opt,name=no_of_faults_per_type,json=noOfFaultsPerType,proto3" json:"no_of_faults_per_type,omitempty"`                // NoOfFaultsPerType byte
	ActivityStructureLength uint32 `protobuf:"varint,6,opt,name=activity_structure_length,json=activityStructureLength,proto3" json:"activity_structure_length,omitempty"`  // CardActivityLengthRange uint16
	NoOfCardVehicleRecords  uint32 `protobuf:"varint,7,opt,name=no_of_card_vehicle_records,json=noOfCardVehicleRecords,proto3" json:"no_of_card_vehicle_records,omitempty"` // NoOfCardVehicleRecords uint16
	NoOfCardPlaceRecords    uint32 `protobuf:"varint,8,opt,name=no_of_card_place_records,json=noOfCardPlaceRecords,proto3" json:"no_of_card_place_records,omitempty"`       // NoOfCardPlaceRecordsFirstGen byte
}

func (x *DriverCardApplicationIdentificationFirstGen) Reset() {
	*x = DriverCardApplicationIdentificationFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCardApplicationIdentificationFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardApplicationIdentificationFirstGen) ProtoMessage() {}

func (x *DriverCardApplicationIdentificationFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCardApplicationIdentificationFirstGen.ProtoReflect.Descriptor instead.
func (*DriverCardApplicationIdentificationFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{15}
}

func (x *DriverCardApplicationIdentificationFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *DriverCardApplicationIdentificationFirstGen) GetTypeOfTachographCardId() uint32 {
	if x != nil {
		return x.TypeOfTachographCardId
	}
	return 0
}

func (x *DriverCardApplicationIdentificationFirstGen) GetCardStructureVersion() []byte {
	if x != nil {
		return x.CardStructureVersion
	}
	return nil
}

func (x *DriverCardApplicationIdentificationFirstGen) GetNoOfEventsPerType() uint32 {
	if x != nil {
		return x.NoOfEventsPerType
	}
	return 0
}

func (x *DriverCardApplicationIdentificationFirstGen) GetNoOfFaultsPerType() uint32 {
	if x != nil {
		return x.NoOfFaultsPerType
	}
	return 0
}

func (x *DriverCardApplicationIdentificationFirstGen) GetActivityStructureLength() uint32 {
	if x != nil {
		return x.ActivityStructureLength
	}
	return 0
}

func (x *DriverCardApplicationIdentificationFirstGen) GetNoOfCardVehicleRecords() uint32 {
	if x != nil {
		return x.NoOfCardVehicleRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationFirstGen) GetNoOfCardPlaceRecords() uint32 {
	if x != nil {
		return x.NoOfCardPlaceRecords
	}
	return 0
}

type DriverCardApplicationIdentificationSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                     bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	TypeOfTachographCardId       uint32 `protobuf:"varint,2,opt,name=type_of_tachograph_card_id,json=typeOfTachographCardId,proto3" json:"type_of_tachograph_card_id,omitempty"`                    // EquipmentType byte
	CardStructureVersion         []byte `protobuf:"bytes,3,opt,name=card_structure_version,json=cardStructureVersion,proto3" json:"card_structure_version,omitempty"`                               // CardStructureVersion [2]byte
	NoOfEventsPerType            uint32 `protobuf:"varint,4,opt,name=no_of_events_per_type,json=noOfEventsPerType,proto3" json:"no_of_events_per_type,omitempty"`                                   // NoOfEventsPerType byte
	NoOfFaultsPerType            uint32 `protobuf:"varint,5,opt,name=no_of_faults_per_type,json=noOfFaultsPerType,proto3" json:"no_of_faults_per_type,omitempty"`                                   // NoOfFaultsPerType byte
	ActivityStructureLength      uint32 `protobuf:"varint,6,opt,name=activity_structure_length,json=activityStructureLength,proto3" json:"activity_structure_length,omitempty"`                     // CardActivityLengthRange uint16
	NoOfCardVehicleRecords       uint32 `protobuf:"varint,7,opt,name=no_of_card_vehicle_records,json=noOfCardVehicleRecords,proto3" json:"no_of_card_vehicle_records,omitempty"`                    // NoOfCardVehicleRecords uint16
	NoOfCardPlaceRecords         uint32 `protobuf:"varint,8,opt,name=no_of_card_place_records,json=noOfCardPlaceRecords,proto3" json:"no_of_card_place_records,omitempty"`                          // NoOfCardPlaceRecordsSecondGen uint16
	NoOfGnssAdRecords            uint32 `protobuf:"varint,9,opt,name=no_of_gnss_ad_records,json=noOfGnssAdRecords,proto3" json:"no_of_gnss_ad_records,omitempty"`                                   // NoOfGNSSADRecords uint16
	NoOfSpecificConditionRecords uint32 `protobuf:"varint,10,opt,name=no_of_specific_condition_records,json=noOfSpecificConditionRecords,proto3" json:"no_of_specific_condition_records,omitempty"` // NoOfSpecificConditionRecords uint16
	NoOfCardVehicleUnitRecords   uint32 `protobuf:"varint,11,opt,name=no_of_card_vehicle_unit_records,json=noOfCardVehicleUnitRecords,proto3" json:"no_of_card_vehicle_unit_records,omitempty"`     // NoOfCardVehicleUnitRecords uint16
}

func (x *DriverCardApplicationIdentificationSecondGen) Reset() {
	*x = DriverCardApplicationIdentificationSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCardApplicationIdentificationSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardApplicationIdentificationSecondGen) ProtoMessage() {}

func (x *DriverCardApplicationIdentificationSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCardApplicationIdentificationSecondGen.ProtoReflect.Descriptor instead.
func (*DriverCardApplicationIdentificationSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{16}
}

func (x *DriverCardApplicationIdentificationSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *DriverCardApplicationIdentificationSecondGen) GetTypeOfTachographCardId() uint32 {
	if x != nil {
		return x.TypeOfTachographCardId
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetCardStructureVersion() []byte {
	if x != nil {
		return x.CardStructureVersion
	}
	return nil
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfEventsPerType() uint32 {
	if x != nil {
		return x.NoOfEventsPerType
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfFaultsPerType() uint32 {
	if x != nil {
		return x.NoOfFaultsPerType
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetActivityStructureLength() uint32 {
	if x != nil {
		return x.ActivityStructureLength
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfCardVehicleRecords() uint32 {
	if x != nil {
		return x.NoOfCardVehicleRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfCardPlaceRecords() uint32 {
	if x != nil {
		return x.NoOfCardPlaceRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfGnssAdRecords() uint32 {
	if x != nil {
		return x.NoOfGnssAdRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfSpecificConditionRecords() uint32 {
	if x != nil {
		return x.NoOfSpecificConditionRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGen) GetNoOfCardVehicleUnitRecords() uint32 {
	if x != nil {
		return x.NoOfCardVehicleUnitRecords
	}
	return 0
}

type DriverCardApplicationIdentificationSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                   bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	LengthOfFollowingData      uint32 `protobuf:"varint,2,opt,name=length_of_following_data,json=lengthOfFollowingData,proto3" json:"length_of_following_data,omitempty"`                // LengthOfFollowingData uint16
	NoOfBorderCrossingRecords  uint32 `protobuf:"varint,3,opt,name=no_of_border_crossing_records,json=noOfBorderCrossingRecords,proto3" json:"no_of_border_crossing_records,omitempty"`  // NoOfBorderCrossingRecords uint16
	NoOfLoadUnloadRecords      uint32 `protobuf:"varint,4,opt,name=no_of_load_unload_records,json=noOfLoadUnloadRecords,proto3" json:"no_of_load_unload_records,omitempty"`              // NoOfLoadUnloadRecords uint16
	NoOfLoadTypeEntryRecords   uint32 `protobuf:"varint,5,opt,name=no_of_load_type_entry_records,json=noOfLoadTypeEntryRecords,proto3" json:"no_of_load_type_entry_records,omitempty"`   // NoOfLoadTypeEntryRecords uint16
	VuConfigurationLengthRange uint32 `protobuf:"varint,6,opt,name=vu_configuration_length_range,json=vuConfigurationLengthRange,proto3" json:"vu_configuration_length_range,omitempty"` // VuConfigurationLengthRange uint16
}

func (x *DriverCardApplicationIdentificationSecondGenV2) Reset() {
	*x = DriverCardApplicationIdentificationSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCardApplicationIdentificationSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardApplicationIdentificationSecondGenV2) ProtoMessage() {}

func (x *DriverCardApplicationIdentificationSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCardApplicationIdentificationSecondGenV2.ProtoReflect.Descriptor instead.
func (*DriverCardApplicationIdentificationSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{17}
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetLengthOfFollowingData() uint32 {
	if x != nil {
		return x.LengthOfFollowingData
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetNoOfBorderCrossingRecords() uint32 {
	if x != nil {
		return x.NoOfBorderCrossingRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetNoOfLoadUnloadRecords() uint32 {
	if x != nil {
		return x.NoOfLoadUnloadRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetNoOfLoadTypeEntryRecords() uint32 {
	if x != nil {
		return x.NoOfLoadTypeEntryRecords
	}
	return 0
}

func (x *DriverCardApplicationIdentificationSecondGenV2) GetVuConfigurationLengthRange() uint32 {
	if x != nil {
		return x.VuConfigurationLengthRange
	}
	return 0
}

type CardEventDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified              bool                                                  `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CardEventRecordsArray []*CardEventDataFirstGen_CardEventRecordsArrayElement `protobuf:"bytes,2,rep,name=card_event_records_array,json=cardEventRecordsArray,proto3" json:"card_event_records_array,omitempty"` // [6]struct {...}
}

func (x *CardEventDataFirstGen) Reset() {
	*x = CardEventDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEventDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEventDataFirstGen) ProtoMessage() {}

func (x *CardEventDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEventDataFirstGen.ProtoReflect.Descriptor instead.
func (*CardEventDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{18}
}

func (x *CardEventDataFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardEventDataFirstGen) GetCardEventRecordsArray() []*CardEventDataFirstGen_CardEventRecordsArrayElement {
	if x != nil {
		return x.CardEventRecordsArray
	}
	return nil
}

type CardEventRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                uint32                             `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                  // byte
	EventBeginTime           int64                              `protobuf:"varint,2,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"` // TimeReal
	EventEndTime             int64                              `protobuf:"varint,3,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`       // TimeReal
	EventVehicleRegistration *VehicleRegistrationIdentification `protobuf:"bytes,4,opt,name=event_vehicle_registration,json=eventVehicleRegistration,proto3" json:"event_vehicle_registration,omitempty"`
}

func (x *CardEventRecord) Reset() {
	*x = CardEventRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEventRecord) ProtoMessage() {}

func (x *CardEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEventRecord.ProtoReflect.Descriptor instead.
func (*CardEventRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{19}
}

func (x *CardEventRecord) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *CardEventRecord) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *CardEventRecord) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *CardEventRecord) GetEventVehicleRegistration() *VehicleRegistrationIdentification {
	if x != nil {
		return x.EventVehicleRegistration
	}
	return nil
}

type VehicleRegistrationIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleRegistrationNation uint32 `protobuf:"varint,1,opt,name=vehicle_registration_nation,json=vehicleRegistrationNation,proto3" json:"vehicle_registration_nation,omitempty"` // byte
	VehicleRegistrationNumber string `protobuf:"bytes,2,opt,name=vehicle_registration_number,json=vehicleRegistrationNumber,proto3" json:"vehicle_registration_number,omitempty"`  // VehicleRegistrationNumber (codepage + 13 bytes)
}

func (x *VehicleRegistrationIdentification) Reset() {
	*x = VehicleRegistrationIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleRegistrationIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleRegistrationIdentification) ProtoMessage() {}

func (x *VehicleRegistrationIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleRegistrationIdentification.ProtoReflect.Descriptor instead.
func (*VehicleRegistrationIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{20}
}

func (x *VehicleRegistrationIdentification) GetVehicleRegistrationNation() uint32 {
	if x != nil {
		return x.VehicleRegistrationNation
	}
	return 0
}

func (x *VehicleRegistrationIdentification) GetVehicleRegistrationNumber() string {
	if x != nil {
		return x.VehicleRegistrationNumber
	}
	return ""
}

type CardEventDataSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified              bool                                                   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CardEventRecordsArray []*CardEventDataSecondGen_CardEventRecordsArrayElement `protobuf:"bytes,2,rep,name=card_event_records_array,json=cardEventRecordsArray,proto3" json:"card_event_records_array,omitempty"` // [11]struct {...}
}

func (x *CardEventDataSecondGen) Reset() {
	*x = CardEventDataSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEventDataSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEventDataSecondGen) ProtoMessage() {}

func (x *CardEventDataSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEventDataSecondGen.ProtoReflect.Descriptor instead.
func (*CardEventDataSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{21}
}

func (x *CardEventDataSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardEventDataSecondGen) GetCardEventRecordsArray() []*CardEventDataSecondGen_CardEventRecordsArrayElement {
	if x != nil {
		return x.CardEventRecordsArray
	}
	return nil
}

type CardFaultDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified              bool                                                  `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CardFaultRecordsArray []*CardFaultDataFirstGen_CardFaultRecordsArrayElement `protobuf:"bytes,2,rep,name=card_fault_records_array,json=cardFaultRecordsArray,proto3" json:"card_fault_records_array,omitempty"` // [2]struct{...}
}

func (x *CardFaultDataFirstGen) Reset() {
	*x = CardFaultDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardFaultDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardFaultDataFirstGen) ProtoMessage() {}

func (x *CardFaultDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardFaultDataFirstGen.ProtoReflect.Descriptor instead.
func (*CardFaultDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{22}
}

func (x *CardFaultDataFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardFaultDataFirstGen) GetCardFaultRecordsArray() []*CardFaultDataFirstGen_CardFaultRecordsArrayElement {
	if x != nil {
		return x.CardFaultRecordsArray
	}
	return nil
}

type CardFaultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultType                uint32                             `protobuf:"varint,1,opt,name=fault_type,json=faultType,proto3" json:"fault_type,omitempty"`                  // EventFaultType byte
	FaultBeginTime           int64                              `protobuf:"varint,2,opt,name=fault_begin_time,json=faultBeginTime,proto3" json:"fault_begin_time,omitempty"` // TimeReal
	FaultEndTime             int64                              `protobuf:"varint,3,opt,name=fault_end_time,json=faultEndTime,proto3" json:"fault_end_time,omitempty"`       // TimeReal
	FaultVehicleRegistration *VehicleRegistrationIdentification `protobuf:"bytes,4,opt,name=fault_vehicle_registration,json=faultVehicleRegistration,proto3" json:"fault_vehicle_registration,omitempty"`
}

func (x *CardFaultRecord) Reset() {
	*x = CardFaultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardFaultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardFaultRecord) ProtoMessage() {}

func (x *CardFaultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardFaultRecord.ProtoReflect.Descriptor instead.
func (*CardFaultRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{23}
}

func (x *CardFaultRecord) GetFaultType() uint32 {
	if x != nil {
		return x.FaultType
	}
	return 0
}

func (x *CardFaultRecord) GetFaultBeginTime() int64 {
	if x != nil {
		return x.FaultBeginTime
	}
	return 0
}

func (x *CardFaultRecord) GetFaultEndTime() int64 {
	if x != nil {
		return x.FaultEndTime
	}
	return 0
}

func (x *CardFaultRecord) GetFaultVehicleRegistration() *VehicleRegistrationIdentification {
	if x != nil {
		return x.FaultVehicleRegistration
	}
	return nil
}

type CardFaultDataSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified              bool                                                   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CardFaultRecordsArray []*CardFaultDataSecondGen_CardFaultRecordsArrayElement `protobuf:"bytes,2,rep,name=card_fault_records_array,json=cardFaultRecordsArray,proto3" json:"card_fault_records_array,omitempty"` // [2]struct{...}
}

func (x *CardFaultDataSecondGen) Reset() {
	*x = CardFaultDataSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardFaultDataSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardFaultDataSecondGen) ProtoMessage() {}

func (x *CardFaultDataSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardFaultDataSecondGen.ProtoReflect.Descriptor instead.
func (*CardFaultDataSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{24}
}

func (x *CardFaultDataSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardFaultDataSecondGen) GetCardFaultRecordsArray() []*CardFaultDataSecondGen_CardFaultRecordsArrayElement {
	if x != nil {
		return x.CardFaultRecordsArray
	}
	return nil
}

type CardDriverActivityFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                       bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ActivityPointerOldestDayRecord uint32                     `protobuf:"varint,2,opt,name=activity_pointer_oldest_day_record,json=activityPointerOldestDayRecord,proto3" json:"activity_pointer_oldest_day_record,omitempty"` // CardActivityLengthRange uint16
	ActivityPointerNewestRecord    uint32                     `protobuf:"varint,3,opt,name=activity_pointer_newest_record,json=activityPointerNewestRecord,proto3" json:"activity_pointer_newest_record,omitempty"`            // CardActivityLengthRange uint16
	DecodedActivityDailyRecords    []*CardActivityDailyRecord `protobuf:"bytes,4,rep,name=decoded_activity_daily_records,json=decodedActivityDailyRecords,proto3" json:"decoded_activity_daily_records,omitempty"`             // decoded! activity_daily_records is []byte
}

func (x *CardDriverActivityFirstGen) Reset() {
	*x = CardDriverActivityFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDriverActivityFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDriverActivityFirstGen) ProtoMessage() {}

func (x *CardDriverActivityFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDriverActivityFirstGen.ProtoReflect.Descriptor instead.
func (*CardDriverActivityFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{25}
}

func (x *CardDriverActivityFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardDriverActivityFirstGen) GetActivityPointerOldestDayRecord() uint32 {
	if x != nil {
		return x.ActivityPointerOldestDayRecord
	}
	return 0
}

func (x *CardDriverActivityFirstGen) GetActivityPointerNewestRecord() uint32 {
	if x != nil {
		return x.ActivityPointerNewestRecord
	}
	return 0
}

func (x *CardDriverActivityFirstGen) GetDecodedActivityDailyRecords() []*CardActivityDailyRecord {
	if x != nil {
		return x.DecodedActivityDailyRecords
	}
	return nil
}

type CardActivityDailyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityPreviousRecordLength uint32                `protobuf:"varint,1,opt,name=activity_previous_record_length,json=activityPreviousRecordLength,proto3" json:"activity_previous_record_length,omitempty"` // CardActivityLengthRange uint16
	ActivityRecordLength         uint32                `protobuf:"varint,2,opt,name=activity_record_length,json=activityRecordLength,proto3" json:"activity_record_length,omitempty"`                           // CardActivityLengthRange uint16
	ActivityRecordDate           int64                 `protobuf:"varint,3,opt,name=activity_record_date,json=activityRecordDate,proto3" json:"activity_record_date,omitempty"`                                 // TimeReal
	ActivityDailyPresenceCounter uint32                `protobuf:"varint,4,opt,name=activity_daily_presence_counter,json=activityDailyPresenceCounter,proto3" json:"activity_daily_presence_counter,omitempty"` // DailyPresenceCounter BCDString
	ActivityDayDistance          uint32                `protobuf:"varint,5,opt,name=activity_day_distance,json=activityDayDistance,proto3" json:"activity_day_distance,omitempty"`                              // Distance uint16
	ActivityChangeInfo           []*ActivityChangeInfo `protobuf:"bytes,6,rep,name=activity_change_info,json=activityChangeInfo,proto3" json:"activity_change_info,omitempty"`
}

func (x *CardActivityDailyRecord) Reset() {
	*x = CardActivityDailyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardActivityDailyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardActivityDailyRecord) ProtoMessage() {}

func (x *CardActivityDailyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardActivityDailyRecord.ProtoReflect.Descriptor instead.
func (*CardActivityDailyRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{26}
}

func (x *CardActivityDailyRecord) GetActivityPreviousRecordLength() uint32 {
	if x != nil {
		return x.ActivityPreviousRecordLength
	}
	return 0
}

func (x *CardActivityDailyRecord) GetActivityRecordLength() uint32 {
	if x != nil {
		return x.ActivityRecordLength
	}
	return 0
}

func (x *CardActivityDailyRecord) GetActivityRecordDate() int64 {
	if x != nil {
		return x.ActivityRecordDate
	}
	return 0
}

func (x *CardActivityDailyRecord) GetActivityDailyPresenceCounter() uint32 {
	if x != nil {
		return x.ActivityDailyPresenceCounter
	}
	return 0
}

func (x *CardActivityDailyRecord) GetActivityDayDistance() uint32 {
	if x != nil {
		return x.ActivityDayDistance
	}
	return 0
}

func (x *CardActivityDailyRecord) GetActivityChangeInfo() []*ActivityChangeInfo {
	if x != nil {
		return x.ActivityChangeInfo
	}
	return nil
}

type ActivityChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver      bool   `protobuf:"varint,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Team        bool   `protobuf:"varint,2,opt,name=team,proto3" json:"team,omitempty"`
	CardPresent bool   `protobuf:"varint,3,opt,name=card_present,json=cardPresent,proto3" json:"card_present,omitempty"`
	WorkType    uint32 `protobuf:"varint,4,opt,name=work_type,json=workType,proto3" json:"work_type,omitempty"` // byte
	Minutes     uint32 `protobuf:"varint,5,opt,name=minutes,proto3" json:"minutes,omitempty"`
}

func (x *ActivityChangeInfo) Reset() {
	*x = ActivityChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityChangeInfo) ProtoMessage() {}

func (x *ActivityChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityChangeInfo.ProtoReflect.Descriptor instead.
func (*ActivityChangeInfo) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{27}
}

func (x *ActivityChangeInfo) GetDriver() bool {
	if x != nil {
		return x.Driver
	}
	return false
}

func (x *ActivityChangeInfo) GetTeam() bool {
	if x != nil {
		return x.Team
	}
	return false
}

func (x *ActivityChangeInfo) GetCardPresent() bool {
	if x != nil {
		return x.CardPresent
	}
	return false
}

func (x *ActivityChangeInfo) GetWorkType() uint32 {
	if x != nil {
		return x.WorkType
	}
	return 0
}

func (x *ActivityChangeInfo) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type CardDriverActivitySecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                       bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ActivityPointerOldestDayRecord uint32                     `protobuf:"varint,2,opt,name=activity_pointer_oldest_day_record,json=activityPointerOldestDayRecord,proto3" json:"activity_pointer_oldest_day_record,omitempty"` // CardActivityLengthRange uint16
	ActivityPointerNewestRecord    uint32                     `protobuf:"varint,3,opt,name=activity_pointer_newest_record,json=activityPointerNewestRecord,proto3" json:"activity_pointer_newest_record,omitempty"`            // CardActivityLengthRange uint16
	DecodedActivityDailyRecords    []*CardActivityDailyRecord `protobuf:"bytes,4,rep,name=decoded_activity_daily_records,json=decodedActivityDailyRecords,proto3" json:"decoded_activity_daily_records,omitempty"`             // decoded! activity_daily_records is []byte
}

func (x *CardDriverActivitySecondGen) Reset() {
	*x = CardDriverActivitySecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDriverActivitySecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDriverActivitySecondGen) ProtoMessage() {}

func (x *CardDriverActivitySecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDriverActivitySecondGen.ProtoReflect.Descriptor instead.
func (*CardDriverActivitySecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{28}
}

func (x *CardDriverActivitySecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardDriverActivitySecondGen) GetActivityPointerOldestDayRecord() uint32 {
	if x != nil {
		return x.ActivityPointerOldestDayRecord
	}
	return 0
}

func (x *CardDriverActivitySecondGen) GetActivityPointerNewestRecord() uint32 {
	if x != nil {
		return x.ActivityPointerNewestRecord
	}
	return 0
}

func (x *CardDriverActivitySecondGen) GetDecodedActivityDailyRecords() []*CardActivityDailyRecord {
	if x != nil {
		return x.DecodedActivityDailyRecords
	}
	return nil
}

type CardVehiclesUsedFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                   bool                         `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VehiclePointerNewestRecord uint32                       `protobuf:"varint,2,opt,name=vehicle_pointer_newest_record,json=vehiclePointerNewestRecord,proto3" json:"vehicle_pointer_newest_record,omitempty"` // NoOfCardVehicleRecords uint16
	CardVehicleRecords         []*CardVehicleRecordFirstGen `protobuf:"bytes,3,rep,name=card_vehicle_records,json=cardVehicleRecords,proto3" json:"card_vehicle_records,omitempty"`
}

func (x *CardVehiclesUsedFirstGen) Reset() {
	*x = CardVehiclesUsedFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehiclesUsedFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehiclesUsedFirstGen) ProtoMessage() {}

func (x *CardVehiclesUsedFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehiclesUsedFirstGen.ProtoReflect.Descriptor instead.
func (*CardVehiclesUsedFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{29}
}

func (x *CardVehiclesUsedFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardVehiclesUsedFirstGen) GetVehiclePointerNewestRecord() uint32 {
	if x != nil {
		return x.VehiclePointerNewestRecord
	}
	return 0
}

func (x *CardVehiclesUsedFirstGen) GetCardVehicleRecords() []*CardVehicleRecordFirstGen {
	if x != nil {
		return x.CardVehicleRecords
	}
	return nil
}

type CardVehicleRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleOdometerBegin uint32                             `protobuf:"varint,1,opt,name=vehicle_odometer_begin,json=vehicleOdometerBegin,proto3" json:"vehicle_odometer_begin,omitempty"` // OdometerShort [3]byte -> decoded uint32
	VehicleOdometerEnd   uint32                             `protobuf:"varint,2,opt,name=vehicle_odometer_end,json=vehicleOdometerEnd,proto3" json:"vehicle_odometer_end,omitempty"`       // OdometerShort [3]byte -> decoded uint32
	VehicleFirstUse      int64                              `protobuf:"varint,3,opt,name=vehicle_first_use,json=vehicleFirstUse,proto3" json:"vehicle_first_use,omitempty"`                // TimeReal
	VehicleLastUse       int64                              `protobuf:"varint,4,opt,name=vehicle_last_use,json=vehicleLastUse,proto3" json:"vehicle_last_use,omitempty"`                   // TimeReal
	VehicleRegistration  *VehicleRegistrationIdentification `protobuf:"bytes,5,opt,name=vehicle_registration,json=vehicleRegistration,proto3" json:"vehicle_registration,omitempty"`
	VuDataBlockCounter   uint32                             `protobuf:"varint,6,opt,name=vu_data_block_counter,json=vuDataBlockCounter,proto3" json:"vu_data_block_counter,omitempty"` // VuDataBlockCounter BCDString
}

func (x *CardVehicleRecordFirstGen) Reset() {
	*x = CardVehicleRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehicleRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehicleRecordFirstGen) ProtoMessage() {}

func (x *CardVehicleRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehicleRecordFirstGen.ProtoReflect.Descriptor instead.
func (*CardVehicleRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{30}
}

func (x *CardVehicleRecordFirstGen) GetVehicleOdometerBegin() uint32 {
	if x != nil {
		return x.VehicleOdometerBegin
	}
	return 0
}

func (x *CardVehicleRecordFirstGen) GetVehicleOdometerEnd() uint32 {
	if x != nil {
		return x.VehicleOdometerEnd
	}
	return 0
}

func (x *CardVehicleRecordFirstGen) GetVehicleFirstUse() int64 {
	if x != nil {
		return x.VehicleFirstUse
	}
	return 0
}

func (x *CardVehicleRecordFirstGen) GetVehicleLastUse() int64 {
	if x != nil {
		return x.VehicleLastUse
	}
	return 0
}

func (x *CardVehicleRecordFirstGen) GetVehicleRegistration() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistration
	}
	return nil
}

func (x *CardVehicleRecordFirstGen) GetVuDataBlockCounter() uint32 {
	if x != nil {
		return x.VuDataBlockCounter
	}
	return 0
}

type CardVehiclesUsedSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                   bool                          `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VehiclePointerNewestRecord uint32                        `protobuf:"varint,2,opt,name=vehicle_pointer_newest_record,json=vehiclePointerNewestRecord,proto3" json:"vehicle_pointer_newest_record,omitempty"` // NoOfCardVehicleRecords uint16
	CardVehicleRecords         []*CardVehicleRecordSecondGen `protobuf:"bytes,3,rep,name=card_vehicle_records,json=cardVehicleRecords,proto3" json:"card_vehicle_records,omitempty"`
}

func (x *CardVehiclesUsedSecondGen) Reset() {
	*x = CardVehiclesUsedSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehiclesUsedSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehiclesUsedSecondGen) ProtoMessage() {}

func (x *CardVehiclesUsedSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehiclesUsedSecondGen.ProtoReflect.Descriptor instead.
func (*CardVehiclesUsedSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{31}
}

func (x *CardVehiclesUsedSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardVehiclesUsedSecondGen) GetVehiclePointerNewestRecord() uint32 {
	if x != nil {
		return x.VehiclePointerNewestRecord
	}
	return 0
}

func (x *CardVehiclesUsedSecondGen) GetCardVehicleRecords() []*CardVehicleRecordSecondGen {
	if x != nil {
		return x.CardVehicleRecords
	}
	return nil
}

type CardVehicleRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleOdometerBegin        uint32                             `protobuf:"varint,1,opt,name=vehicle_odometer_begin,json=vehicleOdometerBegin,proto3" json:"vehicle_odometer_begin,omitempty"` // OdometerShort [3]byte -> decoded uint32
	VehicleOdometerEnd          uint32                             `protobuf:"varint,2,opt,name=vehicle_odometer_end,json=vehicleOdometerEnd,proto3" json:"vehicle_odometer_end,omitempty"`       // OdometerShort [3]byte -> decoded uint32
	VehicleFirstUse             int64                              `protobuf:"varint,3,opt,name=vehicle_first_use,json=vehicleFirstUse,proto3" json:"vehicle_first_use,omitempty"`                // TimeReal
	VehicleLastUse              int64                              `protobuf:"varint,4,opt,name=vehicle_last_use,json=vehicleLastUse,proto3" json:"vehicle_last_use,omitempty"`                   // TimeReal
	VehicleRegistration         *VehicleRegistrationIdentification `protobuf:"bytes,5,opt,name=vehicle_registration,json=vehicleRegistration,proto3" json:"vehicle_registration,omitempty"`
	VuDataBlockCounter          uint32                             `protobuf:"varint,6,opt,name=vu_data_block_counter,json=vuDataBlockCounter,proto3" json:"vu_data_block_counter,omitempty"`                         // VuDataBlockCounter BCDString
	VehicleIdentificationNumber string                             `protobuf:"bytes,7,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber,proto3" json:"vehicle_identification_number,omitempty"` // VehicleIdentificationNumber decoded: string
}

func (x *CardVehicleRecordSecondGen) Reset() {
	*x = CardVehicleRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehicleRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehicleRecordSecondGen) ProtoMessage() {}

func (x *CardVehicleRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehicleRecordSecondGen.ProtoReflect.Descriptor instead.
func (*CardVehicleRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{32}
}

func (x *CardVehicleRecordSecondGen) GetVehicleOdometerBegin() uint32 {
	if x != nil {
		return x.VehicleOdometerBegin
	}
	return 0
}

func (x *CardVehicleRecordSecondGen) GetVehicleOdometerEnd() uint32 {
	if x != nil {
		return x.VehicleOdometerEnd
	}
	return 0
}

func (x *CardVehicleRecordSecondGen) GetVehicleFirstUse() int64 {
	if x != nil {
		return x.VehicleFirstUse
	}
	return 0
}

func (x *CardVehicleRecordSecondGen) GetVehicleLastUse() int64 {
	if x != nil {
		return x.VehicleLastUse
	}
	return 0
}

func (x *CardVehicleRecordSecondGen) GetVehicleRegistration() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistration
	}
	return nil
}

func (x *CardVehicleRecordSecondGen) GetVuDataBlockCounter() uint32 {
	if x != nil {
		return x.VuDataBlockCounter
	}
	return 0
}

func (x *CardVehicleRecordSecondGen) GetVehicleIdentificationNumber() string {
	if x != nil {
		return x.VehicleIdentificationNumber
	}
	return ""
}

type CardPlaceDailyWorkPeriodFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool                   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	PlacePointerNewestRecord uint32                 `protobuf:"varint,2,opt,name=place_pointer_newest_record,json=placePointerNewestRecord,proto3" json:"place_pointer_newest_record,omitempty"` // NoOfCardPlaceRecordsFirstGen byte
	PlaceRecords             []*PlaceRecordFirstGen `protobuf:"bytes,3,rep,name=place_records,json=placeRecords,proto3" json:"place_records,omitempty"`
}

func (x *CardPlaceDailyWorkPeriodFirstGen) Reset() {
	*x = CardPlaceDailyWorkPeriodFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPlaceDailyWorkPeriodFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPlaceDailyWorkPeriodFirstGen) ProtoMessage() {}

func (x *CardPlaceDailyWorkPeriodFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPlaceDailyWorkPeriodFirstGen.ProtoReflect.Descriptor instead.
func (*CardPlaceDailyWorkPeriodFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{33}
}

func (x *CardPlaceDailyWorkPeriodFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardPlaceDailyWorkPeriodFirstGen) GetPlacePointerNewestRecord() uint32 {
	if x != nil {
		return x.PlacePointerNewestRecord
	}
	return 0
}

func (x *CardPlaceDailyWorkPeriodFirstGen) GetPlaceRecords() []*PlaceRecordFirstGen {
	if x != nil {
		return x.PlaceRecords
	}
	return nil
}

type PlaceRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTime                int64  `protobuf:"varint,1,opt,name=entry_time,json=entryTime,proto3" json:"entry_time,omitempty"`                                                    // TimeReal
	EntryTypeDailyWorkPeriod uint32 `protobuf:"varint,2,opt,name=entry_type_daily_work_period,json=entryTypeDailyWorkPeriod,proto3" json:"entry_type_daily_work_period,omitempty"` // EntryTypeDailyWorkPeriodFirstGen byte
	DailyWorkPeriodCountry   uint32 `protobuf:"varint,3,opt,name=daily_work_period_country,json=dailyWorkPeriodCountry,proto3" json:"daily_work_period_country,omitempty"`         // NationNumeric byte
	DailyWorkPeriodRegion    uint32 `protobuf:"varint,4,opt,name=daily_work_period_region,json=dailyWorkPeriodRegion,proto3" json:"daily_work_period_region,omitempty"`            // NationNumeric byte
	VehicleOdometerValue     uint32 `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"`                 // OdometerShort [3]byte -> decoded uint32
}

func (x *PlaceRecordFirstGen) Reset() {
	*x = PlaceRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceRecordFirstGen) ProtoMessage() {}

func (x *PlaceRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceRecordFirstGen.ProtoReflect.Descriptor instead.
func (*PlaceRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{34}
}

func (x *PlaceRecordFirstGen) GetEntryTime() int64 {
	if x != nil {
		return x.EntryTime
	}
	return 0
}

func (x *PlaceRecordFirstGen) GetEntryTypeDailyWorkPeriod() uint32 {
	if x != nil {
		return x.EntryTypeDailyWorkPeriod
	}
	return 0
}

func (x *PlaceRecordFirstGen) GetDailyWorkPeriodCountry() uint32 {
	if x != nil {
		return x.DailyWorkPeriodCountry
	}
	return 0
}

func (x *PlaceRecordFirstGen) GetDailyWorkPeriodRegion() uint32 {
	if x != nil {
		return x.DailyWorkPeriodRegion
	}
	return 0
}

func (x *PlaceRecordFirstGen) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type CardPlaceDailyWorkPeriodSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool                    `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	PlacePointerNewestRecord uint32                  `protobuf:"varint,2,opt,name=place_pointer_newest_record,json=placePointerNewestRecord,proto3" json:"place_pointer_newest_record,omitempty"` // NoOfCardPlaceRecordsSecondGen uint16
	PlaceRecords             []*PlaceRecordSecondGen `protobuf:"bytes,3,rep,name=place_records,json=placeRecords,proto3" json:"place_records,omitempty"`
}

func (x *CardPlaceDailyWorkPeriodSecondGen) Reset() {
	*x = CardPlaceDailyWorkPeriodSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPlaceDailyWorkPeriodSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPlaceDailyWorkPeriodSecondGen) ProtoMessage() {}

func (x *CardPlaceDailyWorkPeriodSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPlaceDailyWorkPeriodSecondGen.ProtoReflect.Descriptor instead.
func (*CardPlaceDailyWorkPeriodSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{35}
}

func (x *CardPlaceDailyWorkPeriodSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardPlaceDailyWorkPeriodSecondGen) GetPlacePointerNewestRecord() uint32 {
	if x != nil {
		return x.PlacePointerNewestRecord
	}
	return 0
}

func (x *CardPlaceDailyWorkPeriodSecondGen) GetPlaceRecords() []*PlaceRecordSecondGen {
	if x != nil {
		return x.PlaceRecords
	}
	return nil
}

type PlaceRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTime                int64            `protobuf:"varint,1,opt,name=entry_time,json=entryTime,proto3" json:"entry_time,omitempty"`                                                    // TimeReal
	EntryTypeDailyWorkPeriod uint32           `protobuf:"varint,2,opt,name=entry_type_daily_work_period,json=entryTypeDailyWorkPeriod,proto3" json:"entry_type_daily_work_period,omitempty"` // EntryTypeDailyWorkPeriodFirstGen byte
	DailyWorkPeriodCountry   uint32           `protobuf:"varint,3,opt,name=daily_work_period_country,json=dailyWorkPeriodCountry,proto3" json:"daily_work_period_country,omitempty"`         // NationNumeric byte
	DailyWorkPeriodRegion    uint32           `protobuf:"varint,4,opt,name=daily_work_period_region,json=dailyWorkPeriodRegion,proto3" json:"daily_work_period_region,omitempty"`            // NationNumeric byte
	VehicleOdometerValue     uint32           `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"`                 // OdometerShort [3]byte -> decoded uint32
	EntryGnssPlaceRecord     *GNSSPlaceRecord `protobuf:"bytes,6,opt,name=entry_gnss_place_record,json=entryGnssPlaceRecord,proto3" json:"entry_gnss_place_record,omitempty"`
}

func (x *PlaceRecordSecondGen) Reset() {
	*x = PlaceRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceRecordSecondGen) ProtoMessage() {}

func (x *PlaceRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceRecordSecondGen.ProtoReflect.Descriptor instead.
func (*PlaceRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{36}
}

func (x *PlaceRecordSecondGen) GetEntryTime() int64 {
	if x != nil {
		return x.EntryTime
	}
	return 0
}

func (x *PlaceRecordSecondGen) GetEntryTypeDailyWorkPeriod() uint32 {
	if x != nil {
		return x.EntryTypeDailyWorkPeriod
	}
	return 0
}

func (x *PlaceRecordSecondGen) GetDailyWorkPeriodCountry() uint32 {
	if x != nil {
		return x.DailyWorkPeriodCountry
	}
	return 0
}

func (x *PlaceRecordSecondGen) GetDailyWorkPeriodRegion() uint32 {
	if x != nil {
		return x.DailyWorkPeriodRegion
	}
	return 0
}

func (x *PlaceRecordSecondGen) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

func (x *PlaceRecordSecondGen) GetEntryGnssPlaceRecord() *GNSSPlaceRecord {
	if x != nil {
		return x.EntryGnssPlaceRecord
	}
	return nil
}

type CardPlaceAuthDailyWorkPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                     bool                     `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	PlaceAuthPointerNewestRecord uint32                   `protobuf:"varint,2,opt,name=place_auth_pointer_newest_record,json=placeAuthPointerNewestRecord,proto3" json:"place_auth_pointer_newest_record,omitempty"` // NoOfCardPlaceRecordsSecondGen uint16
	PlaceAuthStatusRecords       []*PlaceAuthStatusRecord `protobuf:"bytes,3,rep,name=place_auth_status_records,json=placeAuthStatusRecords,proto3" json:"place_auth_status_records,omitempty"`
}

func (x *CardPlaceAuthDailyWorkPeriod) Reset() {
	*x = CardPlaceAuthDailyWorkPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPlaceAuthDailyWorkPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPlaceAuthDailyWorkPeriod) ProtoMessage() {}

func (x *CardPlaceAuthDailyWorkPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPlaceAuthDailyWorkPeriod.ProtoReflect.Descriptor instead.
func (*CardPlaceAuthDailyWorkPeriod) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{37}
}

func (x *CardPlaceAuthDailyWorkPeriod) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardPlaceAuthDailyWorkPeriod) GetPlaceAuthPointerNewestRecord() uint32 {
	if x != nil {
		return x.PlaceAuthPointerNewestRecord
	}
	return 0
}

func (x *CardPlaceAuthDailyWorkPeriod) GetPlaceAuthStatusRecords() []*PlaceAuthStatusRecord {
	if x != nil {
		return x.PlaceAuthStatusRecords
	}
	return nil
}

type PlaceAuthStatusRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTime            int64  `protobuf:"varint,1,opt,name=entry_time,json=entryTime,proto3" json:"entry_time,omitempty"`                                  // TimeReal
	AuthenticationStatus uint32 `protobuf:"varint,2,opt,name=authentication_status,json=authenticationStatus,proto3" json:"authentication_status,omitempty"` // PositionAuthenticationStatus byte
}

func (x *PlaceAuthStatusRecord) Reset() {
	*x = PlaceAuthStatusRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceAuthStatusRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceAuthStatusRecord) ProtoMessage() {}

func (x *PlaceAuthStatusRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceAuthStatusRecord.ProtoReflect.Descriptor instead.
func (*PlaceAuthStatusRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{38}
}

func (x *PlaceAuthStatusRecord) GetEntryTime() int64 {
	if x != nil {
		return x.EntryTime
	}
	return 0
}

func (x *PlaceAuthStatusRecord) GetAuthenticationStatus() uint32 {
	if x != nil {
		return x.AuthenticationStatus
	}
	return 0
}

type PlaceAuthRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTime                int64                `protobuf:"varint,1,opt,name=entry_time,json=entryTime,proto3" json:"entry_time,omitempty"`                                                    // TimeReal
	EntryTypeDailyWorkPeriod uint32               `protobuf:"varint,2,opt,name=entry_type_daily_work_period,json=entryTypeDailyWorkPeriod,proto3" json:"entry_type_daily_work_period,omitempty"` // EntryTypeDailyWorkPeriodFirstGen byte
	DailyWorkPeriodCountry   uint32               `protobuf:"varint,3,opt,name=daily_work_period_country,json=dailyWorkPeriodCountry,proto3" json:"daily_work_period_country,omitempty"`         // NationNumeric byte
	DailyWorkPeriodRegion    uint32               `protobuf:"varint,4,opt,name=daily_work_period_region,json=dailyWorkPeriodRegion,proto3" json:"daily_work_period_region,omitempty"`            // NationNumeric byte
	VehicleOdometerValue     uint32               `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"`                 // OdometerShort [3]byte -> decoded uint32
	EntryGnssPlaceRecord     *GNSSPlaceAuthRecord `protobuf:"bytes,6,opt,name=entry_gnss_place_record,json=entryGnssPlaceRecord,proto3" json:"entry_gnss_place_record,omitempty"`
}

func (x *PlaceAuthRecord) Reset() {
	*x = PlaceAuthRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceAuthRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceAuthRecord) ProtoMessage() {}

func (x *PlaceAuthRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceAuthRecord.ProtoReflect.Descriptor instead.
func (*PlaceAuthRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{39}
}

func (x *PlaceAuthRecord) GetEntryTime() int64 {
	if x != nil {
		return x.EntryTime
	}
	return 0
}

func (x *PlaceAuthRecord) GetEntryTypeDailyWorkPeriod() uint32 {
	if x != nil {
		return x.EntryTypeDailyWorkPeriod
	}
	return 0
}

func (x *PlaceAuthRecord) GetDailyWorkPeriodCountry() uint32 {
	if x != nil {
		return x.DailyWorkPeriodCountry
	}
	return 0
}

func (x *PlaceAuthRecord) GetDailyWorkPeriodRegion() uint32 {
	if x != nil {
		return x.DailyWorkPeriodRegion
	}
	return 0
}

func (x *PlaceAuthRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

func (x *PlaceAuthRecord) GetEntryGnssPlaceRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.EntryGnssPlaceRecord
	}
	return nil
}

type GNSSPlaceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp      int64           `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`          // TimeReal
	GnssAccuracy   uint32          `protobuf:"varint,2,opt,name=gnss_accuracy,json=gnssAccuracy,proto3" json:"gnss_accuracy,omitempty"` // GNSSAccuracy byte
	GeoCoordinates *GeoCoordinates `protobuf:"bytes,3,opt,name=geo_coordinates,json=geoCoordinates,proto3" json:"geo_coordinates,omitempty"`
}

func (x *GNSSPlaceRecord) Reset() {
	*x = GNSSPlaceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSPlaceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSPlaceRecord) ProtoMessage() {}

func (x *GNSSPlaceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSPlaceRecord.ProtoReflect.Descriptor instead.
func (*GNSSPlaceRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{40}
}

func (x *GNSSPlaceRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GNSSPlaceRecord) GetGnssAccuracy() uint32 {
	if x != nil {
		return x.GnssAccuracy
	}
	return 0
}

func (x *GNSSPlaceRecord) GetGeoCoordinates() *GeoCoordinates {
	if x != nil {
		return x.GeoCoordinates
	}
	return nil
}

type GNSSPlaceAuthRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp            int64           `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`          // TimeReal
	GnssAccuracy         uint32          `protobuf:"varint,2,opt,name=gnss_accuracy,json=gnssAccuracy,proto3" json:"gnss_accuracy,omitempty"` // GNSSAccuracy byte
	GeoCoordinates       *GeoCoordinates `protobuf:"bytes,3,opt,name=geo_coordinates,json=geoCoordinates,proto3" json:"geo_coordinates,omitempty"`
	AuthenticationStatus uint32          `protobuf:"varint,4,opt,name=authentication_status,json=authenticationStatus,proto3" json:"authentication_status,omitempty"` // PositionAuthenticationStatus byte
}

func (x *GNSSPlaceAuthRecord) Reset() {
	*x = GNSSPlaceAuthRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSPlaceAuthRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSPlaceAuthRecord) ProtoMessage() {}

func (x *GNSSPlaceAuthRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSPlaceAuthRecord.ProtoReflect.Descriptor instead.
func (*GNSSPlaceAuthRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{41}
}

func (x *GNSSPlaceAuthRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GNSSPlaceAuthRecord) GetGnssAccuracy() uint32 {
	if x != nil {
		return x.GnssAccuracy
	}
	return 0
}

func (x *GNSSPlaceAuthRecord) GetGeoCoordinates() *GeoCoordinates {
	if x != nil {
		return x.GeoCoordinates
	}
	return nil
}

func (x *GNSSPlaceAuthRecord) GetAuthenticationStatus() uint32 {
	if x != nil {
		return x.AuthenticationStatus
	}
	return 0
}

type GeoCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GeoCoordinates) Reset() {
	*x = GeoCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoCoordinates) ProtoMessage() {}

func (x *GeoCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoCoordinates.ProtoReflect.Descriptor instead.
func (*GeoCoordinates) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{42}
}

func (x *GeoCoordinates) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoCoordinates) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type CardCurrentUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified           bool                               `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	SessionOpenTime    int64                              `protobuf:"varint,2,opt,name=session_open_time,json=sessionOpenTime,proto3" json:"session_open_time,omitempty"` // TimeReal
	SessionOpenVehicle *VehicleRegistrationIdentification `protobuf:"bytes,3,opt,name=session_open_vehicle,json=sessionOpenVehicle,proto3" json:"session_open_vehicle,omitempty"`
}

func (x *CardCurrentUse) Reset() {
	*x = CardCurrentUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardCurrentUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardCurrentUse) ProtoMessage() {}

func (x *CardCurrentUse) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardCurrentUse.ProtoReflect.Descriptor instead.
func (*CardCurrentUse) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{43}
}

func (x *CardCurrentUse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardCurrentUse) GetSessionOpenTime() int64 {
	if x != nil {
		return x.SessionOpenTime
	}
	return 0
}

func (x *CardCurrentUse) GetSessionOpenVehicle() *VehicleRegistrationIdentification {
	if x != nil {
		return x.SessionOpenVehicle
	}
	return nil
}

type CardControlActivityDataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                   bool                               `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ControlType                uint32                             `protobuf:"varint,2,opt,name=control_type,json=controlType,proto3" json:"control_type,omitempty"` // ControlType byte
	ControlTime                int64                              `protobuf:"varint,3,opt,name=control_time,json=controlTime,proto3" json:"control_time,omitempty"` // TimeReal
	ControlCardNumber          *FullCardNumber                    `protobuf:"bytes,4,opt,name=control_card_number,json=controlCardNumber,proto3" json:"control_card_number,omitempty"`
	ControlVehicleRegistration *VehicleRegistrationIdentification `protobuf:"bytes,5,opt,name=control_vehicle_registration,json=controlVehicleRegistration,proto3" json:"control_vehicle_registration,omitempty"`
	ControlDownloadPeriodBegin int64                              `protobuf:"varint,6,opt,name=control_download_period_begin,json=controlDownloadPeriodBegin,proto3" json:"control_download_period_begin,omitempty"` // TimeReal
	ControlDownloadPeriodEnd   int64                              `protobuf:"varint,7,opt,name=control_download_period_end,json=controlDownloadPeriodEnd,proto3" json:"control_download_period_end,omitempty"`       // TimeReal
}

func (x *CardControlActivityDataRecord) Reset() {
	*x = CardControlActivityDataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardControlActivityDataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardControlActivityDataRecord) ProtoMessage() {}

func (x *CardControlActivityDataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardControlActivityDataRecord.ProtoReflect.Descriptor instead.
func (*CardControlActivityDataRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{44}
}

func (x *CardControlActivityDataRecord) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardControlActivityDataRecord) GetControlType() uint32 {
	if x != nil {
		return x.ControlType
	}
	return 0
}

func (x *CardControlActivityDataRecord) GetControlTime() int64 {
	if x != nil {
		return x.ControlTime
	}
	return 0
}

func (x *CardControlActivityDataRecord) GetControlCardNumber() *FullCardNumber {
	if x != nil {
		return x.ControlCardNumber
	}
	return nil
}

func (x *CardControlActivityDataRecord) GetControlVehicleRegistration() *VehicleRegistrationIdentification {
	if x != nil {
		return x.ControlVehicleRegistration
	}
	return nil
}

func (x *CardControlActivityDataRecord) GetControlDownloadPeriodBegin() int64 {
	if x != nil {
		return x.ControlDownloadPeriodBegin
	}
	return 0
}

func (x *CardControlActivityDataRecord) GetControlDownloadPeriodEnd() int64 {
	if x != nil {
		return x.ControlDownloadPeriodEnd
	}
	return 0
}

type FullCardNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType               uint32 `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                                               // EquipmentTyp byte
	CardIssuingMemberState uint32 `protobuf:"varint,2,opt,name=card_issuing_member_state,json=cardIssuingMemberState,proto3" json:"card_issuing_member_state,omitempty"` // NationNumeric byte
	CardNumber             string `protobuf:"bytes,3,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`                                          // CardNumber [16]byte -> decoded string
}

func (x *FullCardNumber) Reset() {
	*x = FullCardNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCardNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCardNumber) ProtoMessage() {}

func (x *FullCardNumber) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCardNumber.ProtoReflect.Descriptor instead.
func (*FullCardNumber) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{45}
}

func (x *FullCardNumber) GetCardType() uint32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *FullCardNumber) GetCardIssuingMemberState() uint32 {
	if x != nil {
		return x.CardIssuingMemberState
	}
	return 0
}

func (x *FullCardNumber) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type LastCardDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified         bool  `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	LastCardDownload int64 `protobuf:"varint,2,opt,name=last_card_download,json=lastCardDownload,proto3" json:"last_card_download,omitempty"` // TimeReal
}

func (x *LastCardDownload) Reset() {
	*x = LastCardDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastCardDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCardDownload) ProtoMessage() {}

func (x *LastCardDownload) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCardDownload.ProtoReflect.Descriptor instead.
func (*LastCardDownload) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{46}
}

func (x *LastCardDownload) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *LastCardDownload) GetLastCardDownload() int64 {
	if x != nil {
		return x.LastCardDownload
	}
	return 0
}

type CardIdentificationAndDriverCardHolderIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                       bool                            `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CardIdentification             *CardIdentification             `protobuf:"bytes,2,opt,name=card_identification,json=cardIdentification,proto3" json:"card_identification,omitempty"`
	DriverCardHolderIdentification *DriverCardHolderIdentification `protobuf:"bytes,3,opt,name=driver_card_holder_identification,json=driverCardHolderIdentification,proto3" json:"driver_card_holder_identification,omitempty"`
}

func (x *CardIdentificationAndDriverCardHolderIdentification) Reset() {
	*x = CardIdentificationAndDriverCardHolderIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIdentificationAndDriverCardHolderIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIdentificationAndDriverCardHolderIdentification) ProtoMessage() {}

func (x *CardIdentificationAndDriverCardHolderIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIdentificationAndDriverCardHolderIdentification.ProtoReflect.Descriptor instead.
func (*CardIdentificationAndDriverCardHolderIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{47}
}

func (x *CardIdentificationAndDriverCardHolderIdentification) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardIdentificationAndDriverCardHolderIdentification) GetCardIdentification() *CardIdentification {
	if x != nil {
		return x.CardIdentification
	}
	return nil
}

func (x *CardIdentificationAndDriverCardHolderIdentification) GetDriverCardHolderIdentification() *DriverCardHolderIdentification {
	if x != nil {
		return x.DriverCardHolderIdentification
	}
	return nil
}

type CardIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardIssuingMemberState   uint32 `protobuf:"varint,1,opt,name=card_issuing_member_state,json=cardIssuingMemberState,proto3" json:"card_issuing_member_state,omitempty"`      // NationNumeric
	CardNumber               string `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`                                               // CardNumber [16]byte -> decoded string
	CardIssuingAuthorityName string `protobuf:"bytes,3,opt,name=card_issuing_authority_name,json=cardIssuingAuthorityName,proto3" json:"card_issuing_authority_name,omitempty"` // Name (codepage + [35]byte), decoded string
	CardIssueDate            int64  `protobuf:"varint,4,opt,name=card_issue_date,json=cardIssueDate,proto3" json:"card_issue_date,omitempty"`                                   // TimeReal
	CardValidityBegin        int64  `protobuf:"varint,5,opt,name=card_validity_begin,json=cardValidityBegin,proto3" json:"card_validity_begin,omitempty"`                       // TimeReal
	CardExpiryDate           int64  `protobuf:"varint,6,opt,name=card_expiry_date,json=cardExpiryDate,proto3" json:"card_expiry_date,omitempty"`                                // TimeReal
}

func (x *CardIdentification) Reset() {
	*x = CardIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardIdentification) ProtoMessage() {}

func (x *CardIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardIdentification.ProtoReflect.Descriptor instead.
func (*CardIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{48}
}

func (x *CardIdentification) GetCardIssuingMemberState() uint32 {
	if x != nil {
		return x.CardIssuingMemberState
	}
	return 0
}

func (x *CardIdentification) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *CardIdentification) GetCardIssuingAuthorityName() string {
	if x != nil {
		return x.CardIssuingAuthorityName
	}
	return ""
}

func (x *CardIdentification) GetCardIssueDate() int64 {
	if x != nil {
		return x.CardIssueDate
	}
	return 0
}

func (x *CardIdentification) GetCardValidityBegin() int64 {
	if x != nil {
		return x.CardValidityBegin
	}
	return 0
}

func (x *CardIdentification) GetCardExpiryDate() int64 {
	if x != nil {
		return x.CardExpiryDate
	}
	return 0
}

type DriverCardHolderIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardHolderName              *HolderName `protobuf:"bytes,1,opt,name=card_holder_name,json=cardHolderName,proto3" json:"card_holder_name,omitempty"`
	CardHolderBirthDate         *Datef      `protobuf:"bytes,2,opt,name=card_holder_birth_date,json=cardHolderBirthDate,proto3" json:"card_holder_birth_date,omitempty"`
	CardHolderPreferredLanguage string      `protobuf:"bytes,3,opt,name=card_holder_preferred_language,json=cardHolderPreferredLanguage,proto3" json:"card_holder_preferred_language,omitempty"` // Language [2]byte -> decoded string
}

func (x *DriverCardHolderIdentification) Reset() {
	*x = DriverCardHolderIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCardHolderIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCardHolderIdentification) ProtoMessage() {}

func (x *DriverCardHolderIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCardHolderIdentification.ProtoReflect.Descriptor instead.
func (*DriverCardHolderIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{49}
}

func (x *DriverCardHolderIdentification) GetCardHolderName() *HolderName {
	if x != nil {
		return x.CardHolderName
	}
	return nil
}

func (x *DriverCardHolderIdentification) GetCardHolderBirthDate() *Datef {
	if x != nil {
		return x.CardHolderBirthDate
	}
	return nil
}

func (x *DriverCardHolderIdentification) GetCardHolderPreferredLanguage() string {
	if x != nil {
		return x.CardHolderPreferredLanguage
	}
	return ""
}

type HolderName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HolderSurname    string `protobuf:"bytes,1,opt,name=holder_surname,json=holderSurname,proto3" json:"holder_surname,omitempty"`            // Name (codepage + [35]byte), decoded string
	HolderFirstNames string `protobuf:"bytes,2,opt,name=holder_first_names,json=holderFirstNames,proto3" json:"holder_first_names,omitempty"` // Name (codepage + [35]byte), decoded string
}

func (x *HolderName) Reset() {
	*x = HolderName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolderName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolderName) ProtoMessage() {}

func (x *HolderName) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolderName.ProtoReflect.Descriptor instead.
func (*HolderName) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{50}
}

func (x *HolderName) GetHolderSurname() string {
	if x != nil {
		return x.HolderSurname
	}
	return ""
}

func (x *HolderName) GetHolderFirstNames() string {
	if x != nil {
		return x.HolderFirstNames
	}
	return ""
}

type Datef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`   // BCDString
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"` // BCDString
	Day   uint32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`     // BCDString
}

func (x *Datef) Reset() {
	*x = Datef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datef) ProtoMessage() {}

func (x *Datef) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datef.ProtoReflect.Descriptor instead.
func (*Datef) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{51}
}

func (x *Datef) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Datef) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Datef) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type CardDrivingLicenceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                       bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	DrivingLicenceIssuingAuthority string `protobuf:"bytes,2,opt,name=driving_licence_issuing_authority,json=drivingLicenceIssuingAuthority,proto3" json:"driving_licence_issuing_authority,omitempty"` // Name (codepage + [35]byte), decoded string
	DrivingLicenceIssuingNation    uint32 `protobuf:"varint,3,opt,name=driving_licence_issuing_nation,json=drivingLicenceIssuingNation,proto3" json:"driving_licence_issuing_nation,omitempty"`         // NationNumeric byte
	DrivingLicenceNumber           string `protobuf:"bytes,4,opt,name=driving_licence_number,json=drivingLicenceNumber,proto3" json:"driving_licence_number,omitempty"`                                 // DrivingLicenceNumber [16]byte -> decoded string
}

func (x *CardDrivingLicenceInformation) Reset() {
	*x = CardDrivingLicenceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDrivingLicenceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDrivingLicenceInformation) ProtoMessage() {}

func (x *CardDrivingLicenceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDrivingLicenceInformation.ProtoReflect.Descriptor instead.
func (*CardDrivingLicenceInformation) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{52}
}

func (x *CardDrivingLicenceInformation) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardDrivingLicenceInformation) GetDrivingLicenceIssuingAuthority() string {
	if x != nil {
		return x.DrivingLicenceIssuingAuthority
	}
	return ""
}

func (x *CardDrivingLicenceInformation) GetDrivingLicenceIssuingNation() uint32 {
	if x != nil {
		return x.DrivingLicenceIssuingNation
	}
	return 0
}

func (x *CardDrivingLicenceInformation) GetDrivingLicenceNumber() string {
	if x != nil {
		return x.DrivingLicenceNumber
	}
	return ""
}

type SpecificConditionsFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                     bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ConditionPointerNewestRecord uint32                     `protobuf:"varint,2,opt,name=condition_pointer_newest_record,json=conditionPointerNewestRecord,proto3" json:"condition_pointer_newest_record,omitempty"` // oOfSpecificConditionRecords uint16
	SpecificConditionRecords     []*SpecificConditionRecord `protobuf:"bytes,3,rep,name=specific_condition_records,json=specificConditionRecords,proto3" json:"specific_condition_records,omitempty"`
}

func (x *SpecificConditionsFirstGen) Reset() {
	*x = SpecificConditionsFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificConditionsFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificConditionsFirstGen) ProtoMessage() {}

func (x *SpecificConditionsFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificConditionsFirstGen.ProtoReflect.Descriptor instead.
func (*SpecificConditionsFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{53}
}

func (x *SpecificConditionsFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *SpecificConditionsFirstGen) GetConditionPointerNewestRecord() uint32 {
	if x != nil {
		return x.ConditionPointerNewestRecord
	}
	return 0
}

func (x *SpecificConditionsFirstGen) GetSpecificConditionRecords() []*SpecificConditionRecord {
	if x != nil {
		return x.SpecificConditionRecords
	}
	return nil
}

type SpecificConditionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTime             int64  `protobuf:"varint,1,opt,name=entry_time,json=entryTime,proto3" json:"entry_time,omitempty"`                                       // TimeReal
	SpecificConditionType uint32 `protobuf:"varint,2,opt,name=specific_condition_type,json=specificConditionType,proto3" json:"specific_condition_type,omitempty"` // SpecificConditionType byte
}

func (x *SpecificConditionRecord) Reset() {
	*x = SpecificConditionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificConditionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificConditionRecord) ProtoMessage() {}

func (x *SpecificConditionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificConditionRecord.ProtoReflect.Descriptor instead.
func (*SpecificConditionRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{54}
}

func (x *SpecificConditionRecord) GetEntryTime() int64 {
	if x != nil {
		return x.EntryTime
	}
	return 0
}

func (x *SpecificConditionRecord) GetSpecificConditionType() uint32 {
	if x != nil {
		return x.SpecificConditionType
	}
	return 0
}

type SpecificConditionsSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                     bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	ConditionPointerNewestRecord uint32                     `protobuf:"varint,2,opt,name=condition_pointer_newest_record,json=conditionPointerNewestRecord,proto3" json:"condition_pointer_newest_record,omitempty"` // NoOfSpecificConditionRecords uint16
	SpecificConditionRecords     []*SpecificConditionRecord `protobuf:"bytes,3,rep,name=specific_condition_records,json=specificConditionRecords,proto3" json:"specific_condition_records,omitempty"`
}

func (x *SpecificConditionsSecondGen) Reset() {
	*x = SpecificConditionsSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificConditionsSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificConditionsSecondGen) ProtoMessage() {}

func (x *SpecificConditionsSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificConditionsSecondGen.ProtoReflect.Descriptor instead.
func (*SpecificConditionsSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{55}
}

func (x *SpecificConditionsSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *SpecificConditionsSecondGen) GetConditionPointerNewestRecord() uint32 {
	if x != nil {
		return x.ConditionPointerNewestRecord
	}
	return 0
}

func (x *SpecificConditionsSecondGen) GetSpecificConditionRecords() []*SpecificConditionRecord {
	if x != nil {
		return x.SpecificConditionRecords
	}
	return nil
}

type CardVehicleUnitsUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                       bool                     `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VehicleUnitPointerNewestRecord uint32                   `protobuf:"varint,2,opt,name=vehicle_unit_pointer_newest_record,json=vehicleUnitPointerNewestRecord,proto3" json:"vehicle_unit_pointer_newest_record,omitempty"` // NoOfCardVehicleUnitRecords uint16
	CardVehicleUnitRecords         []*CardVehicleUnitRecord `protobuf:"bytes,3,rep,name=card_vehicle_unit_records,json=cardVehicleUnitRecords,proto3" json:"card_vehicle_unit_records,omitempty"`
}

func (x *CardVehicleUnitsUsed) Reset() {
	*x = CardVehicleUnitsUsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehicleUnitsUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehicleUnitsUsed) ProtoMessage() {}

func (x *CardVehicleUnitsUsed) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehicleUnitsUsed.ProtoReflect.Descriptor instead.
func (*CardVehicleUnitsUsed) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{56}
}

func (x *CardVehicleUnitsUsed) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardVehicleUnitsUsed) GetVehicleUnitPointerNewestRecord() uint32 {
	if x != nil {
		return x.VehicleUnitPointerNewestRecord
	}
	return 0
}

func (x *CardVehicleUnitsUsed) GetCardVehicleUnitRecords() []*CardVehicleUnitRecord {
	if x != nil {
		return x.CardVehicleUnitRecords
	}
	return nil
}

type CardVehicleUnitRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp         int64  `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`                          // TimeReal
	ManufacturerCode  uint32 `protobuf:"varint,2,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"`     // ManufacturerCode byte
	DeviceId          uint32 `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                             // byte
	VuSoftwareVersion []byte `protobuf:"bytes,4,opt,name=vu_software_version,json=vuSoftwareVersion,proto3" json:"vu_software_version,omitempty"` // VuSoftwareVersion [4]byte
}

func (x *CardVehicleUnitRecord) Reset() {
	*x = CardVehicleUnitRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardVehicleUnitRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardVehicleUnitRecord) ProtoMessage() {}

func (x *CardVehicleUnitRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardVehicleUnitRecord.ProtoReflect.Descriptor instead.
func (*CardVehicleUnitRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{57}
}

func (x *CardVehicleUnitRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *CardVehicleUnitRecord) GetManufacturerCode() uint32 {
	if x != nil {
		return x.ManufacturerCode
	}
	return 0
}

func (x *CardVehicleUnitRecord) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *CardVehicleUnitRecord) GetVuSoftwareVersion() []byte {
	if x != nil {
		return x.VuSoftwareVersion
	}
	return nil
}

type GNSSAccumulatedDriving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                      bool                            `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	GnssAdPointerNewestRecord     uint32                          `protobuf:"varint,2,opt,name=gnss_ad_pointer_newest_record,json=gnssAdPointerNewestRecord,proto3" json:"gnss_ad_pointer_newest_record,omitempty"` // NoOfGNSSADRecords uint16
	GnssAccumulatedDrivingRecords []*GNSSAccumulatedDrivingRecord `protobuf:"bytes,3,rep,name=gnss_accumulated_driving_records,json=gnssAccumulatedDrivingRecords,proto3" json:"gnss_accumulated_driving_records,omitempty"`
}

func (x *GNSSAccumulatedDriving) Reset() {
	*x = GNSSAccumulatedDriving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSAccumulatedDriving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSAccumulatedDriving) ProtoMessage() {}

func (x *GNSSAccumulatedDriving) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSAccumulatedDriving.ProtoReflect.Descriptor instead.
func (*GNSSAccumulatedDriving) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{58}
}

func (x *GNSSAccumulatedDriving) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *GNSSAccumulatedDriving) GetGnssAdPointerNewestRecord() uint32 {
	if x != nil {
		return x.GnssAdPointerNewestRecord
	}
	return 0
}

func (x *GNSSAccumulatedDriving) GetGnssAccumulatedDrivingRecords() []*GNSSAccumulatedDrivingRecord {
	if x != nil {
		return x.GnssAccumulatedDrivingRecords
	}
	return nil
}

type GNSSAccumulatedDrivingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp            int64            `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"` // TimeReal
	GnssPlaceRecord      *GNSSPlaceRecord `protobuf:"bytes,2,opt,name=gnss_place_record,json=gnssPlaceRecord,proto3" json:"gnss_place_record,omitempty"`
	VehicleOdometerValue uint32           `protobuf:"varint,3,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"` // OdometerShort [3]byte -> decoded uint32
}

func (x *GNSSAccumulatedDrivingRecord) Reset() {
	*x = GNSSAccumulatedDrivingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSAccumulatedDrivingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSAccumulatedDrivingRecord) ProtoMessage() {}

func (x *GNSSAccumulatedDrivingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSAccumulatedDrivingRecord.ProtoReflect.Descriptor instead.
func (*GNSSAccumulatedDrivingRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{59}
}

func (x *GNSSAccumulatedDrivingRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GNSSAccumulatedDrivingRecord) GetGnssPlaceRecord() *GNSSPlaceRecord {
	if x != nil {
		return x.GnssPlaceRecord
	}
	return nil
}

func (x *GNSSAccumulatedDrivingRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type GNSSAuthAccumulatedDriving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                      bool                      `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	GnssAuthAdPointerNewestRecord uint32                    `protobuf:"varint,2,opt,name=gnss_auth_ad_pointer_newest_record,json=gnssAuthAdPointerNewestRecord,proto3" json:"gnss_auth_ad_pointer_newest_record,omitempty"` // NoOfGNSSADRecords uint16
	GnssAuthStatusAdRecords       []*GNSSAuthStatusADRecord `protobuf:"bytes,3,rep,name=gnss_auth_status_ad_records,json=gnssAuthStatusAdRecords,proto3" json:"gnss_auth_status_ad_records,omitempty"`
}

func (x *GNSSAuthAccumulatedDriving) Reset() {
	*x = GNSSAuthAccumulatedDriving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSAuthAccumulatedDriving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSAuthAccumulatedDriving) ProtoMessage() {}

func (x *GNSSAuthAccumulatedDriving) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSAuthAccumulatedDriving.ProtoReflect.Descriptor instead.
func (*GNSSAuthAccumulatedDriving) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{60}
}

func (x *GNSSAuthAccumulatedDriving) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *GNSSAuthAccumulatedDriving) GetGnssAuthAdPointerNewestRecord() uint32 {
	if x != nil {
		return x.GnssAuthAdPointerNewestRecord
	}
	return 0
}

func (x *GNSSAuthAccumulatedDriving) GetGnssAuthStatusAdRecords() []*GNSSAuthStatusADRecord {
	if x != nil {
		return x.GnssAuthStatusAdRecords
	}
	return nil
}

type GNSSAuthStatusADRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp            int64  `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`                                  // TimeReal
	AuthenticationStatus uint32 `protobuf:"varint,2,opt,name=authentication_status,json=authenticationStatus,proto3" json:"authentication_status,omitempty"` // PositionAuthenticationStatus byte
}

func (x *GNSSAuthStatusADRecord) Reset() {
	*x = GNSSAuthStatusADRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNSSAuthStatusADRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSAuthStatusADRecord) ProtoMessage() {}

func (x *GNSSAuthStatusADRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSAuthStatusADRecord.ProtoReflect.Descriptor instead.
func (*GNSSAuthStatusADRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{61}
}

func (x *GNSSAuthStatusADRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GNSSAuthStatusADRecord) GetAuthenticationStatus() uint32 {
	if x != nil {
		return x.AuthenticationStatus
	}
	return 0
}

type CardBorderCrossings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                          bool                        `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	BorderCrossingPointerNewestRecord uint32                      `protobuf:"varint,2,opt,name=border_crossing_pointer_newest_record,json=borderCrossingPointerNewestRecord,proto3" json:"border_crossing_pointer_newest_record,omitempty"` // NoOfBorderCrossingRecords uint16
	CardBorderCrossingRecords         []*CardBorderCrossingRecord `protobuf:"bytes,3,rep,name=card_border_crossing_records,json=cardBorderCrossingRecords,proto3" json:"card_border_crossing_records,omitempty"`
}

func (x *CardBorderCrossings) Reset() {
	*x = CardBorderCrossings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBorderCrossings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBorderCrossings) ProtoMessage() {}

func (x *CardBorderCrossings) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBorderCrossings.ProtoReflect.Descriptor instead.
func (*CardBorderCrossings) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{62}
}

func (x *CardBorderCrossings) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardBorderCrossings) GetBorderCrossingPointerNewestRecord() uint32 {
	if x != nil {
		return x.BorderCrossingPointerNewestRecord
	}
	return 0
}

func (x *CardBorderCrossings) GetCardBorderCrossingRecords() []*CardBorderCrossingRecord {
	if x != nil {
		return x.CardBorderCrossingRecords
	}
	return nil
}

type CardBorderCrossingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified             bool                 `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	CountryLeft          uint32               `protobuf:"varint,2,opt,name=country_left,json=countryLeft,proto3" json:"country_left,omitempty"`          // NationNumeric byte
	CountryEntered       uint32               `protobuf:"varint,3,opt,name=country_entered,json=countryEntered,proto3" json:"country_entered,omitempty"` // NationNumeric byte
	GnssPlaceAuthRecord  *GNSSPlaceAuthRecord `protobuf:"bytes,4,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord,proto3" json:"gnss_place_auth_record,omitempty"`
	VehicleOdometerValue uint32               `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"` // OdometerShort [3]byte -> decoded uint32
}

func (x *CardBorderCrossingRecord) Reset() {
	*x = CardBorderCrossingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBorderCrossingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBorderCrossingRecord) ProtoMessage() {}

func (x *CardBorderCrossingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBorderCrossingRecord.ProtoReflect.Descriptor instead.
func (*CardBorderCrossingRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{63}
}

func (x *CardBorderCrossingRecord) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardBorderCrossingRecord) GetCountryLeft() uint32 {
	if x != nil {
		return x.CountryLeft
	}
	return 0
}

func (x *CardBorderCrossingRecord) GetCountryEntered() uint32 {
	if x != nil {
		return x.CountryEntered
	}
	return 0
}

func (x *CardBorderCrossingRecord) GetGnssPlaceAuthRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.GnssPlaceAuthRecord
	}
	return nil
}

func (x *CardBorderCrossingRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type CardLoadUnloadOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                      bool                    `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	LoadUnloadPointerNewestRecord uint32                  `protobuf:"varint,2,opt,name=load_unload_pointer_newest_record,json=loadUnloadPointerNewestRecord,proto3" json:"load_unload_pointer_newest_record,omitempty"` // NoOfLoadUnloadRecords uint16
	CardLoadUnloadRecords         []*CardLoadUnloadRecord `protobuf:"bytes,3,rep,name=card_load_unload_records,json=cardLoadUnloadRecords,proto3" json:"card_load_unload_records,omitempty"`
}

func (x *CardLoadUnloadOperations) Reset() {
	*x = CardLoadUnloadOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardLoadUnloadOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardLoadUnloadOperations) ProtoMessage() {}

func (x *CardLoadUnloadOperations) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardLoadUnloadOperations.ProtoReflect.Descriptor instead.
func (*CardLoadUnloadOperations) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{64}
}

func (x *CardLoadUnloadOperations) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardLoadUnloadOperations) GetLoadUnloadPointerNewestRecord() uint32 {
	if x != nil {
		return x.LoadUnloadPointerNewestRecord
	}
	return 0
}

func (x *CardLoadUnloadOperations) GetCardLoadUnloadRecords() []*CardLoadUnloadRecord {
	if x != nil {
		return x.CardLoadUnloadRecords
	}
	return nil
}

type CardLoadUnloadRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp            int64                `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`             // TimeReal
	OperationType        uint32               `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // OperationType byte
	GnssPlaceAuthRecord  *GNSSPlaceAuthRecord `protobuf:"bytes,3,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord,proto3" json:"gnss_place_auth_record,omitempty"`
	VehicleOdometerValue uint32               `protobuf:"varint,4,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"` // OdometerShort [3]byte -> decoded uint32
}

func (x *CardLoadUnloadRecord) Reset() {
	*x = CardLoadUnloadRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardLoadUnloadRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardLoadUnloadRecord) ProtoMessage() {}

func (x *CardLoadUnloadRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardLoadUnloadRecord.ProtoReflect.Descriptor instead.
func (*CardLoadUnloadRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{65}
}

func (x *CardLoadUnloadRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *CardLoadUnloadRecord) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

func (x *CardLoadUnloadRecord) GetGnssPlaceAuthRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.GnssPlaceAuthRecord
	}
	return nil
}

func (x *CardLoadUnloadRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type CardLoadTypeEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                         bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	LoadTypeEntryPointerNewestRecord uint32                     `protobuf:"varint,2,opt,name=load_type_entry_pointer_newest_record,json=loadTypeEntryPointerNewestRecord,proto3" json:"load_type_entry_pointer_newest_record,omitempty"` // NoOfLoadTypeEntryRecords uint16
	CardLoadTypeEntryRecords         []*CardLoadTypeEntryRecord `protobuf:"bytes,3,rep,name=card_load_type_entry_records,json=cardLoadTypeEntryRecords,proto3" json:"card_load_type_entry_records,omitempty"`
}

func (x *CardLoadTypeEntries) Reset() {
	*x = CardLoadTypeEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardLoadTypeEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardLoadTypeEntries) ProtoMessage() {}

func (x *CardLoadTypeEntries) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardLoadTypeEntries.ProtoReflect.Descriptor instead.
func (*CardLoadTypeEntries) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{66}
}

func (x *CardLoadTypeEntries) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CardLoadTypeEntries) GetLoadTypeEntryPointerNewestRecord() uint32 {
	if x != nil {
		return x.LoadTypeEntryPointerNewestRecord
	}
	return 0
}

func (x *CardLoadTypeEntries) GetCardLoadTypeEntryRecords() []*CardLoadTypeEntryRecord {
	if x != nil {
		return x.CardLoadTypeEntryRecords
	}
	return nil
}

type CardLoadTypeEntryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp       int64  `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`                     // TimeReal
	LoadTypeEntered uint32 `protobuf:"varint,2,opt,name=load_type_entered,json=loadTypeEntered,proto3" json:"load_type_entered,omitempty"` // LoadType byte
}

func (x *CardLoadTypeEntryRecord) Reset() {
	*x = CardLoadTypeEntryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardLoadTypeEntryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardLoadTypeEntryRecord) ProtoMessage() {}

func (x *CardLoadTypeEntryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardLoadTypeEntryRecord.ProtoReflect.Descriptor instead.
func (*CardLoadTypeEntryRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{67}
}

func (x *CardLoadTypeEntryRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *CardLoadTypeEntryRecord) GetLoadTypeEntered() uint32 {
	if x != nil {
		return x.LoadTypeEntered
	}
	return 0
}

type VuConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified      bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	Configuration []byte `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *VuConfiguration) Reset() {
	*x = VuConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuConfiguration) ProtoMessage() {}

func (x *VuConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuConfiguration.ProtoReflect.Descriptor instead.
func (*VuConfiguration) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{68}
}

func (x *VuConfiguration) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuConfiguration) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type CertificateFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate        []byte                      `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"` // [194]byte
	DecodedCertificate *DecodedCertificateFirstGen `protobuf:"bytes,2,opt,name=decoded_certificate,json=decodedCertificate,proto3" json:"decoded_certificate,omitempty"`
}

func (x *CertificateFirstGen) Reset() {
	*x = CertificateFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateFirstGen) ProtoMessage() {}

func (x *CertificateFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateFirstGen.ProtoReflect.Descriptor instead.
func (*CertificateFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{69}
}

func (x *CertificateFirstGen) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertificateFirstGen) GetDecodedCertificate() *DecodedCertificateFirstGen {
	if x != nil {
		return x.DecodedCertificate
	}
	return nil
}

type DecodedCertificateFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateHolderReference    uint64 `protobuf:"varint,1,opt,name=certificate_holder_reference,json=certificateHolderReference,proto3" json:"certificate_holder_reference,omitempty"`
	CertificateAuthorityReference uint64 `protobuf:"varint,2,opt,name=certificate_authority_reference,json=certificateAuthorityReference,proto3" json:"certificate_authority_reference,omitempty"`
	EndOfValidity                 int64  `protobuf:"varint,3,opt,name=end_of_validity,json=endOfValidity,proto3" json:"end_of_validity,omitempty"`
	RsaModulus                    string `protobuf:"bytes,4,opt,name=rsa_modulus,json=rsaModulus,proto3" json:"rsa_modulus,omitempty"`    // big int
	RsaExponent                   string `protobuf:"bytes,5,opt,name=rsa_exponent,json=rsaExponent,proto3" json:"rsa_exponent,omitempty"` // big int
}

func (x *DecodedCertificateFirstGen) Reset() {
	*x = DecodedCertificateFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateFirstGen) ProtoMessage() {}

func (x *DecodedCertificateFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateFirstGen.ProtoReflect.Descriptor instead.
func (*DecodedCertificateFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{70}
}

func (x *DecodedCertificateFirstGen) GetCertificateHolderReference() uint64 {
	if x != nil {
		return x.CertificateHolderReference
	}
	return 0
}

func (x *DecodedCertificateFirstGen) GetCertificateAuthorityReference() uint64 {
	if x != nil {
		return x.CertificateAuthorityReference
	}
	return 0
}

func (x *DecodedCertificateFirstGen) GetEndOfValidity() int64 {
	if x != nil {
		return x.EndOfValidity
	}
	return 0
}

func (x *DecodedCertificateFirstGen) GetRsaModulus() string {
	if x != nil {
		return x.RsaModulus
	}
	return ""
}

func (x *DecodedCertificateFirstGen) GetRsaExponent() string {
	if x != nil {
		return x.RsaExponent
	}
	return ""
}

type CertificateSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate        []byte                       `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"` // 204..341 bytes
	DecodedCertificate *DecodedCertificateSecondGen `protobuf:"bytes,2,opt,name=decoded_certificate,json=decodedCertificate,proto3" json:"decoded_certificate,omitempty"`
}

func (x *CertificateSecondGen) Reset() {
	*x = CertificateSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSecondGen) ProtoMessage() {}

func (x *CertificateSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSecondGen.ProtoReflect.Descriptor instead.
func (*CertificateSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{71}
}

func (x *CertificateSecondGen) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertificateSecondGen) GetDecodedCertificate() *DecodedCertificateSecondGen {
	if x != nil {
		return x.DecodedCertificate
	}
	return nil
}

type DecodedCertificateSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateBody         *DecodedCertificateSecondGen_CertificateBody         `protobuf:"bytes,1,opt,name=certificate_body,json=certificateBody,proto3" json:"certificate_body,omitempty"`
	EccCertificateSignature *DecodedCertificateSecondGen_ECCCertificateSignature `protobuf:"bytes,2,opt,name=ecc_certificate_signature,json=eccCertificateSignature,proto3" json:"ecc_certificate_signature,omitempty"`
	Valid                   bool                                                 `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *DecodedCertificateSecondGen) Reset() {
	*x = DecodedCertificateSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateSecondGen) ProtoMessage() {}

func (x *DecodedCertificateSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateSecondGen.ProtoReflect.Descriptor instead.
func (*DecodedCertificateSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{72}
}

func (x *DecodedCertificateSecondGen) GetCertificateBody() *DecodedCertificateSecondGen_CertificateBody {
	if x != nil {
		return x.CertificateBody
	}
	return nil
}

func (x *DecodedCertificateSecondGen) GetEccCertificateSignature() *DecodedCertificateSecondGen_ECCCertificateSignature {
	if x != nil {
		return x.EccCertificateSignature
	}
	return nil
}

func (x *DecodedCertificateSecondGen) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type VuOverviewFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                          bool                               `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	MemberStateCertificate            *CertificateFirstGen               `protobuf:"bytes,2,opt,name=member_state_certificate,json=memberStateCertificate,proto3" json:"member_state_certificate,omitempty"`                // MemberStateCertificateFirstGen CertificateFirstGen
	VuCertificate                     *CertificateFirstGen               `protobuf:"bytes,3,opt,name=vu_certificate,json=vuCertificate,proto3" json:"vu_certificate,omitempty"`                                             // VuCertificateFirstGen CertificateFirstGen
	VehicleIdentificationNumber       string                             `protobuf:"bytes,4,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber,proto3" json:"vehicle_identification_number,omitempty"` // VehicleIdentificationNumber [17]byte -> decoded string
	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,5,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	CurrentDateTime                   int64                              `protobuf:"varint,6,opt,name=current_date_time,json=currentDateTime,proto3" json:"current_date_time,omitempty"` // CurrentDateTime TimeReal
	VuDownloadablePeriod              *VuDownloadablePeriod              `protobuf:"bytes,7,opt,name=vu_downloadable_period,json=vuDownloadablePeriod,proto3" json:"vu_downloadable_period,omitempty"`
	CardSlotsStatus                   uint32                             `protobuf:"varint,8,opt,name=card_slots_status,json=cardSlotsStatus,proto3" json:"card_slots_status,omitempty"` // CardSlotsStatus byte
	VuDownloadActivityData            *VuDownloadActivityDataFirstGen    `protobuf:"bytes,9,opt,name=vu_download_activity_data,json=vuDownloadActivityData,proto3" json:"vu_download_activity_data,omitempty"`
	VuCompanyLocksData                *VuCompanyLocksDataFirstGen        `protobuf:"bytes,10,opt,name=vu_company_locks_data,json=vuCompanyLocksData,proto3" json:"vu_company_locks_data,omitempty"`
	VuControlActivityData             *VuControlActivityDataFirstGen     `protobuf:"bytes,11,opt,name=vu_control_activity_data,json=vuControlActivityData,proto3" json:"vu_control_activity_data,omitempty"`
	Signature                         *SignatureFirstGen                 `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VuOverviewFirstGen) Reset() {
	*x = VuOverviewFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverviewFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverviewFirstGen) ProtoMessage() {}

func (x *VuOverviewFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverviewFirstGen.ProtoReflect.Descriptor instead.
func (*VuOverviewFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{73}
}

func (x *VuOverviewFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuOverviewFirstGen) GetMemberStateCertificate() *CertificateFirstGen {
	if x != nil {
		return x.MemberStateCertificate
	}
	return nil
}

func (x *VuOverviewFirstGen) GetVuCertificate() *CertificateFirstGen {
	if x != nil {
		return x.VuCertificate
	}
	return nil
}

func (x *VuOverviewFirstGen) GetVehicleIdentificationNumber() string {
	if x != nil {
		return x.VehicleIdentificationNumber
	}
	return ""
}

func (x *VuOverviewFirstGen) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *VuOverviewFirstGen) GetCurrentDateTime() int64 {
	if x != nil {
		return x.CurrentDateTime
	}
	return 0
}

func (x *VuOverviewFirstGen) GetVuDownloadablePeriod() *VuDownloadablePeriod {
	if x != nil {
		return x.VuDownloadablePeriod
	}
	return nil
}

func (x *VuOverviewFirstGen) GetCardSlotsStatus() uint32 {
	if x != nil {
		return x.CardSlotsStatus
	}
	return 0
}

func (x *VuOverviewFirstGen) GetVuDownloadActivityData() *VuDownloadActivityDataFirstGen {
	if x != nil {
		return x.VuDownloadActivityData
	}
	return nil
}

func (x *VuOverviewFirstGen) GetVuCompanyLocksData() *VuCompanyLocksDataFirstGen {
	if x != nil {
		return x.VuCompanyLocksData
	}
	return nil
}

func (x *VuOverviewFirstGen) GetVuControlActivityData() *VuControlActivityDataFirstGen {
	if x != nil {
		return x.VuControlActivityData
	}
	return nil
}

func (x *VuOverviewFirstGen) GetSignature() *SignatureFirstGen {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VuDownloadablePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinDownloadableTime int64 `protobuf:"varint,1,opt,name=min_downloadable_time,json=minDownloadableTime,proto3" json:"min_downloadable_time,omitempty"` // TimeReal
	MaxDownloadableTime int64 `protobuf:"varint,2,opt,name=max_downloadable_time,json=maxDownloadableTime,proto3" json:"max_downloadable_time,omitempty"` // TimeReal
}

func (x *VuDownloadablePeriod) Reset() {
	*x = VuDownloadablePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadablePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadablePeriod) ProtoMessage() {}

func (x *VuDownloadablePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadablePeriod.ProtoReflect.Descriptor instead.
func (*VuDownloadablePeriod) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{74}
}

func (x *VuDownloadablePeriod) GetMinDownloadableTime() int64 {
	if x != nil {
		return x.MinDownloadableTime
	}
	return 0
}

func (x *VuDownloadablePeriod) GetMaxDownloadableTime() int64 {
	if x != nil {
		return x.MaxDownloadableTime
	}
	return 0
}

type VuDownloadActivityDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadingTime       int64           `protobuf:"varint,1,opt,name=downloading_time,json=downloadingTime,proto3" json:"downloading_time,omitempty"` // TimeReal
	FullCardNumber        *FullCardNumber `protobuf:"bytes,2,opt,name=full_card_number,json=fullCardNumber,proto3" json:"full_card_number,omitempty"`
	CompanyOrWorkshopName string          `protobuf:"bytes,3,opt,name=company_or_workshop_name,json=companyOrWorkshopName,proto3" json:"company_or_workshop_name,omitempty"` // Name (codepage + [35]byte), decoded string
}

func (x *VuDownloadActivityDataFirstGen) Reset() {
	*x = VuDownloadActivityDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadActivityDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadActivityDataFirstGen) ProtoMessage() {}

func (x *VuDownloadActivityDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadActivityDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuDownloadActivityDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{75}
}

func (x *VuDownloadActivityDataFirstGen) GetDownloadingTime() int64 {
	if x != nil {
		return x.DownloadingTime
	}
	return 0
}

func (x *VuDownloadActivityDataFirstGen) GetFullCardNumber() *FullCardNumber {
	if x != nil {
		return x.FullCardNumber
	}
	return nil
}

func (x *VuDownloadActivityDataFirstGen) GetCompanyOrWorkshopName() string {
	if x != nil {
		return x.CompanyOrWorkshopName
	}
	return ""
}

type VuCompanyLocksDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfLocks             uint32                          `protobuf:"varint,1,opt,name=no_of_locks,json=noOfLocks,proto3" json:"no_of_locks,omitempty"` // byte
	VuCompanyLocksRecords []*VuCompanyLocksRecordFirstGen `protobuf:"bytes,2,rep,name=vu_company_locks_records,json=vuCompanyLocksRecords,proto3" json:"vu_company_locks_records,omitempty"`
}

func (x *VuCompanyLocksDataFirstGen) Reset() {
	*x = VuCompanyLocksDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCompanyLocksDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCompanyLocksDataFirstGen) ProtoMessage() {}

func (x *VuCompanyLocksDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCompanyLocksDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuCompanyLocksDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{76}
}

func (x *VuCompanyLocksDataFirstGen) GetNoOfLocks() uint32 {
	if x != nil {
		return x.NoOfLocks
	}
	return 0
}

func (x *VuCompanyLocksDataFirstGen) GetVuCompanyLocksRecords() []*VuCompanyLocksRecordFirstGen {
	if x != nil {
		return x.VuCompanyLocksRecords
	}
	return nil
}

type VuCompanyLocksRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockInTime        int64           `protobuf:"varint,1,opt,name=lock_in_time,json=lockInTime,proto3" json:"lock_in_time,omitempty"`          // TimeReal
	LockOutTime       int64           `protobuf:"varint,2,opt,name=lock_out_time,json=lockOutTime,proto3" json:"lock_out_time,omitempty"`       // TimeReal
	CompanyName       string          `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`          // Name (codepage + [35]byte), decoded string
	CompanyAddress    string          `protobuf:"bytes,4,opt,name=company_address,json=companyAddress,proto3" json:"company_address,omitempty"` // Address (codepage + [35]byte), decoded string
	CompanyCardNumber *FullCardNumber `protobuf:"bytes,5,opt,name=company_card_number,json=companyCardNumber,proto3" json:"company_card_number,omitempty"`
}

func (x *VuCompanyLocksRecordFirstGen) Reset() {
	*x = VuCompanyLocksRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCompanyLocksRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCompanyLocksRecordFirstGen) ProtoMessage() {}

func (x *VuCompanyLocksRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCompanyLocksRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuCompanyLocksRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{77}
}

func (x *VuCompanyLocksRecordFirstGen) GetLockInTime() int64 {
	if x != nil {
		return x.LockInTime
	}
	return 0
}

func (x *VuCompanyLocksRecordFirstGen) GetLockOutTime() int64 {
	if x != nil {
		return x.LockOutTime
	}
	return 0
}

func (x *VuCompanyLocksRecordFirstGen) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *VuCompanyLocksRecordFirstGen) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *VuCompanyLocksRecordFirstGen) GetCompanyCardNumber() *FullCardNumber {
	if x != nil {
		return x.CompanyCardNumber
	}
	return nil
}

type VuControlActivityDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfControls             uint32                             `protobuf:"varint,1,opt,name=no_of_controls,json=noOfControls,proto3" json:"no_of_controls,omitempty"` // byte
	VuControlActivityRecords []*VuControlActivityRecordFirstGen `protobuf:"bytes,2,rep,name=vu_control_activity_records,json=vuControlActivityRecords,proto3" json:"vu_control_activity_records,omitempty"`
}

func (x *VuControlActivityDataFirstGen) Reset() {
	*x = VuControlActivityDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuControlActivityDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuControlActivityDataFirstGen) ProtoMessage() {}

func (x *VuControlActivityDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuControlActivityDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuControlActivityDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{78}
}

func (x *VuControlActivityDataFirstGen) GetNoOfControls() uint32 {
	if x != nil {
		return x.NoOfControls
	}
	return 0
}

func (x *VuControlActivityDataFirstGen) GetVuControlActivityRecords() []*VuControlActivityRecordFirstGen {
	if x != nil {
		return x.VuControlActivityRecords
	}
	return nil
}

type VuControlActivityRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlType             uint32          `protobuf:"varint,1,opt,name=control_type,json=controlType,proto3" json:"control_type,omitempty"` // ControlType byte
	ControlTime             int64           `protobuf:"varint,2,opt,name=control_time,json=controlTime,proto3" json:"control_time,omitempty"` // TimeReal
	ControlCardNumber       *FullCardNumber `protobuf:"bytes,3,opt,name=control_card_number,json=controlCardNumber,proto3" json:"control_card_number,omitempty"`
	DownloadPeriodBeginTime int64           `protobuf:"varint,4,opt,name=download_period_begin_time,json=downloadPeriodBeginTime,proto3" json:"download_period_begin_time,omitempty"` // TimeReal
	DownloadPeriodEndTime   int64           `protobuf:"varint,5,opt,name=download_period_end_time,json=downloadPeriodEndTime,proto3" json:"download_period_end_time,omitempty"`       // TimeReal
}

func (x *VuControlActivityRecordFirstGen) Reset() {
	*x = VuControlActivityRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuControlActivityRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuControlActivityRecordFirstGen) ProtoMessage() {}

func (x *VuControlActivityRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuControlActivityRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuControlActivityRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{79}
}

func (x *VuControlActivityRecordFirstGen) GetControlType() uint32 {
	if x != nil {
		return x.ControlType
	}
	return 0
}

func (x *VuControlActivityRecordFirstGen) GetControlTime() int64 {
	if x != nil {
		return x.ControlTime
	}
	return 0
}

func (x *VuControlActivityRecordFirstGen) GetControlCardNumber() *FullCardNumber {
	if x != nil {
		return x.ControlCardNumber
	}
	return nil
}

func (x *VuControlActivityRecordFirstGen) GetDownloadPeriodBeginTime() int64 {
	if x != nil {
		return x.DownloadPeriodBeginTime
	}
	return 0
}

func (x *VuControlActivityRecordFirstGen) GetDownloadPeriodEndTime() int64 {
	if x != nil {
		return x.DownloadPeriodEndTime
	}
	return 0
}

type VuDownloadInterfaceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                 bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	DownloadInterfaceVersion []byte `protobuf:"bytes,2,opt,name=download_interface_version,json=downloadInterfaceVersion,proto3" json:"download_interface_version,omitempty"` // [2]byte
}

func (x *VuDownloadInterfaceVersion) Reset() {
	*x = VuDownloadInterfaceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadInterfaceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadInterfaceVersion) ProtoMessage() {}

func (x *VuDownloadInterfaceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadInterfaceVersion.ProtoReflect.Descriptor instead.
func (*VuDownloadInterfaceVersion) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{80}
}

func (x *VuDownloadInterfaceVersion) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuDownloadInterfaceVersion) GetDownloadInterfaceVersion() []byte {
	if x != nil {
		return x.DownloadInterfaceVersion
	}
	return nil
}

type VuOverviewSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                               bool                                    `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	MemberStateCertificateRecordArray      *MemberStateCertificateRecordArray      `protobuf:"bytes,2,opt,name=member_state_certificate_record_array,json=memberStateCertificateRecordArray,proto3" json:"member_state_certificate_record_array,omitempty"`
	VuCertificateRecordArray               *VuCertificateRecordArray               `protobuf:"bytes,3,opt,name=vu_certificate_record_array,json=vuCertificateRecordArray,proto3" json:"vu_certificate_record_array,omitempty"`
	VehicleIdentificationNumberRecordArray *VehicleIdentificationNumberRecordArray `protobuf:"bytes,4,opt,name=vehicle_identification_number_record_array,json=vehicleIdentificationNumberRecordArray,proto3" json:"vehicle_identification_number_record_array,omitempty"`
	VehicleRegistrationNumberRecordArray   *VehicleRegistrationNumberRecordArray   `protobuf:"bytes,5,opt,name=vehicle_registration_number_record_array,json=vehicleRegistrationNumberRecordArray,proto3" json:"vehicle_registration_number_record_array,omitempty"`
	CurrentDateTimeRecordArray             *CurrentDateTimeRecordArray             `protobuf:"bytes,6,opt,name=current_date_time_record_array,json=currentDateTimeRecordArray,proto3" json:"current_date_time_record_array,omitempty"`
	VuDownloadablePeriodRecordArray        *VuDownloadablePeriodRecordArray        `protobuf:"bytes,7,opt,name=vu_downloadable_period_record_array,json=vuDownloadablePeriodRecordArray,proto3" json:"vu_downloadable_period_record_array,omitempty"`
	CardSlotsStatusRecordArray             *CardSlotsStatusRecordArray             `protobuf:"bytes,8,opt,name=card_slots_status_record_array,json=cardSlotsStatusRecordArray,proto3" json:"card_slots_status_record_array,omitempty"`
	VuDownloadActivityDataRecordArray      *VuDownloadActivityDataRecordArray      `protobuf:"bytes,9,opt,name=vu_download_activity_data_record_array,json=vuDownloadActivityDataRecordArray,proto3" json:"vu_download_activity_data_record_array,omitempty"`
	VuCompanyLocksRecordArray              *VuCompanyLocksRecordArray              `protobuf:"bytes,10,opt,name=vu_company_locks_record_array,json=vuCompanyLocksRecordArray,proto3" json:"vu_company_locks_record_array,omitempty"`
	VuControlActivityRecordArray           *VuControlActivityRecordArray           `protobuf:"bytes,11,opt,name=vu_control_activity_record_array,json=vuControlActivityRecordArray,proto3" json:"vu_control_activity_record_array,omitempty"`
	SignatureRecordArray                   *SignatureRecordArray                   `protobuf:"bytes,12,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuOverviewSecondGen) Reset() {
	*x = VuOverviewSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverviewSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverviewSecondGen) ProtoMessage() {}

func (x *VuOverviewSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverviewSecondGen.ProtoReflect.Descriptor instead.
func (*VuOverviewSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{81}
}

func (x *VuOverviewSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuOverviewSecondGen) GetMemberStateCertificateRecordArray() *MemberStateCertificateRecordArray {
	if x != nil {
		return x.MemberStateCertificateRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVuCertificateRecordArray() *VuCertificateRecordArray {
	if x != nil {
		return x.VuCertificateRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVehicleIdentificationNumberRecordArray() *VehicleIdentificationNumberRecordArray {
	if x != nil {
		return x.VehicleIdentificationNumberRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVehicleRegistrationNumberRecordArray() *VehicleRegistrationNumberRecordArray {
	if x != nil {
		return x.VehicleRegistrationNumberRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetCurrentDateTimeRecordArray() *CurrentDateTimeRecordArray {
	if x != nil {
		return x.CurrentDateTimeRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVuDownloadablePeriodRecordArray() *VuDownloadablePeriodRecordArray {
	if x != nil {
		return x.VuDownloadablePeriodRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetCardSlotsStatusRecordArray() *CardSlotsStatusRecordArray {
	if x != nil {
		return x.CardSlotsStatusRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVuDownloadActivityDataRecordArray() *VuDownloadActivityDataRecordArray {
	if x != nil {
		return x.VuDownloadActivityDataRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVuCompanyLocksRecordArray() *VuCompanyLocksRecordArray {
	if x != nil {
		return x.VuCompanyLocksRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetVuControlActivityRecordArray() *VuControlActivityRecordArray {
	if x != nil {
		return x.VuControlActivityRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGen) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuOverviewSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                                     bool                                          `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	MemberStateCertificateRecordArray            *MemberStateCertificateRecordArray            `protobuf:"bytes,2,opt,name=member_state_certificate_record_array,json=memberStateCertificateRecordArray,proto3" json:"member_state_certificate_record_array,omitempty"`
	VuCertificateRecordArray                     *VuCertificateRecordArray                     `protobuf:"bytes,3,opt,name=vu_certificate_record_array,json=vuCertificateRecordArray,proto3" json:"vu_certificate_record_array,omitempty"`
	VehicleIdentificationNumberRecordArray       *VehicleIdentificationNumberRecordArray       `protobuf:"bytes,4,opt,name=vehicle_identification_number_record_array,json=vehicleIdentificationNumberRecordArray,proto3" json:"vehicle_identification_number_record_array,omitempty"`
	VehicleRegistrationIdentificationRecordArray *VehicleRegistrationIdentificationRecordArray `protobuf:"bytes,5,opt,name=vehicle_registration_identification_record_array,json=vehicleRegistrationIdentificationRecordArray,proto3" json:"vehicle_registration_identification_record_array,omitempty"`
	CurrentDateTimeRecordArray                   *CurrentDateTimeRecordArray                   `protobuf:"bytes,6,opt,name=current_date_time_record_array,json=currentDateTimeRecordArray,proto3" json:"current_date_time_record_array,omitempty"`
	VuDownloadablePeriodRecordArray              *VuDownloadablePeriodRecordArray              `protobuf:"bytes,7,opt,name=vu_downloadable_period_record_array,json=vuDownloadablePeriodRecordArray,proto3" json:"vu_downloadable_period_record_array,omitempty"`
	CardSlotsStatusRecordArray                   *CardSlotsStatusRecordArray                   `protobuf:"bytes,8,opt,name=card_slots_status_record_array,json=cardSlotsStatusRecordArray,proto3" json:"card_slots_status_record_array,omitempty"`
	VuDownloadActivityDataRecordArray            *VuDownloadActivityDataRecordArray            `protobuf:"bytes,9,opt,name=vu_download_activity_data_record_array,json=vuDownloadActivityDataRecordArray,proto3" json:"vu_download_activity_data_record_array,omitempty"`
	VuCompanyLocksRecordArray                    *VuCompanyLocksRecordArray                    `protobuf:"bytes,10,opt,name=vu_company_locks_record_array,json=vuCompanyLocksRecordArray,proto3" json:"vu_company_locks_record_array,omitempty"`
	VuControlActivityRecordArray                 *VuControlActivityRecordArray                 `protobuf:"bytes,11,opt,name=vu_control_activity_record_array,json=vuControlActivityRecordArray,proto3" json:"vu_control_activity_record_array,omitempty"`
	SignatureRecordArray                         *SignatureRecordArray                         `protobuf:"bytes,12,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuOverviewSecondGenV2) Reset() {
	*x = VuOverviewSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverviewSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverviewSecondGenV2) ProtoMessage() {}

func (x *VuOverviewSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverviewSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuOverviewSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{82}
}

func (x *VuOverviewSecondGenV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuOverviewSecondGenV2) GetMemberStateCertificateRecordArray() *MemberStateCertificateRecordArray {
	if x != nil {
		return x.MemberStateCertificateRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVuCertificateRecordArray() *VuCertificateRecordArray {
	if x != nil {
		return x.VuCertificateRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVehicleIdentificationNumberRecordArray() *VehicleIdentificationNumberRecordArray {
	if x != nil {
		return x.VehicleIdentificationNumberRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVehicleRegistrationIdentificationRecordArray() *VehicleRegistrationIdentificationRecordArray {
	if x != nil {
		return x.VehicleRegistrationIdentificationRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetCurrentDateTimeRecordArray() *CurrentDateTimeRecordArray {
	if x != nil {
		return x.CurrentDateTimeRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVuDownloadablePeriodRecordArray() *VuDownloadablePeriodRecordArray {
	if x != nil {
		return x.VuDownloadablePeriodRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetCardSlotsStatusRecordArray() *CardSlotsStatusRecordArray {
	if x != nil {
		return x.CardSlotsStatusRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVuDownloadActivityDataRecordArray() *VuDownloadActivityDataRecordArray {
	if x != nil {
		return x.VuDownloadActivityDataRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVuCompanyLocksRecordArray() *VuCompanyLocksRecordArray {
	if x != nil {
		return x.VuCompanyLocksRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetVuControlActivityRecordArray() *VuControlActivityRecordArray {
	if x != nil {
		return x.VuControlActivityRecordArray
	}
	return nil
}

func (x *VuOverviewSecondGenV2) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuActivitiesFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                   bool                                `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	TimeReal                   int64                               `protobuf:"varint,2,opt,name=time_real,json=timeReal,proto3" json:"time_real,omitempty"`                                          // TimeReal
	OdometerValueMidnight      uint32                              `protobuf:"varint,3,opt,name=odometer_value_midnight,json=odometerValueMidnight,proto3" json:"odometer_value_midnight,omitempty"` // OdometerValueMidnight OdometerShort [3]byte -> decoded uint32
	VuCardIwData               *VuCardIWData                       `protobuf:"bytes,4,opt,name=vu_card_iw_data,json=vuCardIwData,proto3" json:"vu_card_iw_data,omitempty"`
	VuActivityDailyData        *VuActivityDailyDataFirstGen        `protobuf:"bytes,5,opt,name=vu_activity_daily_data,json=vuActivityDailyData,proto3" json:"vu_activity_daily_data,omitempty"`
	VuPlaceDailyWorkPeriodData *VuPlaceDailyWorkPeriodDataFirstGen `protobuf:"bytes,6,opt,name=vu_place_daily_work_period_data,json=vuPlaceDailyWorkPeriodData,proto3" json:"vu_place_daily_work_period_data,omitempty"`
	VuSpecificConditionData    *VuSpecificConditionDataFirstGen    `protobuf:"bytes,7,opt,name=vu_specific_condition_data,json=vuSpecificConditionData,proto3" json:"vu_specific_condition_data,omitempty"`
	Signature                  *SignatureFirstGen                  `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VuActivitiesFirstGen) Reset() {
	*x = VuActivitiesFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuActivitiesFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuActivitiesFirstGen) ProtoMessage() {}

func (x *VuActivitiesFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuActivitiesFirstGen.ProtoReflect.Descriptor instead.
func (*VuActivitiesFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{83}
}

func (x *VuActivitiesFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuActivitiesFirstGen) GetTimeReal() int64 {
	if x != nil {
		return x.TimeReal
	}
	return 0
}

func (x *VuActivitiesFirstGen) GetOdometerValueMidnight() uint32 {
	if x != nil {
		return x.OdometerValueMidnight
	}
	return 0
}

func (x *VuActivitiesFirstGen) GetVuCardIwData() *VuCardIWData {
	if x != nil {
		return x.VuCardIwData
	}
	return nil
}

func (x *VuActivitiesFirstGen) GetVuActivityDailyData() *VuActivityDailyDataFirstGen {
	if x != nil {
		return x.VuActivityDailyData
	}
	return nil
}

func (x *VuActivitiesFirstGen) GetVuPlaceDailyWorkPeriodData() *VuPlaceDailyWorkPeriodDataFirstGen {
	if x != nil {
		return x.VuPlaceDailyWorkPeriodData
	}
	return nil
}

func (x *VuActivitiesFirstGen) GetVuSpecificConditionData() *VuSpecificConditionDataFirstGen {
	if x != nil {
		return x.VuSpecificConditionData
	}
	return nil
}

func (x *VuActivitiesFirstGen) GetSignature() *SignatureFirstGen {
	if x != nil {
		return x.Signature
	}
	return nil
}

type MemberStateCertificateRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*CertificateSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`                               // MemberStateCertificateSecondGen CertificateSecondGen
}

func (x *MemberStateCertificateRecordArray) Reset() {
	*x = MemberStateCertificateRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberStateCertificateRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberStateCertificateRecordArray) ProtoMessage() {}

func (x *MemberStateCertificateRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberStateCertificateRecordArray.ProtoReflect.Descriptor instead.
func (*MemberStateCertificateRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{84}
}

func (x *MemberStateCertificateRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *MemberStateCertificateRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *MemberStateCertificateRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *MemberStateCertificateRecordArray) GetRecords() []*CertificateSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCertificateRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*CertificateSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`                               // VuCertificateSecondGen CertificateSecondGen
}

func (x *VuCertificateRecordArray) Reset() {
	*x = VuCertificateRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCertificateRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCertificateRecordArray) ProtoMessage() {}

func (x *VuCertificateRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCertificateRecordArray.ProtoReflect.Descriptor instead.
func (*VuCertificateRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{85}
}

func (x *VuCertificateRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCertificateRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCertificateRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCertificateRecordArray) GetRecords() []*CertificateSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VehicleIdentificationNumberRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32   `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32   `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32   `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []string `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`                               // VehicleIdentificationNumber [17]byte
}

func (x *VehicleIdentificationNumberRecordArray) Reset() {
	*x = VehicleIdentificationNumberRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleIdentificationNumberRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleIdentificationNumberRecordArray) ProtoMessage() {}

func (x *VehicleIdentificationNumberRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleIdentificationNumberRecordArray.ProtoReflect.Descriptor instead.
func (*VehicleIdentificationNumberRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{86}
}

func (x *VehicleIdentificationNumberRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VehicleIdentificationNumberRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VehicleIdentificationNumberRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VehicleIdentificationNumberRecordArray) GetRecords() []string {
	if x != nil {
		return x.Records
	}
	return nil
}

type VehicleRegistrationIdentificationRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                               `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                               `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                               `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VehicleRegistrationIdentification `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VehicleRegistrationIdentificationRecordArray) Reset() {
	*x = VehicleRegistrationIdentificationRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleRegistrationIdentificationRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleRegistrationIdentificationRecordArray) ProtoMessage() {}

func (x *VehicleRegistrationIdentificationRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleRegistrationIdentificationRecordArray.ProtoReflect.Descriptor instead.
func (*VehicleRegistrationIdentificationRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{87}
}

func (x *VehicleRegistrationIdentificationRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VehicleRegistrationIdentificationRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VehicleRegistrationIdentificationRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VehicleRegistrationIdentificationRecordArray) GetRecords() []*VehicleRegistrationIdentification {
	if x != nil {
		return x.Records
	}
	return nil
}

type VehicleRegistrationNumberRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32   `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32   `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32   `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []string `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`                               // VehicleRegistrationNumber (codepage+[13]byte) -> decoded string
}

func (x *VehicleRegistrationNumberRecordArray) Reset() {
	*x = VehicleRegistrationNumberRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleRegistrationNumberRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleRegistrationNumberRecordArray) ProtoMessage() {}

func (x *VehicleRegistrationNumberRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleRegistrationNumberRecordArray.ProtoReflect.Descriptor instead.
func (*VehicleRegistrationNumberRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{88}
}

func (x *VehicleRegistrationNumberRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VehicleRegistrationNumberRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VehicleRegistrationNumberRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VehicleRegistrationNumberRecordArray) GetRecords() []string {
	if x != nil {
		return x.Records
	}
	return nil
}

type CurrentDateTimeRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []int64 `protobuf:"varint,4,rep,packed,name=records,proto3" json:"records,omitempty"`                       // TimeReal
}

func (x *CurrentDateTimeRecordArray) Reset() {
	*x = CurrentDateTimeRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentDateTimeRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentDateTimeRecordArray) ProtoMessage() {}

func (x *CurrentDateTimeRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentDateTimeRecordArray.ProtoReflect.Descriptor instead.
func (*CurrentDateTimeRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{89}
}

func (x *CurrentDateTimeRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *CurrentDateTimeRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *CurrentDateTimeRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *CurrentDateTimeRecordArray) GetRecords() []int64 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuDownloadablePeriodRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuDownloadablePeriod `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuDownloadablePeriodRecordArray) Reset() {
	*x = VuDownloadablePeriodRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadablePeriodRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadablePeriodRecordArray) ProtoMessage() {}

func (x *VuDownloadablePeriodRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadablePeriodRecordArray.ProtoReflect.Descriptor instead.
func (*VuDownloadablePeriodRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{90}
}

func (x *VuDownloadablePeriodRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuDownloadablePeriodRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuDownloadablePeriodRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuDownloadablePeriodRecordArray) GetRecords() []*VuDownloadablePeriod {
	if x != nil {
		return x.Records
	}
	return nil
}

type CardSlotsStatusRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32   `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32   `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32   `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []uint32 `protobuf:"varint,4,rep,packed,name=records,proto3" json:"records,omitempty"`                       // CardSlotsStatus byte
}

func (x *CardSlotsStatusRecordArray) Reset() {
	*x = CardSlotsStatusRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardSlotsStatusRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSlotsStatusRecordArray) ProtoMessage() {}

func (x *CardSlotsStatusRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSlotsStatusRecordArray.ProtoReflect.Descriptor instead.
func (*CardSlotsStatusRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{91}
}

func (x *CardSlotsStatusRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *CardSlotsStatusRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *CardSlotsStatusRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *CardSlotsStatusRecordArray) GetRecords() []uint32 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuDownloadActivityDataRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                             `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                             `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                             `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuDownloadActivityDataSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuDownloadActivityDataRecordArray) Reset() {
	*x = VuDownloadActivityDataRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadActivityDataRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadActivityDataRecordArray) ProtoMessage() {}

func (x *VuDownloadActivityDataRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadActivityDataRecordArray.ProtoReflect.Descriptor instead.
func (*VuDownloadActivityDataRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{92}
}

func (x *VuDownloadActivityDataRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuDownloadActivityDataRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuDownloadActivityDataRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuDownloadActivityDataRecordArray) GetRecords() []*VuDownloadActivityDataSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuDownloadActivityDataSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadingTime             int64                        `protobuf:"varint,1,opt,name=downloading_time,json=downloadingTime,proto3" json:"downloading_time,omitempty"` // TimeReal
	FullCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,2,opt,name=full_card_number_and_generation,json=fullCardNumberAndGeneration,proto3" json:"full_card_number_and_generation,omitempty"`
	CompanyOrWorkshopName       string                       `protobuf:"bytes,3,opt,name=company_or_workshop_name,json=companyOrWorkshopName,proto3" json:"company_or_workshop_name,omitempty"` // Name (codepage + [35]byte), decoded string
}

func (x *VuDownloadActivityDataSecondGen) Reset() {
	*x = VuDownloadActivityDataSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDownloadActivityDataSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDownloadActivityDataSecondGen) ProtoMessage() {}

func (x *VuDownloadActivityDataSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDownloadActivityDataSecondGen.ProtoReflect.Descriptor instead.
func (*VuDownloadActivityDataSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{93}
}

func (x *VuDownloadActivityDataSecondGen) GetDownloadingTime() int64 {
	if x != nil {
		return x.DownloadingTime
	}
	return 0
}

func (x *VuDownloadActivityDataSecondGen) GetFullCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.FullCardNumberAndGeneration
	}
	return nil
}

func (x *VuDownloadActivityDataSecondGen) GetCompanyOrWorkshopName() string {
	if x != nil {
		return x.CompanyOrWorkshopName
	}
	return ""
}

type FullCardNumberAndGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullCardNumber *FullCardNumber `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber,proto3" json:"full_card_number,omitempty"`
	Generation     uint32          `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"` // byte
}

func (x *FullCardNumberAndGeneration) Reset() {
	*x = FullCardNumberAndGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullCardNumberAndGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullCardNumberAndGeneration) ProtoMessage() {}

func (x *FullCardNumberAndGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullCardNumberAndGeneration.ProtoReflect.Descriptor instead.
func (*FullCardNumberAndGeneration) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{94}
}

func (x *FullCardNumberAndGeneration) GetFullCardNumber() *FullCardNumber {
	if x != nil {
		return x.FullCardNumber
	}
	return nil
}

func (x *FullCardNumberAndGeneration) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type VuCompanyLocksRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                           `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                           `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                           `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuCompanyLocksRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuCompanyLocksRecordArray) Reset() {
	*x = VuCompanyLocksRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCompanyLocksRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCompanyLocksRecordArray) ProtoMessage() {}

func (x *VuCompanyLocksRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCompanyLocksRecordArray.ProtoReflect.Descriptor instead.
func (*VuCompanyLocksRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{95}
}

func (x *VuCompanyLocksRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCompanyLocksRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCompanyLocksRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCompanyLocksRecordArray) GetRecords() []*VuCompanyLocksRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCompanyLocksRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockInTime                     int64                        `protobuf:"varint,1,opt,name=lock_in_time,json=lockInTime,proto3" json:"lock_in_time,omitempty"`          // TimeReal
	LockOutTime                    int64                        `protobuf:"varint,2,opt,name=lock_out_time,json=lockOutTime,proto3" json:"lock_out_time,omitempty"`       // TimeReal
	CompanyName                    string                       `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`          // Name (codepage + [35]byte), decoded string
	CompanyAddress                 string                       `protobuf:"bytes,4,opt,name=company_address,json=companyAddress,proto3" json:"company_address,omitempty"` // Address (codepage + [35]byte), decoded string
	CompanyCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,5,opt,name=company_card_number_and_generation,json=companyCardNumberAndGeneration,proto3" json:"company_card_number_and_generation,omitempty"`
}

func (x *VuCompanyLocksRecordSecondGen) Reset() {
	*x = VuCompanyLocksRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCompanyLocksRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCompanyLocksRecordSecondGen) ProtoMessage() {}

func (x *VuCompanyLocksRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCompanyLocksRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuCompanyLocksRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{96}
}

func (x *VuCompanyLocksRecordSecondGen) GetLockInTime() int64 {
	if x != nil {
		return x.LockInTime
	}
	return 0
}

func (x *VuCompanyLocksRecordSecondGen) GetLockOutTime() int64 {
	if x != nil {
		return x.LockOutTime
	}
	return 0
}

func (x *VuCompanyLocksRecordSecondGen) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *VuCompanyLocksRecordSecondGen) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *VuCompanyLocksRecordSecondGen) GetCompanyCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CompanyCardNumberAndGeneration
	}
	return nil
}

type VuControlActivityRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                              `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                              `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                              `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuControlActivityRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuControlActivityRecordArray) Reset() {
	*x = VuControlActivityRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuControlActivityRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuControlActivityRecordArray) ProtoMessage() {}

func (x *VuControlActivityRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuControlActivityRecordArray.ProtoReflect.Descriptor instead.
func (*VuControlActivityRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{97}
}

func (x *VuControlActivityRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuControlActivityRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuControlActivityRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuControlActivityRecordArray) GetRecords() []*VuControlActivityRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuControlActivityRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlType                    uint32                       `protobuf:"varint,1,opt,name=control_type,json=controlType,proto3" json:"control_type,omitempty"` // ControlType byte
	ControlTime                    int64                        `protobuf:"varint,2,opt,name=control_time,json=controlTime,proto3" json:"control_time,omitempty"` // TimeReal
	ControlCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,3,opt,name=control_card_number_and_generation,json=controlCardNumberAndGeneration,proto3" json:"control_card_number_and_generation,omitempty"`
	DownloadPeriodBeginTime        int64                        `protobuf:"varint,4,opt,name=download_period_begin_time,json=downloadPeriodBeginTime,proto3" json:"download_period_begin_time,omitempty"` // TimeReal
	DownloadPeriodEndTime          int64                        `protobuf:"varint,5,opt,name=download_period_end_time,json=downloadPeriodEndTime,proto3" json:"download_period_end_time,omitempty"`       // TimeReal
}

func (x *VuControlActivityRecordSecondGen) Reset() {
	*x = VuControlActivityRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuControlActivityRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuControlActivityRecordSecondGen) ProtoMessage() {}

func (x *VuControlActivityRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuControlActivityRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuControlActivityRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{98}
}

func (x *VuControlActivityRecordSecondGen) GetControlType() uint32 {
	if x != nil {
		return x.ControlType
	}
	return 0
}

func (x *VuControlActivityRecordSecondGen) GetControlTime() int64 {
	if x != nil {
		return x.ControlTime
	}
	return 0
}

func (x *VuControlActivityRecordSecondGen) GetControlCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.ControlCardNumberAndGeneration
	}
	return nil
}

func (x *VuControlActivityRecordSecondGen) GetDownloadPeriodBeginTime() int64 {
	if x != nil {
		return x.DownloadPeriodBeginTime
	}
	return 0
}

func (x *VuControlActivityRecordSecondGen) GetDownloadPeriodEndTime() int64 {
	if x != nil {
		return x.DownloadPeriodEndTime
	}
	return 0
}

type SignatureRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*SignatureSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *SignatureRecordArray) Reset() {
	*x = SignatureRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureRecordArray) ProtoMessage() {}

func (x *SignatureRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureRecordArray.ProtoReflect.Descriptor instead.
func (*SignatureRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{99}
}

func (x *SignatureRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *SignatureRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *SignatureRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *SignatureRecordArray) GetRecords() []*SignatureSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCardIWData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfIwRecords   uint32                    `protobuf:"varint,1,opt,name=no_of_iw_records,json=noOfIwRecords,proto3" json:"no_of_iw_records,omitempty"` // uint16
	VuCardIwRecords []*VuCardIWRecordFirstGen `protobuf:"bytes,2,rep,name=vu_card_iw_records,json=vuCardIwRecords,proto3" json:"vu_card_iw_records,omitempty"`
}

func (x *VuCardIWData) Reset() {
	*x = VuCardIWData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardIWData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardIWData) ProtoMessage() {}

func (x *VuCardIWData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardIWData.ProtoReflect.Descriptor instead.
func (*VuCardIWData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{100}
}

func (x *VuCardIWData) GetNoOfIwRecords() uint32 {
	if x != nil {
		return x.NoOfIwRecords
	}
	return 0
}

func (x *VuCardIWData) GetVuCardIwRecords() []*VuCardIWRecordFirstGen {
	if x != nil {
		return x.VuCardIwRecords
	}
	return nil
}

type VuCardIWRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardHolderName                   *HolderName                  `protobuf:"bytes,1,opt,name=card_holder_name,json=cardHolderName,proto3" json:"card_holder_name,omitempty"`
	FullCardNumber                   *FullCardNumber              `protobuf:"bytes,2,opt,name=full_card_number,json=fullCardNumber,proto3" json:"full_card_number,omitempty"`
	CardExpiryDate                   int64                        `protobuf:"varint,3,opt,name=card_expiry_date,json=cardExpiryDate,proto3" json:"card_expiry_date,omitempty"`                                                           // TimeReal
	CardInsertionTime                int64                        `protobuf:"varint,4,opt,name=card_insertion_time,json=cardInsertionTime,proto3" json:"card_insertion_time,omitempty"`                                                  // TimeReal
	VehicleOdometerValueAtInsertion  uint32                       `protobuf:"varint,5,opt,name=vehicle_odometer_value_at_insertion,json=vehicleOdometerValueAtInsertion,proto3" json:"vehicle_odometer_value_at_insertion,omitempty"`    // OdometerShort [3]byte -> decoded uint32
	CardSlotNumber                   uint32                       `protobuf:"varint,6,opt,name=card_slot_number,json=cardSlotNumber,proto3" json:"card_slot_number,omitempty"`                                                           // CardSlotNumber byte
	CardWithdrawalTime               int64                        `protobuf:"varint,7,opt,name=card_withdrawal_time,json=cardWithdrawalTime,proto3" json:"card_withdrawal_time,omitempty"`                                               // TimeReal
	VehicleOdometerValueAtWithdrawal uint32                       `protobuf:"varint,8,opt,name=vehicle_odometer_value_at_withdrawal,json=vehicleOdometerValueAtWithdrawal,proto3" json:"vehicle_odometer_value_at_withdrawal,omitempty"` // OdometerShort [3]byte -> decoded uint32
	PreviousVehicleInfo              *PreviousVehicleInfoFirstGen `protobuf:"bytes,9,opt,name=previous_vehicle_info,json=previousVehicleInfo,proto3" json:"previous_vehicle_info,omitempty"`
	ManualInputFlag                  uint32                       `protobuf:"varint,10,opt,name=manual_input_flag,json=manualInputFlag,proto3" json:"manual_input_flag,omitempty"` // ManualInputFlag byte
}

func (x *VuCardIWRecordFirstGen) Reset() {
	*x = VuCardIWRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardIWRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardIWRecordFirstGen) ProtoMessage() {}

func (x *VuCardIWRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardIWRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuCardIWRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{101}
}

func (x *VuCardIWRecordFirstGen) GetCardHolderName() *HolderName {
	if x != nil {
		return x.CardHolderName
	}
	return nil
}

func (x *VuCardIWRecordFirstGen) GetFullCardNumber() *FullCardNumber {
	if x != nil {
		return x.FullCardNumber
	}
	return nil
}

func (x *VuCardIWRecordFirstGen) GetCardExpiryDate() int64 {
	if x != nil {
		return x.CardExpiryDate
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetCardInsertionTime() int64 {
	if x != nil {
		return x.CardInsertionTime
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetVehicleOdometerValueAtInsertion() uint32 {
	if x != nil {
		return x.VehicleOdometerValueAtInsertion
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetCardSlotNumber() uint32 {
	if x != nil {
		return x.CardSlotNumber
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetCardWithdrawalTime() int64 {
	if x != nil {
		return x.CardWithdrawalTime
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetVehicleOdometerValueAtWithdrawal() uint32 {
	if x != nil {
		return x.VehicleOdometerValueAtWithdrawal
	}
	return 0
}

func (x *VuCardIWRecordFirstGen) GetPreviousVehicleInfo() *PreviousVehicleInfoFirstGen {
	if x != nil {
		return x.PreviousVehicleInfo
	}
	return nil
}

func (x *VuCardIWRecordFirstGen) GetManualInputFlag() uint32 {
	if x != nil {
		return x.ManualInputFlag
	}
	return 0
}

type PreviousVehicleInfoFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,1,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	CardWithdrawalTime                int64                              `protobuf:"varint,2,opt,name=card_withdrawal_time,json=cardWithdrawalTime,proto3" json:"card_withdrawal_time,omitempty"` // TimeReal
}

func (x *PreviousVehicleInfoFirstGen) Reset() {
	*x = PreviousVehicleInfoFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviousVehicleInfoFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousVehicleInfoFirstGen) ProtoMessage() {}

func (x *PreviousVehicleInfoFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousVehicleInfoFirstGen.ProtoReflect.Descriptor instead.
func (*PreviousVehicleInfoFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{102}
}

func (x *PreviousVehicleInfoFirstGen) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *PreviousVehicleInfoFirstGen) GetCardWithdrawalTime() int64 {
	if x != nil {
		return x.CardWithdrawalTime
	}
	return 0
}

type VuActivityDailyDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfActivityChanges uint32                `protobuf:"varint,1,opt,name=no_of_activity_changes,json=noOfActivityChanges,proto3" json:"no_of_activity_changes,omitempty"` // uint16
	ActivityChangeInfo  []*ActivityChangeInfo `protobuf:"bytes,2,rep,name=activity_change_info,json=activityChangeInfo,proto3" json:"activity_change_info,omitempty"`
}

func (x *VuActivityDailyDataFirstGen) Reset() {
	*x = VuActivityDailyDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuActivityDailyDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuActivityDailyDataFirstGen) ProtoMessage() {}

func (x *VuActivityDailyDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuActivityDailyDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuActivityDailyDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{103}
}

func (x *VuActivityDailyDataFirstGen) GetNoOfActivityChanges() uint32 {
	if x != nil {
		return x.NoOfActivityChanges
	}
	return 0
}

func (x *VuActivityDailyDataFirstGen) GetActivityChangeInfo() []*ActivityChangeInfo {
	if x != nil {
		return x.ActivityChangeInfo
	}
	return nil
}

type VuPlaceDailyWorkPeriodDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfPlaceRecords              uint32                                  `protobuf:"varint,1,opt,name=no_of_place_records,json=noOfPlaceRecords,proto3" json:"no_of_place_records,omitempty"` // byte
	VuPlaceDailyWorkPeriodRecords []*VuPlaceDailyWorkPeriodRecordFirstGen `protobuf:"bytes,2,rep,name=vu_place_daily_work_period_records,json=vuPlaceDailyWorkPeriodRecords,proto3" json:"vu_place_daily_work_period_records,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodDataFirstGen) Reset() {
	*x = VuPlaceDailyWorkPeriodDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodDataFirstGen) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{104}
}

func (x *VuPlaceDailyWorkPeriodDataFirstGen) GetNoOfPlaceRecords() uint32 {
	if x != nil {
		return x.NoOfPlaceRecords
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodDataFirstGen) GetVuPlaceDailyWorkPeriodRecords() []*VuPlaceDailyWorkPeriodRecordFirstGen {
	if x != nil {
		return x.VuPlaceDailyWorkPeriodRecords
	}
	return nil
}

type VuPlaceDailyWorkPeriodRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullCardNumber *FullCardNumber      `protobuf:"bytes,1,opt,name=full_card_number,json=fullCardNumber,proto3" json:"full_card_number,omitempty"`
	PlaceRecord    *PlaceRecordFirstGen `protobuf:"bytes,2,opt,name=place_record,json=placeRecord,proto3" json:"place_record,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodRecordFirstGen) Reset() {
	*x = VuPlaceDailyWorkPeriodRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodRecordFirstGen) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{105}
}

func (x *VuPlaceDailyWorkPeriodRecordFirstGen) GetFullCardNumber() *FullCardNumber {
	if x != nil {
		return x.FullCardNumber
	}
	return nil
}

func (x *VuPlaceDailyWorkPeriodRecordFirstGen) GetPlaceRecord() *PlaceRecordFirstGen {
	if x != nil {
		return x.PlaceRecord
	}
	return nil
}

type VuSpecificConditionDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfSpecificConditionRecords uint32                     `protobuf:"varint,1,opt,name=no_of_specific_condition_records,json=noOfSpecificConditionRecords,proto3" json:"no_of_specific_condition_records,omitempty"` // uint16
	SpecificConditionRecords     []*SpecificConditionRecord `protobuf:"bytes,2,rep,name=specific_condition_records,json=specificConditionRecords,proto3" json:"specific_condition_records,omitempty"`
}

func (x *VuSpecificConditionDataFirstGen) Reset() {
	*x = VuSpecificConditionDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuSpecificConditionDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuSpecificConditionDataFirstGen) ProtoMessage() {}

func (x *VuSpecificConditionDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuSpecificConditionDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuSpecificConditionDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{106}
}

func (x *VuSpecificConditionDataFirstGen) GetNoOfSpecificConditionRecords() uint32 {
	if x != nil {
		return x.NoOfSpecificConditionRecords
	}
	return 0
}

func (x *VuSpecificConditionDataFirstGen) GetSpecificConditionRecords() []*SpecificConditionRecord {
	if x != nil {
		return x.SpecificConditionRecords
	}
	return nil
}

type VuActivitiesSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                          bool                               `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	DateOfDayDownloadedRecordArray    *DateOfDayDownloadedRecordArray    `protobuf:"bytes,2,opt,name=date_of_day_downloaded_record_array,json=dateOfDayDownloadedRecordArray,proto3" json:"date_of_day_downloaded_record_array,omitempty"`
	OdometerValueMidnightRecordArray  *OdometerValueMidnightRecordArray  `protobuf:"bytes,3,opt,name=odometer_value_midnight_record_array,json=odometerValueMidnightRecordArray,proto3" json:"odometer_value_midnight_record_array,omitempty"`
	VuCardIwRecordArray               *VuCardIWRecordArray               `protobuf:"bytes,4,opt,name=vu_card_iw_record_array,json=vuCardIwRecordArray,proto3" json:"vu_card_iw_record_array,omitempty"`
	VuActivityDailyRecordArray        *VuActivityDailyRecordArray        `protobuf:"bytes,5,opt,name=vu_activity_daily_record_array,json=vuActivityDailyRecordArray,proto3" json:"vu_activity_daily_record_array,omitempty"`
	VuPlaceDailyWorkPeriodRecordArray *VuPlaceDailyWorkPeriodRecordArray `protobuf:"bytes,6,opt,name=vu_place_daily_work_period_record_array,json=vuPlaceDailyWorkPeriodRecordArray,proto3" json:"vu_place_daily_work_period_record_array,omitempty"`
	VuGnssAdRecordArray               *VuGNSSADRecordArray               `protobuf:"bytes,7,opt,name=vu_gnss_ad_record_array,json=vuGnssAdRecordArray,proto3" json:"vu_gnss_ad_record_array,omitempty"`
	VuSpecificConditionRecordArray    *VuSpecificConditionRecordArray    `protobuf:"bytes,8,opt,name=vu_specific_condition_record_array,json=vuSpecificConditionRecordArray,proto3" json:"vu_specific_condition_record_array,omitempty"`
	SignatureRecordArray              *SignatureRecordArray              `protobuf:"bytes,9,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuActivitiesSecondGen) Reset() {
	*x = VuActivitiesSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuActivitiesSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuActivitiesSecondGen) ProtoMessage() {}

func (x *VuActivitiesSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuActivitiesSecondGen.ProtoReflect.Descriptor instead.
func (*VuActivitiesSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{107}
}

func (x *VuActivitiesSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuActivitiesSecondGen) GetDateOfDayDownloadedRecordArray() *DateOfDayDownloadedRecordArray {
	if x != nil {
		return x.DateOfDayDownloadedRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetOdometerValueMidnightRecordArray() *OdometerValueMidnightRecordArray {
	if x != nil {
		return x.OdometerValueMidnightRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetVuCardIwRecordArray() *VuCardIWRecordArray {
	if x != nil {
		return x.VuCardIwRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetVuActivityDailyRecordArray() *VuActivityDailyRecordArray {
	if x != nil {
		return x.VuActivityDailyRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetVuPlaceDailyWorkPeriodRecordArray() *VuPlaceDailyWorkPeriodRecordArray {
	if x != nil {
		return x.VuPlaceDailyWorkPeriodRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetVuGnssAdRecordArray() *VuGNSSADRecordArray {
	if x != nil {
		return x.VuGnssAdRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetVuSpecificConditionRecordArray() *VuSpecificConditionRecordArray {
	if x != nil {
		return x.VuSpecificConditionRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGen) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuActivitiesSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                          bool                                 `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	DateOfDayDownloadedRecordArray    *DateOfDayDownloadedRecordArray      `protobuf:"bytes,2,opt,name=date_of_day_downloaded_record_array,json=dateOfDayDownloadedRecordArray,proto3" json:"date_of_day_downloaded_record_array,omitempty"`
	OdometerValueMidnightRecordArray  *OdometerValueMidnightRecordArray    `protobuf:"bytes,3,opt,name=odometer_value_midnight_record_array,json=odometerValueMidnightRecordArray,proto3" json:"odometer_value_midnight_record_array,omitempty"`
	VuCardIwRecordArray               *VuCardIWRecordArray                 `protobuf:"bytes,4,opt,name=vu_card_iw_record_array,json=vuCardIwRecordArray,proto3" json:"vu_card_iw_record_array,omitempty"`
	VuActivityDailyRecordArray        *VuActivityDailyRecordArray          `protobuf:"bytes,5,opt,name=vu_activity_daily_record_array,json=vuActivityDailyRecordArray,proto3" json:"vu_activity_daily_record_array,omitempty"`
	VuPlaceDailyWorkPeriodRecordArray *VuPlaceDailyWorkPeriodRecordArrayV2 `protobuf:"bytes,6,opt,name=vu_place_daily_work_period_record_array,json=vuPlaceDailyWorkPeriodRecordArray,proto3" json:"vu_place_daily_work_period_record_array,omitempty"`
	VuGnssAdRecordArray               *VuGNSSADRecordArrayV2               `protobuf:"bytes,7,opt,name=vu_gnss_ad_record_array,json=vuGnssAdRecordArray,proto3" json:"vu_gnss_ad_record_array,omitempty"`
	VuSpecificConditionRecordArray    *VuSpecificConditionRecordArray      `protobuf:"bytes,8,opt,name=vu_specific_condition_record_array,json=vuSpecificConditionRecordArray,proto3" json:"vu_specific_condition_record_array,omitempty"`
	VuBorderCrossingRecordArray       *VuBorderCrossingRecordArray         `protobuf:"bytes,9,opt,name=vu_border_crossing_record_array,json=vuBorderCrossingRecordArray,proto3" json:"vu_border_crossing_record_array,omitempty"`
	VuLoadUnloadRecordArray           *VuLoadUnloadRecordArray             `protobuf:"bytes,10,opt,name=vu_load_unload_record_array,json=vuLoadUnloadRecordArray,proto3" json:"vu_load_unload_record_array,omitempty"`
	SignatureRecordArray              *SignatureRecordArray                `protobuf:"bytes,11,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuActivitiesSecondGenV2) Reset() {
	*x = VuActivitiesSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuActivitiesSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuActivitiesSecondGenV2) ProtoMessage() {}

func (x *VuActivitiesSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuActivitiesSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuActivitiesSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{108}
}

func (x *VuActivitiesSecondGenV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuActivitiesSecondGenV2) GetDateOfDayDownloadedRecordArray() *DateOfDayDownloadedRecordArray {
	if x != nil {
		return x.DateOfDayDownloadedRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetOdometerValueMidnightRecordArray() *OdometerValueMidnightRecordArray {
	if x != nil {
		return x.OdometerValueMidnightRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuCardIwRecordArray() *VuCardIWRecordArray {
	if x != nil {
		return x.VuCardIwRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuActivityDailyRecordArray() *VuActivityDailyRecordArray {
	if x != nil {
		return x.VuActivityDailyRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuPlaceDailyWorkPeriodRecordArray() *VuPlaceDailyWorkPeriodRecordArrayV2 {
	if x != nil {
		return x.VuPlaceDailyWorkPeriodRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuGnssAdRecordArray() *VuGNSSADRecordArrayV2 {
	if x != nil {
		return x.VuGnssAdRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuSpecificConditionRecordArray() *VuSpecificConditionRecordArray {
	if x != nil {
		return x.VuSpecificConditionRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuBorderCrossingRecordArray() *VuBorderCrossingRecordArray {
	if x != nil {
		return x.VuBorderCrossingRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetVuLoadUnloadRecordArray() *VuLoadUnloadRecordArray {
	if x != nil {
		return x.VuLoadUnloadRecordArray
	}
	return nil
}

func (x *VuActivitiesSecondGenV2) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type DateOfDayDownloadedRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []int64 `protobuf:"varint,4,rep,packed,name=records,proto3" json:"records,omitempty"`                       // DateOfDayDownloaded TimeReal
}

func (x *DateOfDayDownloadedRecordArray) Reset() {
	*x = DateOfDayDownloadedRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateOfDayDownloadedRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateOfDayDownloadedRecordArray) ProtoMessage() {}

func (x *DateOfDayDownloadedRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateOfDayDownloadedRecordArray.ProtoReflect.Descriptor instead.
func (*DateOfDayDownloadedRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{109}
}

func (x *DateOfDayDownloadedRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *DateOfDayDownloadedRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *DateOfDayDownloadedRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *DateOfDayDownloadedRecordArray) GetRecords() []int64 {
	if x != nil {
		return x.Records
	}
	return nil
}

type OdometerValueMidnightRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32   `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32   `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32   `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []uint32 `protobuf:"varint,4,rep,packed,name=records,proto3" json:"records,omitempty"`                       // OdometerValueMidnight OdometerShort [3]byte -> decoded uint32
}

func (x *OdometerValueMidnightRecordArray) Reset() {
	*x = OdometerValueMidnightRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OdometerValueMidnightRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OdometerValueMidnightRecordArray) ProtoMessage() {}

func (x *OdometerValueMidnightRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OdometerValueMidnightRecordArray.ProtoReflect.Descriptor instead.
func (*OdometerValueMidnightRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{110}
}

func (x *OdometerValueMidnightRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *OdometerValueMidnightRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *OdometerValueMidnightRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *OdometerValueMidnightRecordArray) GetRecords() []uint32 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCardIWRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                     `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                     `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                     `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuCardIWRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuCardIWRecordArray) Reset() {
	*x = VuCardIWRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardIWRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardIWRecordArray) ProtoMessage() {}

func (x *VuCardIWRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardIWRecordArray.ProtoReflect.Descriptor instead.
func (*VuCardIWRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{111}
}

func (x *VuCardIWRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCardIWRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCardIWRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCardIWRecordArray) GetRecords() []*VuCardIWRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCardIWRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardHolderName                   *HolderName                   `protobuf:"bytes,1,opt,name=card_holder_name,json=cardHolderName,proto3" json:"card_holder_name,omitempty"`
	FullCardNumberAndGeneration      *FullCardNumberAndGeneration  `protobuf:"bytes,2,opt,name=full_card_number_and_generation,json=fullCardNumberAndGeneration,proto3" json:"full_card_number_and_generation,omitempty"`
	CardExpiryDate                   int64                         `protobuf:"varint,3,opt,name=card_expiry_date,json=cardExpiryDate,proto3" json:"card_expiry_date,omitempty"`                                                           // TimeReal
	CardInsertionTime                int64                         `protobuf:"varint,4,opt,name=card_insertion_time,json=cardInsertionTime,proto3" json:"card_insertion_time,omitempty"`                                                  // TimeReal
	VehicleOdometerValueAtInsertion  uint32                        `protobuf:"varint,5,opt,name=vehicle_odometer_value_at_insertion,json=vehicleOdometerValueAtInsertion,proto3" json:"vehicle_odometer_value_at_insertion,omitempty"`    // OdometerShort [3]byte -> decoded uint32
	CardSlotNumber                   uint32                        `protobuf:"varint,6,opt,name=card_slot_number,json=cardSlotNumber,proto3" json:"card_slot_number,omitempty"`                                                           // CardSlotNumber byte
	CardWithdrawalTime               int64                         `protobuf:"varint,7,opt,name=card_withdrawal_time,json=cardWithdrawalTime,proto3" json:"card_withdrawal_time,omitempty"`                                               // TimeReal
	VehicleOdometerValueAtWithdrawal uint32                        `protobuf:"varint,8,opt,name=vehicle_odometer_value_at_withdrawal,json=vehicleOdometerValueAtWithdrawal,proto3" json:"vehicle_odometer_value_at_withdrawal,omitempty"` // OdometerShort [3]byte -> decoded uint32
	PreviousVehicleInfo              *PreviousVehicleInfoSecondGen `protobuf:"bytes,9,opt,name=previous_vehicle_info,json=previousVehicleInfo,proto3" json:"previous_vehicle_info,omitempty"`
	ManualInputFlag                  uint32                        `protobuf:"varint,10,opt,name=manual_input_flag,json=manualInputFlag,proto3" json:"manual_input_flag,omitempty"` // ManualInputFlag byte
}

func (x *VuCardIWRecordSecondGen) Reset() {
	*x = VuCardIWRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardIWRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardIWRecordSecondGen) ProtoMessage() {}

func (x *VuCardIWRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardIWRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuCardIWRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{112}
}

func (x *VuCardIWRecordSecondGen) GetCardHolderName() *HolderName {
	if x != nil {
		return x.CardHolderName
	}
	return nil
}

func (x *VuCardIWRecordSecondGen) GetFullCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.FullCardNumberAndGeneration
	}
	return nil
}

func (x *VuCardIWRecordSecondGen) GetCardExpiryDate() int64 {
	if x != nil {
		return x.CardExpiryDate
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetCardInsertionTime() int64 {
	if x != nil {
		return x.CardInsertionTime
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetVehicleOdometerValueAtInsertion() uint32 {
	if x != nil {
		return x.VehicleOdometerValueAtInsertion
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetCardSlotNumber() uint32 {
	if x != nil {
		return x.CardSlotNumber
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetCardWithdrawalTime() int64 {
	if x != nil {
		return x.CardWithdrawalTime
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetVehicleOdometerValueAtWithdrawal() uint32 {
	if x != nil {
		return x.VehicleOdometerValueAtWithdrawal
	}
	return 0
}

func (x *VuCardIWRecordSecondGen) GetPreviousVehicleInfo() *PreviousVehicleInfoSecondGen {
	if x != nil {
		return x.PreviousVehicleInfo
	}
	return nil
}

func (x *VuCardIWRecordSecondGen) GetManualInputFlag() uint32 {
	if x != nil {
		return x.ManualInputFlag
	}
	return 0
}

type PreviousVehicleInfoSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,1,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	CardWithdrawalTime                int64                              `protobuf:"varint,2,opt,name=card_withdrawal_time,json=cardWithdrawalTime,proto3" json:"card_withdrawal_time,omitempty"` // TimeReal
	VuGeneration                      uint32                             `protobuf:"varint,3,opt,name=vu_generation,json=vuGeneration,proto3" json:"vu_generation,omitempty"`                     // Generation byte
}

func (x *PreviousVehicleInfoSecondGen) Reset() {
	*x = PreviousVehicleInfoSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviousVehicleInfoSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousVehicleInfoSecondGen) ProtoMessage() {}

func (x *PreviousVehicleInfoSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousVehicleInfoSecondGen.ProtoReflect.Descriptor instead.
func (*PreviousVehicleInfoSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{113}
}

func (x *PreviousVehicleInfoSecondGen) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *PreviousVehicleInfoSecondGen) GetCardWithdrawalTime() int64 {
	if x != nil {
		return x.CardWithdrawalTime
	}
	return 0
}

func (x *PreviousVehicleInfoSecondGen) GetVuGeneration() uint32 {
	if x != nil {
		return x.VuGeneration
	}
	return 0
}

type VuActivityDailyRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*ActivityChangeInfo `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuActivityDailyRecordArray) Reset() {
	*x = VuActivityDailyRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuActivityDailyRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuActivityDailyRecordArray) ProtoMessage() {}

func (x *VuActivityDailyRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuActivityDailyRecordArray.ProtoReflect.Descriptor instead.
func (*VuActivityDailyRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{114}
}

func (x *VuActivityDailyRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuActivityDailyRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuActivityDailyRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuActivityDailyRecordArray) GetRecords() []*ActivityChangeInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuPlaceDailyWorkPeriodRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                                   `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                                   `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                                   `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuPlaceDailyWorkPeriodRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodRecordArray) Reset() {
	*x = VuPlaceDailyWorkPeriodRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodRecordArray) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodRecordArray.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{115}
}

func (x *VuPlaceDailyWorkPeriodRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArray) GetRecords() []*VuPlaceDailyWorkPeriodRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuPlaceDailyWorkPeriodRecordArrayV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                                     `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                                     `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                                     `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuPlaceDailyWorkPeriodRecordSecondGenV2 `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) Reset() {
	*x = VuPlaceDailyWorkPeriodRecordArrayV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodRecordArrayV2) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodRecordArrayV2.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodRecordArrayV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{116}
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuPlaceDailyWorkPeriodRecordArrayV2) GetRecords() []*VuPlaceDailyWorkPeriodRecordSecondGenV2 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuPlaceDailyWorkPeriodRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=full_card_number_and_generation,json=fullCardNumberAndGeneration,proto3" json:"full_card_number_and_generation,omitempty"`
	PlaceRecord                 *PlaceRecordSecondGen        `protobuf:"bytes,2,opt,name=place_record,json=placeRecord,proto3" json:"place_record,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGen) Reset() {
	*x = VuPlaceDailyWorkPeriodRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodRecordSecondGen) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{117}
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGen) GetFullCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.FullCardNumberAndGeneration
	}
	return nil
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGen) GetPlaceRecord() *PlaceRecordSecondGen {
	if x != nil {
		return x.PlaceRecord
	}
	return nil
}

type VuPlaceDailyWorkPeriodRecordSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=full_card_number_and_generation,json=fullCardNumberAndGeneration,proto3" json:"full_card_number_and_generation,omitempty"`
	PlaceAuthRecord             *PlaceAuthRecord             `protobuf:"bytes,2,opt,name=place_auth_record,json=placeAuthRecord,proto3" json:"place_auth_record,omitempty"`
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGenV2) Reset() {
	*x = VuPlaceDailyWorkPeriodRecordSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPlaceDailyWorkPeriodRecordSecondGenV2) ProtoMessage() {}

func (x *VuPlaceDailyWorkPeriodRecordSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPlaceDailyWorkPeriodRecordSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuPlaceDailyWorkPeriodRecordSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{118}
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGenV2) GetFullCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.FullCardNumberAndGeneration
	}
	return nil
}

func (x *VuPlaceDailyWorkPeriodRecordSecondGenV2) GetPlaceAuthRecord() *PlaceAuthRecord {
	if x != nil {
		return x.PlaceAuthRecord
	}
	return nil
}

type VuGNSSADRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32            `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32            `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32            `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuGNSSADRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuGNSSADRecordArray) Reset() {
	*x = VuGNSSADRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuGNSSADRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuGNSSADRecordArray) ProtoMessage() {}

func (x *VuGNSSADRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuGNSSADRecordArray.ProtoReflect.Descriptor instead.
func (*VuGNSSADRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{119}
}

func (x *VuGNSSADRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuGNSSADRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuGNSSADRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuGNSSADRecordArray) GetRecords() []*VuGNSSADRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuGNSSADRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp                    int64                        `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"` // TimeReal
	CardNumberAndGenDriverSlot   *FullCardNumberAndGeneration `protobuf:"bytes,2,opt,name=card_number_and_gen_driver_slot,json=cardNumberAndGenDriverSlot,proto3" json:"card_number_and_gen_driver_slot,omitempty"`
	CardNumberAndGenCodriverSlot *FullCardNumberAndGeneration `protobuf:"bytes,3,opt,name=card_number_and_gen_codriver_slot,json=cardNumberAndGenCodriverSlot,proto3" json:"card_number_and_gen_codriver_slot,omitempty"`
	GnssPlaceRecord              *GNSSPlaceRecord             `protobuf:"bytes,4,opt,name=gnss_place_record,json=gnssPlaceRecord,proto3" json:"gnss_place_record,omitempty"`
	VehicleOdometerValue         uint32                       `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"` // OdometerShort [3]byte -> decoded uint32
}

func (x *VuGNSSADRecord) Reset() {
	*x = VuGNSSADRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuGNSSADRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuGNSSADRecord) ProtoMessage() {}

func (x *VuGNSSADRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuGNSSADRecord.ProtoReflect.Descriptor instead.
func (*VuGNSSADRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{120}
}

func (x *VuGNSSADRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *VuGNSSADRecord) GetCardNumberAndGenDriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlot
	}
	return nil
}

func (x *VuGNSSADRecord) GetCardNumberAndGenCodriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlot
	}
	return nil
}

func (x *VuGNSSADRecord) GetGnssPlaceRecord() *GNSSPlaceRecord {
	if x != nil {
		return x.GnssPlaceRecord
	}
	return nil
}

func (x *VuGNSSADRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type VuGNSSADRecordArrayV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32              `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32              `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32              `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuGNSSADRecordV2 `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuGNSSADRecordArrayV2) Reset() {
	*x = VuGNSSADRecordArrayV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuGNSSADRecordArrayV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuGNSSADRecordArrayV2) ProtoMessage() {}

func (x *VuGNSSADRecordArrayV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuGNSSADRecordArrayV2.ProtoReflect.Descriptor instead.
func (*VuGNSSADRecordArrayV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{121}
}

func (x *VuGNSSADRecordArrayV2) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuGNSSADRecordArrayV2) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuGNSSADRecordArrayV2) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuGNSSADRecordArrayV2) GetRecords() []*VuGNSSADRecordV2 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuGNSSADRecordV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp                    int64                        `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"` // TimeReal
	CardNumberAndGenDriverSlot   *FullCardNumberAndGeneration `protobuf:"bytes,2,opt,name=card_number_and_gen_driver_slot,json=cardNumberAndGenDriverSlot,proto3" json:"card_number_and_gen_driver_slot,omitempty"`
	CardNumberAndGenCodriverSlot *FullCardNumberAndGeneration `protobuf:"bytes,3,opt,name=card_number_and_gen_codriver_slot,json=cardNumberAndGenCodriverSlot,proto3" json:"card_number_and_gen_codriver_slot,omitempty"`
	GnssPlaceAuthRecord          *GNSSPlaceAuthRecord         `protobuf:"bytes,4,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord,proto3" json:"gnss_place_auth_record,omitempty"`
	VehicleOdometerValue         uint32                       `protobuf:"varint,5,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"` // OdometerShort [3]byte -> decoded uint32
}

func (x *VuGNSSADRecordV2) Reset() {
	*x = VuGNSSADRecordV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuGNSSADRecordV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuGNSSADRecordV2) ProtoMessage() {}

func (x *VuGNSSADRecordV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuGNSSADRecordV2.ProtoReflect.Descriptor instead.
func (*VuGNSSADRecordV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{122}
}

func (x *VuGNSSADRecordV2) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *VuGNSSADRecordV2) GetCardNumberAndGenDriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlot
	}
	return nil
}

func (x *VuGNSSADRecordV2) GetCardNumberAndGenCodriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlot
	}
	return nil
}

func (x *VuGNSSADRecordV2) GetGnssPlaceAuthRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.GnssPlaceAuthRecord
	}
	return nil
}

func (x *VuGNSSADRecordV2) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type VuSpecificConditionRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                     `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                     `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                     `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*SpecificConditionRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuSpecificConditionRecordArray) Reset() {
	*x = VuSpecificConditionRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuSpecificConditionRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuSpecificConditionRecordArray) ProtoMessage() {}

func (x *VuSpecificConditionRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuSpecificConditionRecordArray.ProtoReflect.Descriptor instead.
func (*VuSpecificConditionRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{123}
}

func (x *VuSpecificConditionRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuSpecificConditionRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuSpecificConditionRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuSpecificConditionRecordArray) GetRecords() []*SpecificConditionRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuBorderCrossingRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                    `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                    `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                    `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuBorderCrossingRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuBorderCrossingRecordArray) Reset() {
	*x = VuBorderCrossingRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuBorderCrossingRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuBorderCrossingRecordArray) ProtoMessage() {}

func (x *VuBorderCrossingRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuBorderCrossingRecordArray.ProtoReflect.Descriptor instead.
func (*VuBorderCrossingRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{124}
}

func (x *VuBorderCrossingRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuBorderCrossingRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuBorderCrossingRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuBorderCrossingRecordArray) GetRecords() []*VuBorderCrossingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuBorderCrossingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumberAndGenDriverSlot   *FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=card_number_and_gen_driver_slot,json=cardNumberAndGenDriverSlot,proto3" json:"card_number_and_gen_driver_slot,omitempty"`
	CardNumberAndGenCodriverSlot *FullCardNumberAndGeneration `protobuf:"bytes,2,opt,name=card_number_and_gen_codriver_slot,json=cardNumberAndGenCodriverSlot,proto3" json:"card_number_and_gen_codriver_slot,omitempty"`
	CountryLeft                  uint32                       `protobuf:"varint,3,opt,name=country_left,json=countryLeft,proto3" json:"country_left,omitempty"`          // NationNumeric byte
	CountryEntered               uint32                       `protobuf:"varint,4,opt,name=country_entered,json=countryEntered,proto3" json:"country_entered,omitempty"` // NationNumeric byte
	GnssPlaceAuthRecord          *GNSSPlaceAuthRecord         `protobuf:"bytes,5,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord,proto3" json:"gnss_place_auth_record,omitempty"`
	VehicleOdometerValue         uint32                       `protobuf:"varint,6,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"`
}

func (x *VuBorderCrossingRecord) Reset() {
	*x = VuBorderCrossingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuBorderCrossingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuBorderCrossingRecord) ProtoMessage() {}

func (x *VuBorderCrossingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuBorderCrossingRecord.ProtoReflect.Descriptor instead.
func (*VuBorderCrossingRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{125}
}

func (x *VuBorderCrossingRecord) GetCardNumberAndGenDriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlot
	}
	return nil
}

func (x *VuBorderCrossingRecord) GetCardNumberAndGenCodriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlot
	}
	return nil
}

func (x *VuBorderCrossingRecord) GetCountryLeft() uint32 {
	if x != nil {
		return x.CountryLeft
	}
	return 0
}

func (x *VuBorderCrossingRecord) GetCountryEntered() uint32 {
	if x != nil {
		return x.CountryEntered
	}
	return 0
}

func (x *VuBorderCrossingRecord) GetGnssPlaceAuthRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.GnssPlaceAuthRecord
	}
	return nil
}

func (x *VuBorderCrossingRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type VuLoadUnloadRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuLoadUnloadRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuLoadUnloadRecordArray) Reset() {
	*x = VuLoadUnloadRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuLoadUnloadRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuLoadUnloadRecordArray) ProtoMessage() {}

func (x *VuLoadUnloadRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuLoadUnloadRecordArray.ProtoReflect.Descriptor instead.
func (*VuLoadUnloadRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{126}
}

func (x *VuLoadUnloadRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuLoadUnloadRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuLoadUnloadRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuLoadUnloadRecordArray) GetRecords() []*VuLoadUnloadRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuLoadUnloadRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp                    int64                        `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`             // TimeReal
	OperationType                uint32                       `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // OperationType byte
	CardNumberAndGenDriverSlot   *FullCardNumberAndGeneration `protobuf:"bytes,3,opt,name=card_number_and_gen_driver_slot,json=cardNumberAndGenDriverSlot,proto3" json:"card_number_and_gen_driver_slot,omitempty"`
	CardNumberAndGenCodriverSlot *FullCardNumberAndGeneration `protobuf:"bytes,4,opt,name=card_number_and_gen_codriver_slot,json=cardNumberAndGenCodriverSlot,proto3" json:"card_number_and_gen_codriver_slot,omitempty"`
	GnssPlaceAuthRecord          *GNSSPlaceAuthRecord         `protobuf:"bytes,5,opt,name=gnss_place_auth_record,json=gnssPlaceAuthRecord,proto3" json:"gnss_place_auth_record,omitempty"`
	VehicleOdometerValue         uint32                       `protobuf:"varint,6,opt,name=vehicle_odometer_value,json=vehicleOdometerValue,proto3" json:"vehicle_odometer_value,omitempty"`
}

func (x *VuLoadUnloadRecord) Reset() {
	*x = VuLoadUnloadRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuLoadUnloadRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuLoadUnloadRecord) ProtoMessage() {}

func (x *VuLoadUnloadRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuLoadUnloadRecord.ProtoReflect.Descriptor instead.
func (*VuLoadUnloadRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{127}
}

func (x *VuLoadUnloadRecord) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *VuLoadUnloadRecord) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

func (x *VuLoadUnloadRecord) GetCardNumberAndGenDriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlot
	}
	return nil
}

func (x *VuLoadUnloadRecord) GetCardNumberAndGenCodriverSlot() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlot
	}
	return nil
}

func (x *VuLoadUnloadRecord) GetGnssPlaceAuthRecord() *GNSSPlaceAuthRecord {
	if x != nil {
		return x.GnssPlaceAuthRecord
	}
	return nil
}

func (x *VuLoadUnloadRecord) GetVehicleOdometerValue() uint32 {
	if x != nil {
		return x.VehicleOdometerValue
	}
	return 0
}

type VuEventsAndFaultsFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                  bool                       `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuFaultData               *VuFaultData               `protobuf:"bytes,2,opt,name=vu_fault_data,json=vuFaultData,proto3" json:"vu_fault_data,omitempty"`
	VuEventData               *VuEventData               `protobuf:"bytes,3,opt,name=vu_event_data,json=vuEventData,proto3" json:"vu_event_data,omitempty"`
	VuOverSpeedingControlData *VuOverSpeedingControlData `protobuf:"bytes,4,opt,name=vu_over_speeding_control_data,json=vuOverSpeedingControlData,proto3" json:"vu_over_speeding_control_data,omitempty"`
	VuOverSpeedingEventData   *VuOverSpeedingEventData   `protobuf:"bytes,5,opt,name=vu_over_speeding_event_data,json=vuOverSpeedingEventData,proto3" json:"vu_over_speeding_event_data,omitempty"`
	VuTimeAdjustmentData      *VuTimeAdjustmentData      `protobuf:"bytes,6,opt,name=vu_time_adjustment_data,json=vuTimeAdjustmentData,proto3" json:"vu_time_adjustment_data,omitempty"`
	Signature                 *SignatureFirstGen         `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VuEventsAndFaultsFirstGen) Reset() {
	*x = VuEventsAndFaultsFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventsAndFaultsFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventsAndFaultsFirstGen) ProtoMessage() {}

func (x *VuEventsAndFaultsFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventsAndFaultsFirstGen.ProtoReflect.Descriptor instead.
func (*VuEventsAndFaultsFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{128}
}

func (x *VuEventsAndFaultsFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuEventsAndFaultsFirstGen) GetVuFaultData() *VuFaultData {
	if x != nil {
		return x.VuFaultData
	}
	return nil
}

func (x *VuEventsAndFaultsFirstGen) GetVuEventData() *VuEventData {
	if x != nil {
		return x.VuEventData
	}
	return nil
}

func (x *VuEventsAndFaultsFirstGen) GetVuOverSpeedingControlData() *VuOverSpeedingControlData {
	if x != nil {
		return x.VuOverSpeedingControlData
	}
	return nil
}

func (x *VuEventsAndFaultsFirstGen) GetVuOverSpeedingEventData() *VuOverSpeedingEventData {
	if x != nil {
		return x.VuOverSpeedingEventData
	}
	return nil
}

func (x *VuEventsAndFaultsFirstGen) GetVuTimeAdjustmentData() *VuTimeAdjustmentData {
	if x != nil {
		return x.VuTimeAdjustmentData
	}
	return nil
}

func (x *VuEventsAndFaultsFirstGen) GetSignature() *SignatureFirstGen {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VuFaultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfVuFaults   uint32                   `protobuf:"varint,1,opt,name=no_of_vu_faults,json=noOfVuFaults,proto3" json:"no_of_vu_faults,omitempty"` // byte
	VuFaultRecords []*VuFaultRecordFirstGen `protobuf:"bytes,2,rep,name=vu_fault_records,json=vuFaultRecords,proto3" json:"vu_fault_records,omitempty"`
}

func (x *VuFaultData) Reset() {
	*x = VuFaultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuFaultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuFaultData) ProtoMessage() {}

func (x *VuFaultData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuFaultData.ProtoReflect.Descriptor instead.
func (*VuFaultData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{129}
}

func (x *VuFaultData) GetNoOfVuFaults() uint32 {
	if x != nil {
		return x.NoOfVuFaults
	}
	return 0
}

func (x *VuFaultData) GetVuFaultRecords() []*VuFaultRecordFirstGen {
	if x != nil {
		return x.VuFaultRecords
	}
	return nil
}

type VuFaultRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultType                   uint32          `protobuf:"varint,1,opt,name=fault_type,json=faultType,proto3" json:"fault_type,omitempty"`                              // EventFaultType byte
	FaultRecordPurpose          uint32          `protobuf:"varint,2,opt,name=fault_record_purpose,json=faultRecordPurpose,proto3" json:"fault_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	FaultBeginTime              int64           `protobuf:"varint,3,opt,name=fault_begin_time,json=faultBeginTime,proto3" json:"fault_begin_time,omitempty"`             // TimeReal
	FaultEndTime                int64           `protobuf:"varint,4,opt,name=fault_end_time,json=faultEndTime,proto3" json:"fault_end_time,omitempty"`                   // TimeReal
	CardNumberDriverSlotBegin   *FullCardNumber `protobuf:"bytes,5,opt,name=card_number_driver_slot_begin,json=cardNumberDriverSlotBegin,proto3" json:"card_number_driver_slot_begin,omitempty"`
	CardNumberCodriverSlotBegin *FullCardNumber `protobuf:"bytes,6,opt,name=card_number_codriver_slot_begin,json=cardNumberCodriverSlotBegin,proto3" json:"card_number_codriver_slot_begin,omitempty"`
	CardNumberDriverSlotEnd     *FullCardNumber `protobuf:"bytes,7,opt,name=card_number_driver_slot_end,json=cardNumberDriverSlotEnd,proto3" json:"card_number_driver_slot_end,omitempty"`
	CardNumberCodriverSlotEnd   *FullCardNumber `protobuf:"bytes,8,opt,name=card_number_codriver_slot_end,json=cardNumberCodriverSlotEnd,proto3" json:"card_number_codriver_slot_end,omitempty"`
}

func (x *VuFaultRecordFirstGen) Reset() {
	*x = VuFaultRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuFaultRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuFaultRecordFirstGen) ProtoMessage() {}

func (x *VuFaultRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuFaultRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuFaultRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{130}
}

func (x *VuFaultRecordFirstGen) GetFaultType() uint32 {
	if x != nil {
		return x.FaultType
	}
	return 0
}

func (x *VuFaultRecordFirstGen) GetFaultRecordPurpose() uint32 {
	if x != nil {
		return x.FaultRecordPurpose
	}
	return 0
}

func (x *VuFaultRecordFirstGen) GetFaultBeginTime() int64 {
	if x != nil {
		return x.FaultBeginTime
	}
	return 0
}

func (x *VuFaultRecordFirstGen) GetFaultEndTime() int64 {
	if x != nil {
		return x.FaultEndTime
	}
	return 0
}

func (x *VuFaultRecordFirstGen) GetCardNumberDriverSlotBegin() *FullCardNumber {
	if x != nil {
		return x.CardNumberDriverSlotBegin
	}
	return nil
}

func (x *VuFaultRecordFirstGen) GetCardNumberCodriverSlotBegin() *FullCardNumber {
	if x != nil {
		return x.CardNumberCodriverSlotBegin
	}
	return nil
}

func (x *VuFaultRecordFirstGen) GetCardNumberDriverSlotEnd() *FullCardNumber {
	if x != nil {
		return x.CardNumberDriverSlotEnd
	}
	return nil
}

func (x *VuFaultRecordFirstGen) GetCardNumberCodriverSlotEnd() *FullCardNumber {
	if x != nil {
		return x.CardNumberCodriverSlotEnd
	}
	return nil
}

type VuEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfVuEvents   uint32                   `protobuf:"varint,1,opt,name=no_of_vu_events,json=noOfVuEvents,proto3" json:"no_of_vu_events,omitempty"` // byte
	VuEventRecords []*VuEventRecordFirstGen `protobuf:"bytes,2,rep,name=vu_event_records,json=vuEventRecords,proto3" json:"vu_event_records,omitempty"`
}

func (x *VuEventData) Reset() {
	*x = VuEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventData) ProtoMessage() {}

func (x *VuEventData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventData.ProtoReflect.Descriptor instead.
func (*VuEventData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{131}
}

func (x *VuEventData) GetNoOfVuEvents() uint32 {
	if x != nil {
		return x.NoOfVuEvents
	}
	return 0
}

func (x *VuEventData) GetVuEventRecords() []*VuEventRecordFirstGen {
	if x != nil {
		return x.VuEventRecords
	}
	return nil
}

type VuEventRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                   uint32          `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // EventFaultType byte
	EventRecordPurpose          uint32          `protobuf:"varint,2,opt,name=event_record_purpose,json=eventRecordPurpose,proto3" json:"event_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	EventBeginTime              int64           `protobuf:"varint,3,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"`             // TimeReal
	EventEndTime                int64           `protobuf:"varint,4,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`                   // TimeReal
	CardNumberDriverSlotBegin   *FullCardNumber `protobuf:"bytes,5,opt,name=card_number_driver_slot_begin,json=cardNumberDriverSlotBegin,proto3" json:"card_number_driver_slot_begin,omitempty"`
	CardNumberCodriverSlotBegin *FullCardNumber `protobuf:"bytes,6,opt,name=card_number_codriver_slot_begin,json=cardNumberCodriverSlotBegin,proto3" json:"card_number_codriver_slot_begin,omitempty"`
	CardNumberDriverSlotEnd     *FullCardNumber `protobuf:"bytes,7,opt,name=card_number_driver_slot_end,json=cardNumberDriverSlotEnd,proto3" json:"card_number_driver_slot_end,omitempty"`
	CardNumberCodriverSlotEnd   *FullCardNumber `protobuf:"bytes,8,opt,name=card_number_codriver_slot_end,json=cardNumberCodriverSlotEnd,proto3" json:"card_number_codriver_slot_end,omitempty"`
	SimilarEventsNumber         uint32          `protobuf:"varint,9,opt,name=similar_events_number,json=similarEventsNumber,proto3" json:"similar_events_number,omitempty"` // SimilarEventsNumber byte
}

func (x *VuEventRecordFirstGen) Reset() {
	*x = VuEventRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventRecordFirstGen) ProtoMessage() {}

func (x *VuEventRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuEventRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{132}
}

func (x *VuEventRecordFirstGen) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VuEventRecordFirstGen) GetEventRecordPurpose() uint32 {
	if x != nil {
		return x.EventRecordPurpose
	}
	return 0
}

func (x *VuEventRecordFirstGen) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *VuEventRecordFirstGen) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *VuEventRecordFirstGen) GetCardNumberDriverSlotBegin() *FullCardNumber {
	if x != nil {
		return x.CardNumberDriverSlotBegin
	}
	return nil
}

func (x *VuEventRecordFirstGen) GetCardNumberCodriverSlotBegin() *FullCardNumber {
	if x != nil {
		return x.CardNumberCodriverSlotBegin
	}
	return nil
}

func (x *VuEventRecordFirstGen) GetCardNumberDriverSlotEnd() *FullCardNumber {
	if x != nil {
		return x.CardNumberDriverSlotEnd
	}
	return nil
}

func (x *VuEventRecordFirstGen) GetCardNumberCodriverSlotEnd() *FullCardNumber {
	if x != nil {
		return x.CardNumberCodriverSlotEnd
	}
	return nil
}

func (x *VuEventRecordFirstGen) GetSimilarEventsNumber() uint32 {
	if x != nil {
		return x.SimilarEventsNumber
	}
	return 0
}

type VuOverSpeedingControlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastOverspeedControlTime int64  `protobuf:"varint,1,opt,name=last_overspeed_control_time,json=lastOverspeedControlTime,proto3" json:"last_overspeed_control_time,omitempty"` // TimeReal
	FirstOverspeedSince      int64  `protobuf:"varint,2,opt,name=first_overspeed_since,json=firstOverspeedSince,proto3" json:"first_overspeed_since,omitempty"`                  // TimeReal
	NumberOfOverspeedSince   uint32 `protobuf:"varint,3,opt,name=number_of_overspeed_since,json=numberOfOverspeedSince,proto3" json:"number_of_overspeed_since,omitempty"`       // OverspeedNumber byte
}

func (x *VuOverSpeedingControlData) Reset() {
	*x = VuOverSpeedingControlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingControlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingControlData) ProtoMessage() {}

func (x *VuOverSpeedingControlData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingControlData.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingControlData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{133}
}

func (x *VuOverSpeedingControlData) GetLastOverspeedControlTime() int64 {
	if x != nil {
		return x.LastOverspeedControlTime
	}
	return 0
}

func (x *VuOverSpeedingControlData) GetFirstOverspeedSince() int64 {
	if x != nil {
		return x.FirstOverspeedSince
	}
	return 0
}

func (x *VuOverSpeedingControlData) GetNumberOfOverspeedSince() uint32 {
	if x != nil {
		return x.NumberOfOverspeedSince
	}
	return 0
}

type VuOverSpeedingEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfVuOverSpeedingEvents   uint32                               `protobuf:"varint,1,opt,name=no_of_vu_over_speeding_events,json=noOfVuOverSpeedingEvents,proto3" json:"no_of_vu_over_speeding_events,omitempty"` // byte
	VuOverSpeedingEventRecords []*VuOverSpeedingEventRecordFirstGen `protobuf:"bytes,2,rep,name=vu_over_speeding_event_records,json=vuOverSpeedingEventRecords,proto3" json:"vu_over_speeding_event_records,omitempty"`
}

func (x *VuOverSpeedingEventData) Reset() {
	*x = VuOverSpeedingEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingEventData) ProtoMessage() {}

func (x *VuOverSpeedingEventData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingEventData.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingEventData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{134}
}

func (x *VuOverSpeedingEventData) GetNoOfVuOverSpeedingEvents() uint32 {
	if x != nil {
		return x.NoOfVuOverSpeedingEvents
	}
	return 0
}

func (x *VuOverSpeedingEventData) GetVuOverSpeedingEventRecords() []*VuOverSpeedingEventRecordFirstGen {
	if x != nil {
		return x.VuOverSpeedingEventRecords
	}
	return nil
}

type VuOverSpeedingEventRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                 uint32          `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // EventFaultType byte
	EventRecordPurpose        uint32          `protobuf:"varint,2,opt,name=event_record_purpose,json=eventRecordPurpose,proto3" json:"event_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	EventBeginTime            int64           `protobuf:"varint,3,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"`             // TimeReal
	EventEndTime              int64           `protobuf:"varint,4,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`                   // TimeReal
	MaxSpeedValue             uint32          `protobuf:"varint,5,opt,name=max_speed_value,json=maxSpeedValue,proto3" json:"max_speed_value,omitempty"`                // SpeedMax Speed byte
	AverageSpeedValue         uint32          `protobuf:"varint,6,opt,name=average_speed_value,json=averageSpeedValue,proto3" json:"average_speed_value,omitempty"`    // SpeedAverage Speed byte
	CardNumberDriverSlotBegin *FullCardNumber `protobuf:"bytes,7,opt,name=card_number_driver_slot_begin,json=cardNumberDriverSlotBegin,proto3" json:"card_number_driver_slot_begin,omitempty"`
	SimilarEventsNumber       uint32          `protobuf:"varint,8,opt,name=similar_events_number,json=similarEventsNumber,proto3" json:"similar_events_number,omitempty"` // SimilarEventsNumber byte
}

func (x *VuOverSpeedingEventRecordFirstGen) Reset() {
	*x = VuOverSpeedingEventRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingEventRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingEventRecordFirstGen) ProtoMessage() {}

func (x *VuOverSpeedingEventRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingEventRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingEventRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{135}
}

func (x *VuOverSpeedingEventRecordFirstGen) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetEventRecordPurpose() uint32 {
	if x != nil {
		return x.EventRecordPurpose
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetMaxSpeedValue() uint32 {
	if x != nil {
		return x.MaxSpeedValue
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetAverageSpeedValue() uint32 {
	if x != nil {
		return x.AverageSpeedValue
	}
	return 0
}

func (x *VuOverSpeedingEventRecordFirstGen) GetCardNumberDriverSlotBegin() *FullCardNumber {
	if x != nil {
		return x.CardNumberDriverSlotBegin
	}
	return nil
}

func (x *VuOverSpeedingEventRecordFirstGen) GetSimilarEventsNumber() uint32 {
	if x != nil {
		return x.SimilarEventsNumber
	}
	return 0
}

type VuTimeAdjustmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfVuTimeAdjRecords    uint32                            `protobuf:"varint,1,opt,name=no_of_vu_time_adj_records,json=noOfVuTimeAdjRecords,proto3" json:"no_of_vu_time_adj_records,omitempty"` // byte
	VuTimeAdjustmentRecords []*VuTimeAdjustmentRecordFirstGen `protobuf:"bytes,2,rep,name=vu_time_adjustment_records,json=vuTimeAdjustmentRecords,proto3" json:"vu_time_adjustment_records,omitempty"`
}

func (x *VuTimeAdjustmentData) Reset() {
	*x = VuTimeAdjustmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTimeAdjustmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTimeAdjustmentData) ProtoMessage() {}

func (x *VuTimeAdjustmentData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTimeAdjustmentData.ProtoReflect.Descriptor instead.
func (*VuTimeAdjustmentData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{136}
}

func (x *VuTimeAdjustmentData) GetNoOfVuTimeAdjRecords() uint32 {
	if x != nil {
		return x.NoOfVuTimeAdjRecords
	}
	return 0
}

func (x *VuTimeAdjustmentData) GetVuTimeAdjustmentRecords() []*VuTimeAdjustmentRecordFirstGen {
	if x != nil {
		return x.VuTimeAdjustmentRecords
	}
	return nil
}

type VuTimeAdjustmentRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldTimeValue       int64           `protobuf:"varint,1,opt,name=old_time_value,json=oldTimeValue,proto3" json:"old_time_value,omitempty"`       // TimeReal
	NewTimeValue       int64           `protobuf:"varint,2,opt,name=new_time_value,json=newTimeValue,proto3" json:"new_time_value,omitempty"`       // TimeReal
	WorkshopName       string          `protobuf:"bytes,3,opt,name=workshop_name,json=workshopName,proto3" json:"workshop_name,omitempty"`          // Name (codepage + [35]byte), decoded string
	WorkshopAddress    string          `protobuf:"bytes,4,opt,name=workshop_address,json=workshopAddress,proto3" json:"workshop_address,omitempty"` // Address (codepage + [35]byte), decoded string
	WorkshopCardNumber *FullCardNumber `protobuf:"bytes,5,opt,name=workshop_card_number,json=workshopCardNumber,proto3" json:"workshop_card_number,omitempty"`
}

func (x *VuTimeAdjustmentRecordFirstGen) Reset() {
	*x = VuTimeAdjustmentRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTimeAdjustmentRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTimeAdjustmentRecordFirstGen) ProtoMessage() {}

func (x *VuTimeAdjustmentRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTimeAdjustmentRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuTimeAdjustmentRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{137}
}

func (x *VuTimeAdjustmentRecordFirstGen) GetOldTimeValue() int64 {
	if x != nil {
		return x.OldTimeValue
	}
	return 0
}

func (x *VuTimeAdjustmentRecordFirstGen) GetNewTimeValue() int64 {
	if x != nil {
		return x.NewTimeValue
	}
	return 0
}

func (x *VuTimeAdjustmentRecordFirstGen) GetWorkshopName() string {
	if x != nil {
		return x.WorkshopName
	}
	return ""
}

func (x *VuTimeAdjustmentRecordFirstGen) GetWorkshopAddress() string {
	if x != nil {
		return x.WorkshopAddress
	}
	return ""
}

func (x *VuTimeAdjustmentRecordFirstGen) GetWorkshopCardNumber() *FullCardNumber {
	if x != nil {
		return x.WorkshopCardNumber
	}
	return nil
}

type VuEventsAndFaultsSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                             bool                                  `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuFaultRecordArray                   *VuFaultRecordArray                   `protobuf:"bytes,2,opt,name=vu_fault_record_array,json=vuFaultRecordArray,proto3" json:"vu_fault_record_array,omitempty"`
	VuEventRecordArray                   *VuEventRecordArray                   `protobuf:"bytes,3,opt,name=vu_event_record_array,json=vuEventRecordArray,proto3" json:"vu_event_record_array,omitempty"`
	VuOverSpeedingControlDataRecordArray *VuOverSpeedingControlDataRecordArray `protobuf:"bytes,4,opt,name=vu_over_speeding_control_data_record_array,json=vuOverSpeedingControlDataRecordArray,proto3" json:"vu_over_speeding_control_data_record_array,omitempty"`
	VuOverSpeedingEventRecordArray       *VuOverSpeedingEventRecordArray       `protobuf:"bytes,5,opt,name=vu_over_speeding_event_record_array,json=vuOverSpeedingEventRecordArray,proto3" json:"vu_over_speeding_event_record_array,omitempty"`
	VuTimeAdjustmentRecordArray          *VuTimeAdjustmentRecordArray          `protobuf:"bytes,6,opt,name=vu_time_adjustment_record_array,json=vuTimeAdjustmentRecordArray,proto3" json:"vu_time_adjustment_record_array,omitempty"`
	SignatureRecordArray                 *SignatureRecordArray                 `protobuf:"bytes,7,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuEventsAndFaultsSecondGen) Reset() {
	*x = VuEventsAndFaultsSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventsAndFaultsSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventsAndFaultsSecondGen) ProtoMessage() {}

func (x *VuEventsAndFaultsSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventsAndFaultsSecondGen.ProtoReflect.Descriptor instead.
func (*VuEventsAndFaultsSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{138}
}

func (x *VuEventsAndFaultsSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuEventsAndFaultsSecondGen) GetVuFaultRecordArray() *VuFaultRecordArray {
	if x != nil {
		return x.VuFaultRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGen) GetVuEventRecordArray() *VuEventRecordArray {
	if x != nil {
		return x.VuEventRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGen) GetVuOverSpeedingControlDataRecordArray() *VuOverSpeedingControlDataRecordArray {
	if x != nil {
		return x.VuOverSpeedingControlDataRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGen) GetVuOverSpeedingEventRecordArray() *VuOverSpeedingEventRecordArray {
	if x != nil {
		return x.VuOverSpeedingEventRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGen) GetVuTimeAdjustmentRecordArray() *VuTimeAdjustmentRecordArray {
	if x != nil {
		return x.VuTimeAdjustmentRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGen) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuEventsAndFaultsSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                             bool                                  `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuFaultRecordArray                   *VuFaultRecordArray                   `protobuf:"bytes,2,opt,name=vu_fault_record_array,json=vuFaultRecordArray,proto3" json:"vu_fault_record_array,omitempty"`
	VuEventRecordArray                   *VuEventRecordArray                   `protobuf:"bytes,3,opt,name=vu_event_record_array,json=vuEventRecordArray,proto3" json:"vu_event_record_array,omitempty"`
	VuOverSpeedingControlDataRecordArray *VuOverSpeedingControlDataRecordArray `protobuf:"bytes,4,opt,name=vu_over_speeding_control_data_record_array,json=vuOverSpeedingControlDataRecordArray,proto3" json:"vu_over_speeding_control_data_record_array,omitempty"`
	VuOverSpeedingEventRecordArray       *VuOverSpeedingEventRecordArray       `protobuf:"bytes,5,opt,name=vu_over_speeding_event_record_array,json=vuOverSpeedingEventRecordArray,proto3" json:"vu_over_speeding_event_record_array,omitempty"`
	VuTimeAdjustmentRecordArray          *VuTimeAdjustmentRecordArray          `protobuf:"bytes,6,opt,name=vu_time_adjustment_record_array,json=vuTimeAdjustmentRecordArray,proto3" json:"vu_time_adjustment_record_array,omitempty"`
	SignatureRecordArray                 *SignatureRecordArray                 `protobuf:"bytes,7,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuEventsAndFaultsSecondGenV2) Reset() {
	*x = VuEventsAndFaultsSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventsAndFaultsSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventsAndFaultsSecondGenV2) ProtoMessage() {}

func (x *VuEventsAndFaultsSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventsAndFaultsSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuEventsAndFaultsSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{139}
}

func (x *VuEventsAndFaultsSecondGenV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuEventsAndFaultsSecondGenV2) GetVuFaultRecordArray() *VuFaultRecordArray {
	if x != nil {
		return x.VuFaultRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGenV2) GetVuEventRecordArray() *VuEventRecordArray {
	if x != nil {
		return x.VuEventRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGenV2) GetVuOverSpeedingControlDataRecordArray() *VuOverSpeedingControlDataRecordArray {
	if x != nil {
		return x.VuOverSpeedingControlDataRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGenV2) GetVuOverSpeedingEventRecordArray() *VuOverSpeedingEventRecordArray {
	if x != nil {
		return x.VuOverSpeedingEventRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGenV2) GetVuTimeAdjustmentRecordArray() *VuTimeAdjustmentRecordArray {
	if x != nil {
		return x.VuTimeAdjustmentRecordArray
	}
	return nil
}

func (x *VuEventsAndFaultsSecondGenV2) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuFaultRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                    `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                    `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                    `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuFaultRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuFaultRecordArray) Reset() {
	*x = VuFaultRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuFaultRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuFaultRecordArray) ProtoMessage() {}

func (x *VuFaultRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuFaultRecordArray.ProtoReflect.Descriptor instead.
func (*VuFaultRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{140}
}

func (x *VuFaultRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuFaultRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuFaultRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuFaultRecordArray) GetRecords() []*VuFaultRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuFaultRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultType                          uint32                              `protobuf:"varint,1,opt,name=fault_type,json=faultType,proto3" json:"fault_type,omitempty"`                              // EventFaultType byte
	FaultRecordPurpose                 uint32                              `protobuf:"varint,2,opt,name=fault_record_purpose,json=faultRecordPurpose,proto3" json:"fault_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	FaultBeginTime                     int64                               `protobuf:"varint,3,opt,name=fault_begin_time,json=faultBeginTime,proto3" json:"fault_begin_time,omitempty"`
	FaultEndTime                       int64                               `protobuf:"varint,4,opt,name=fault_end_time,json=faultEndTime,proto3" json:"fault_end_time,omitempty"`
	CardNumberAndGenDriverSlotBegin    *FullCardNumberAndGeneration        `protobuf:"bytes,5,opt,name=card_number_and_gen_driver_slot_begin,json=cardNumberAndGenDriverSlotBegin,proto3" json:"card_number_and_gen_driver_slot_begin,omitempty"`
	CardNumberAndGenCodriverSlotBegin  *FullCardNumberAndGeneration        `protobuf:"bytes,6,opt,name=card_number_and_gen_codriver_slot_begin,json=cardNumberAndGenCodriverSlotBegin,proto3" json:"card_number_and_gen_codriver_slot_begin,omitempty"`
	CardNumberAndGenDriverSlotEnd      *FullCardNumberAndGeneration        `protobuf:"bytes,7,opt,name=card_number_and_gen_driver_slot_end,json=cardNumberAndGenDriverSlotEnd,proto3" json:"card_number_and_gen_driver_slot_end,omitempty"`
	CardNumberAndGenCodriverSlotEnd    *FullCardNumberAndGeneration        `protobuf:"bytes,8,opt,name=card_number_and_gen_codriver_slot_end,json=cardNumberAndGenCodriverSlotEnd,proto3" json:"card_number_and_gen_codriver_slot_end,omitempty"`
	ManufacturerSpecificEventFaultData *ManufacturerSpecificEventFaultData `protobuf:"bytes,9,opt,name=manufacturer_specific_event_fault_data,json=manufacturerSpecificEventFaultData,proto3" json:"manufacturer_specific_event_fault_data,omitempty"`
}

func (x *VuFaultRecordSecondGen) Reset() {
	*x = VuFaultRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuFaultRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuFaultRecordSecondGen) ProtoMessage() {}

func (x *VuFaultRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuFaultRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuFaultRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{141}
}

func (x *VuFaultRecordSecondGen) GetFaultType() uint32 {
	if x != nil {
		return x.FaultType
	}
	return 0
}

func (x *VuFaultRecordSecondGen) GetFaultRecordPurpose() uint32 {
	if x != nil {
		return x.FaultRecordPurpose
	}
	return 0
}

func (x *VuFaultRecordSecondGen) GetFaultBeginTime() int64 {
	if x != nil {
		return x.FaultBeginTime
	}
	return 0
}

func (x *VuFaultRecordSecondGen) GetFaultEndTime() int64 {
	if x != nil {
		return x.FaultEndTime
	}
	return 0
}

func (x *VuFaultRecordSecondGen) GetCardNumberAndGenDriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotBegin
	}
	return nil
}

func (x *VuFaultRecordSecondGen) GetCardNumberAndGenCodriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotBegin
	}
	return nil
}

func (x *VuFaultRecordSecondGen) GetCardNumberAndGenDriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotEnd
	}
	return nil
}

func (x *VuFaultRecordSecondGen) GetCardNumberAndGenCodriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotEnd
	}
	return nil
}

func (x *VuFaultRecordSecondGen) GetManufacturerSpecificEventFaultData() *ManufacturerSpecificEventFaultData {
	if x != nil {
		return x.ManufacturerSpecificEventFaultData
	}
	return nil
}

type ManufacturerSpecificEventFaultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufacturerCode              uint32 `protobuf:"varint,1,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"`                                           // ManufacturerCode byte
	ManufacturerSpecificErrorCode []byte `protobuf:"bytes,2,opt,name=manufacturer_specific_error_code,json=manufacturerSpecificErrorCode,proto3" json:"manufacturer_specific_error_code,omitempty"` // [3]byte
}

func (x *ManufacturerSpecificEventFaultData) Reset() {
	*x = ManufacturerSpecificEventFaultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManufacturerSpecificEventFaultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManufacturerSpecificEventFaultData) ProtoMessage() {}

func (x *ManufacturerSpecificEventFaultData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManufacturerSpecificEventFaultData.ProtoReflect.Descriptor instead.
func (*ManufacturerSpecificEventFaultData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{142}
}

func (x *ManufacturerSpecificEventFaultData) GetManufacturerCode() uint32 {
	if x != nil {
		return x.ManufacturerCode
	}
	return 0
}

func (x *ManufacturerSpecificEventFaultData) GetManufacturerSpecificErrorCode() []byte {
	if x != nil {
		return x.ManufacturerSpecificErrorCode
	}
	return nil
}

type VuEventRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                    `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                    `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                    `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuEventRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuEventRecordArray) Reset() {
	*x = VuEventRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventRecordArray) ProtoMessage() {}

func (x *VuEventRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventRecordArray.ProtoReflect.Descriptor instead.
func (*VuEventRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{143}
}

func (x *VuEventRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuEventRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuEventRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuEventRecordArray) GetRecords() []*VuEventRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuEventRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                          uint32                              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // EventFaultType byte
	EventRecordPurpose                 uint32                              `protobuf:"varint,2,opt,name=event_record_purpose,json=eventRecordPurpose,proto3" json:"event_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	EventBeginTime                     int64                               `protobuf:"varint,3,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"`             // TimeReal
	EventEndTime                       int64                               `protobuf:"varint,4,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`                   // TimeReal
	CardNumberAndGenDriverSlotBegin    *FullCardNumberAndGeneration        `protobuf:"bytes,5,opt,name=card_number_and_gen_driver_slot_begin,json=cardNumberAndGenDriverSlotBegin,proto3" json:"card_number_and_gen_driver_slot_begin,omitempty"`
	CardNumberAndGenCodriverSlotBegin  *FullCardNumberAndGeneration        `protobuf:"bytes,6,opt,name=card_number_and_gen_codriver_slot_begin,json=cardNumberAndGenCodriverSlotBegin,proto3" json:"card_number_and_gen_codriver_slot_begin,omitempty"`
	CardNumberAndGenDriverSlotEnd      *FullCardNumberAndGeneration        `protobuf:"bytes,7,opt,name=card_number_and_gen_driver_slot_end,json=cardNumberAndGenDriverSlotEnd,proto3" json:"card_number_and_gen_driver_slot_end,omitempty"`
	CardNumberAndGenCodriverSlotEnd    *FullCardNumberAndGeneration        `protobuf:"bytes,8,opt,name=card_number_and_gen_codriver_slot_end,json=cardNumberAndGenCodriverSlotEnd,proto3" json:"card_number_and_gen_codriver_slot_end,omitempty"`
	SimilarEventsNumber                uint32                              `protobuf:"varint,9,opt,name=similar_events_number,json=similarEventsNumber,proto3" json:"similar_events_number,omitempty"` // SimilarEventsNumber byte
	ManufacturerSpecificEventFaultData *ManufacturerSpecificEventFaultData `protobuf:"bytes,10,opt,name=manufacturer_specific_event_fault_data,json=manufacturerSpecificEventFaultData,proto3" json:"manufacturer_specific_event_fault_data,omitempty"`
}

func (x *VuEventRecordSecondGen) Reset() {
	*x = VuEventRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuEventRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuEventRecordSecondGen) ProtoMessage() {}

func (x *VuEventRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuEventRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuEventRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{144}
}

func (x *VuEventRecordSecondGen) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VuEventRecordSecondGen) GetEventRecordPurpose() uint32 {
	if x != nil {
		return x.EventRecordPurpose
	}
	return 0
}

func (x *VuEventRecordSecondGen) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *VuEventRecordSecondGen) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *VuEventRecordSecondGen) GetCardNumberAndGenDriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotBegin
	}
	return nil
}

func (x *VuEventRecordSecondGen) GetCardNumberAndGenCodriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotBegin
	}
	return nil
}

func (x *VuEventRecordSecondGen) GetCardNumberAndGenDriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotEnd
	}
	return nil
}

func (x *VuEventRecordSecondGen) GetCardNumberAndGenCodriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotEnd
	}
	return nil
}

func (x *VuEventRecordSecondGen) GetSimilarEventsNumber() uint32 {
	if x != nil {
		return x.SimilarEventsNumber
	}
	return 0
}

func (x *VuEventRecordSecondGen) GetManufacturerSpecificEventFaultData() *ManufacturerSpecificEventFaultData {
	if x != nil {
		return x.ManufacturerSpecificEventFaultData
	}
	return nil
}

type VuOverSpeedingControlDataRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                       `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                       `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                       `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuOverSpeedingControlData `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuOverSpeedingControlDataRecordArray) Reset() {
	*x = VuOverSpeedingControlDataRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingControlDataRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingControlDataRecordArray) ProtoMessage() {}

func (x *VuOverSpeedingControlDataRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingControlDataRecordArray.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingControlDataRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{145}
}

func (x *VuOverSpeedingControlDataRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuOverSpeedingControlDataRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuOverSpeedingControlDataRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuOverSpeedingControlDataRecordArray) GetRecords() []*VuOverSpeedingControlData {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuOverSpeedingEventRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuOverSpeedingEventRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuOverSpeedingEventRecordArray) Reset() {
	*x = VuOverSpeedingEventRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingEventRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingEventRecordArray) ProtoMessage() {}

func (x *VuOverSpeedingEventRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingEventRecordArray.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingEventRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{146}
}

func (x *VuOverSpeedingEventRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuOverSpeedingEventRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuOverSpeedingEventRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuOverSpeedingEventRecordArray) GetRecords() []*VuOverSpeedingEventRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuOverSpeedingEventRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                       uint32                       `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // EventFaultType byte
	EventRecordPurpose              uint32                       `protobuf:"varint,2,opt,name=event_record_purpose,json=eventRecordPurpose,proto3" json:"event_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	EventBeginTime                  int64                        `protobuf:"varint,3,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"`             // TimeReal
	EventEndTime                    int64                        `protobuf:"varint,4,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`                   // TimeReal
	MaxSpeedValue                   uint32                       `protobuf:"varint,5,opt,name=max_speed_value,json=maxSpeedValue,proto3" json:"max_speed_value,omitempty"`                // SpeedMax Speed byte
	AverageSpeedValue               uint32                       `protobuf:"varint,6,opt,name=average_speed_value,json=averageSpeedValue,proto3" json:"average_speed_value,omitempty"`    // SpeedAverage Speed byte
	CardNumberAndGenDriverSlotBegin *FullCardNumberAndGeneration `protobuf:"bytes,7,opt,name=card_number_and_gen_driver_slot_begin,json=cardNumberAndGenDriverSlotBegin,proto3" json:"card_number_and_gen_driver_slot_begin,omitempty"`
	SimilarEventsNumber             uint32                       `protobuf:"varint,8,opt,name=similar_events_number,json=similarEventsNumber,proto3" json:"similar_events_number,omitempty"` // SimilarEventsNumber byte
}

func (x *VuOverSpeedingEventRecordSecondGen) Reset() {
	*x = VuOverSpeedingEventRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuOverSpeedingEventRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuOverSpeedingEventRecordSecondGen) ProtoMessage() {}

func (x *VuOverSpeedingEventRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuOverSpeedingEventRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuOverSpeedingEventRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{147}
}

func (x *VuOverSpeedingEventRecordSecondGen) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetEventRecordPurpose() uint32 {
	if x != nil {
		return x.EventRecordPurpose
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetMaxSpeedValue() uint32 {
	if x != nil {
		return x.MaxSpeedValue
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetAverageSpeedValue() uint32 {
	if x != nil {
		return x.AverageSpeedValue
	}
	return 0
}

func (x *VuOverSpeedingEventRecordSecondGen) GetCardNumberAndGenDriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotBegin
	}
	return nil
}

func (x *VuOverSpeedingEventRecordSecondGen) GetSimilarEventsNumber() uint32 {
	if x != nil {
		return x.SimilarEventsNumber
	}
	return 0
}

type VuTimeAdjustmentRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                             `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                             `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                             `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuTimeAdjustmentRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuTimeAdjustmentRecordArray) Reset() {
	*x = VuTimeAdjustmentRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTimeAdjustmentRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTimeAdjustmentRecordArray) ProtoMessage() {}

func (x *VuTimeAdjustmentRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTimeAdjustmentRecordArray.ProtoReflect.Descriptor instead.
func (*VuTimeAdjustmentRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{148}
}

func (x *VuTimeAdjustmentRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuTimeAdjustmentRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuTimeAdjustmentRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuTimeAdjustmentRecordArray) GetRecords() []*VuTimeAdjustmentRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuTimeAdjustmentRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldTimeValue                    int64                        `protobuf:"varint,1,opt,name=old_time_value,json=oldTimeValue,proto3" json:"old_time_value,omitempty"`       // TimeReal
	NewTimeValue                    int64                        `protobuf:"varint,2,opt,name=new_time_value,json=newTimeValue,proto3" json:"new_time_value,omitempty"`       // TimeReal
	WorkshopName                    string                       `protobuf:"bytes,3,opt,name=workshop_name,json=workshopName,proto3" json:"workshop_name,omitempty"`          // Name (codepage + [35]byte), decoded string
	WorkshopAddress                 string                       `protobuf:"bytes,4,opt,name=workshop_address,json=workshopAddress,proto3" json:"workshop_address,omitempty"` // Address (codepage + [35]byte), decoded string
	WorkshopCardNumberAndGeneration *FullCardNumberAndGeneration `protobuf:"bytes,5,opt,name=workshop_card_number_and_generation,json=workshopCardNumberAndGeneration,proto3" json:"workshop_card_number_and_generation,omitempty"`
}

func (x *VuTimeAdjustmentRecordSecondGen) Reset() {
	*x = VuTimeAdjustmentRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTimeAdjustmentRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTimeAdjustmentRecordSecondGen) ProtoMessage() {}

func (x *VuTimeAdjustmentRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTimeAdjustmentRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuTimeAdjustmentRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{149}
}

func (x *VuTimeAdjustmentRecordSecondGen) GetOldTimeValue() int64 {
	if x != nil {
		return x.OldTimeValue
	}
	return 0
}

func (x *VuTimeAdjustmentRecordSecondGen) GetNewTimeValue() int64 {
	if x != nil {
		return x.NewTimeValue
	}
	return 0
}

func (x *VuTimeAdjustmentRecordSecondGen) GetWorkshopName() string {
	if x != nil {
		return x.WorkshopName
	}
	return ""
}

func (x *VuTimeAdjustmentRecordSecondGen) GetWorkshopAddress() string {
	if x != nil {
		return x.WorkshopAddress
	}
	return ""
}

func (x *VuTimeAdjustmentRecordSecondGen) GetWorkshopCardNumberAndGeneration() *FullCardNumberAndGeneration {
	if x != nil {
		return x.WorkshopCardNumberAndGeneration
	}
	return nil
}

type VuDetailedSpeedFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified            bool                 `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuDetailedSpeedData *VuDetailedSpeedData `protobuf:"bytes,2,opt,name=vu_detailed_speed_data,json=vuDetailedSpeedData,proto3" json:"vu_detailed_speed_data,omitempty"`
	Signature           *SignatureFirstGen   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VuDetailedSpeedFirstGen) Reset() {
	*x = VuDetailedSpeedFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDetailedSpeedFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDetailedSpeedFirstGen) ProtoMessage() {}

func (x *VuDetailedSpeedFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDetailedSpeedFirstGen.ProtoReflect.Descriptor instead.
func (*VuDetailedSpeedFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{150}
}

func (x *VuDetailedSpeedFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuDetailedSpeedFirstGen) GetVuDetailedSpeedData() *VuDetailedSpeedData {
	if x != nil {
		return x.VuDetailedSpeedData
	}
	return nil
}

func (x *VuDetailedSpeedFirstGen) GetSignature() *SignatureFirstGen {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VuDetailedSpeedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfSpeedBlocks       uint32                  `protobuf:"varint,1,opt,name=no_of_speed_blocks,json=noOfSpeedBlocks,proto3" json:"no_of_speed_blocks,omitempty"` // uint16
	VuDetailedSpeedBlocks []*VuDetailedSpeedBlock `protobuf:"bytes,2,rep,name=vu_detailed_speed_blocks,json=vuDetailedSpeedBlocks,proto3" json:"vu_detailed_speed_blocks,omitempty"`
}

func (x *VuDetailedSpeedData) Reset() {
	*x = VuDetailedSpeedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDetailedSpeedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDetailedSpeedData) ProtoMessage() {}

func (x *VuDetailedSpeedData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDetailedSpeedData.ProtoReflect.Descriptor instead.
func (*VuDetailedSpeedData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{151}
}

func (x *VuDetailedSpeedData) GetNoOfSpeedBlocks() uint32 {
	if x != nil {
		return x.NoOfSpeedBlocks
	}
	return 0
}

func (x *VuDetailedSpeedData) GetVuDetailedSpeedBlocks() []*VuDetailedSpeedBlock {
	if x != nil {
		return x.VuDetailedSpeedBlocks
	}
	return nil
}

type VuDetailedSpeedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedBlockBeginDate int64  `protobuf:"varint,1,opt,name=speed_block_begin_date,json=speedBlockBeginDate,proto3" json:"speed_block_begin_date,omitempty"` // TimeReal
	SpeedsPerSecond     []byte `protobuf:"bytes,2,opt,name=speeds_per_second,json=speedsPerSecond,proto3" json:"speeds_per_second,omitempty"`                // [60]Speed [60]byte
}

func (x *VuDetailedSpeedBlock) Reset() {
	*x = VuDetailedSpeedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDetailedSpeedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDetailedSpeedBlock) ProtoMessage() {}

func (x *VuDetailedSpeedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDetailedSpeedBlock.ProtoReflect.Descriptor instead.
func (*VuDetailedSpeedBlock) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{152}
}

func (x *VuDetailedSpeedBlock) GetSpeedBlockBeginDate() int64 {
	if x != nil {
		return x.SpeedBlockBeginDate
	}
	return 0
}

func (x *VuDetailedSpeedBlock) GetSpeedsPerSecond() []byte {
	if x != nil {
		return x.SpeedsPerSecond
	}
	return nil
}

type VuDetailedSpeedSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                        bool                             `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuDetailedSpeedBlockRecordArray *VuDetailedSpeedBlockRecordArray `protobuf:"bytes,2,opt,name=vu_detailed_speed_block_record_array,json=vuDetailedSpeedBlockRecordArray,proto3" json:"vu_detailed_speed_block_record_array,omitempty"`
	SignatureRecordArray            *SignatureRecordArray            `protobuf:"bytes,3,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuDetailedSpeedSecondGen) Reset() {
	*x = VuDetailedSpeedSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDetailedSpeedSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDetailedSpeedSecondGen) ProtoMessage() {}

func (x *VuDetailedSpeedSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDetailedSpeedSecondGen.ProtoReflect.Descriptor instead.
func (*VuDetailedSpeedSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{153}
}

func (x *VuDetailedSpeedSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuDetailedSpeedSecondGen) GetVuDetailedSpeedBlockRecordArray() *VuDetailedSpeedBlockRecordArray {
	if x != nil {
		return x.VuDetailedSpeedBlockRecordArray
	}
	return nil
}

func (x *VuDetailedSpeedSecondGen) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuDetailedSpeedBlockRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                  `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                  `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                  `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuDetailedSpeedBlock `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuDetailedSpeedBlockRecordArray) Reset() {
	*x = VuDetailedSpeedBlockRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuDetailedSpeedBlockRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuDetailedSpeedBlockRecordArray) ProtoMessage() {}

func (x *VuDetailedSpeedBlockRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuDetailedSpeedBlockRecordArray.ProtoReflect.Descriptor instead.
func (*VuDetailedSpeedBlockRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{154}
}

func (x *VuDetailedSpeedBlockRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuDetailedSpeedBlockRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuDetailedSpeedBlockRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuDetailedSpeedBlockRecordArray) GetRecords() []*VuDetailedSpeedBlock {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuTechnicalDataFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified          bool                      `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuIdentification  *VuIdentificationFirstGen `protobuf:"bytes,2,opt,name=vu_identification,json=vuIdentification,proto3" json:"vu_identification,omitempty"`
	SensorPaired      *SensorPaired             `protobuf:"bytes,3,opt,name=sensor_paired,json=sensorPaired,proto3" json:"sensor_paired,omitempty"`
	VuCalibrationData *VuCalibrationData        `protobuf:"bytes,4,opt,name=vu_calibration_data,json=vuCalibrationData,proto3" json:"vu_calibration_data,omitempty"`
	Signature         *SignatureFirstGen        `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VuTechnicalDataFirstGen) Reset() {
	*x = VuTechnicalDataFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTechnicalDataFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTechnicalDataFirstGen) ProtoMessage() {}

func (x *VuTechnicalDataFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTechnicalDataFirstGen.ProtoReflect.Descriptor instead.
func (*VuTechnicalDataFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{155}
}

func (x *VuTechnicalDataFirstGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuTechnicalDataFirstGen) GetVuIdentification() *VuIdentificationFirstGen {
	if x != nil {
		return x.VuIdentification
	}
	return nil
}

func (x *VuTechnicalDataFirstGen) GetSensorPaired() *SensorPaired {
	if x != nil {
		return x.SensorPaired
	}
	return nil
}

func (x *VuTechnicalDataFirstGen) GetVuCalibrationData() *VuCalibrationData {
	if x != nil {
		return x.VuCalibrationData
	}
	return nil
}

func (x *VuTechnicalDataFirstGen) GetSignature() *SignatureFirstGen {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VuIdentificationFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VuManufacturerName       string                        `protobuf:"bytes,1,opt,name=vu_manufacturer_name,json=vuManufacturerName,proto3" json:"vu_manufacturer_name,omitempty"`          // VuManufacturerName Name (codepage + [35]byte), decoded string
	VuManufacturerAddress    string                        `protobuf:"bytes,2,opt,name=vu_manufacturer_address,json=vuManufacturerAddress,proto3" json:"vu_manufacturer_address,omitempty"` // VuManufacturerAddress Address (codepage + [35]byte), decoded string
	VuPartNumber             string                        `protobuf:"bytes,3,opt,name=vu_part_number,json=vuPartNumber,proto3" json:"vu_part_number,omitempty"`                            // VuPartNumber [16]byte -> decoded string
	VuSerialNumber           *ExtendedSerialNumberFirstGen `protobuf:"bytes,4,opt,name=vu_serial_number,json=vuSerialNumber,proto3" json:"vu_serial_number,omitempty"`                      // VuSerialNumberFirstGen ExtendedSerialNumberFirstGen
	VuSoftwareIdentification *VuSoftwareIdentification     `protobuf:"bytes,5,opt,name=vu_software_identification,json=vuSoftwareIdentification,proto3" json:"vu_software_identification,omitempty"`
	VuManufacturingDate      int64                         `protobuf:"varint,7,opt,name=vu_manufacturing_date,json=vuManufacturingDate,proto3" json:"vu_manufacturing_date,omitempty"` // VuManufacturingDate TimeReal
	VuApprovalNumber         string                        `protobuf:"bytes,8,opt,name=vu_approval_number,json=vuApprovalNumber,proto3" json:"vu_approval_number,omitempty"`           // VuApprovalNumberFirstGen [8]byte, decoded string
}

func (x *VuIdentificationFirstGen) Reset() {
	*x = VuIdentificationFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuIdentificationFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuIdentificationFirstGen) ProtoMessage() {}

func (x *VuIdentificationFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuIdentificationFirstGen.ProtoReflect.Descriptor instead.
func (*VuIdentificationFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{156}
}

func (x *VuIdentificationFirstGen) GetVuManufacturerName() string {
	if x != nil {
		return x.VuManufacturerName
	}
	return ""
}

func (x *VuIdentificationFirstGen) GetVuManufacturerAddress() string {
	if x != nil {
		return x.VuManufacturerAddress
	}
	return ""
}

func (x *VuIdentificationFirstGen) GetVuPartNumber() string {
	if x != nil {
		return x.VuPartNumber
	}
	return ""
}

func (x *VuIdentificationFirstGen) GetVuSerialNumber() *ExtendedSerialNumberFirstGen {
	if x != nil {
		return x.VuSerialNumber
	}
	return nil
}

func (x *VuIdentificationFirstGen) GetVuSoftwareIdentification() *VuSoftwareIdentification {
	if x != nil {
		return x.VuSoftwareIdentification
	}
	return nil
}

func (x *VuIdentificationFirstGen) GetVuManufacturingDate() int64 {
	if x != nil {
		return x.VuManufacturingDate
	}
	return 0
}

func (x *VuIdentificationFirstGen) GetVuApprovalNumber() string {
	if x != nil {
		return x.VuApprovalNumber
	}
	return ""
}

type VuSoftwareIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VuSoftwareVersion      []byte `protobuf:"bytes,1,opt,name=vu_software_version,json=vuSoftwareVersion,proto3" json:"vu_software_version,omitempty"`                   // VuSoftwareVersion [4]byte
	VuSoftInstallationDate int64  `protobuf:"varint,2,opt,name=vu_soft_installation_date,json=vuSoftInstallationDate,proto3" json:"vu_soft_installation_date,omitempty"` // VuSoftInstallationDate TimeReal
}

func (x *VuSoftwareIdentification) Reset() {
	*x = VuSoftwareIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuSoftwareIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuSoftwareIdentification) ProtoMessage() {}

func (x *VuSoftwareIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuSoftwareIdentification.ProtoReflect.Descriptor instead.
func (*VuSoftwareIdentification) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{157}
}

func (x *VuSoftwareIdentification) GetVuSoftwareVersion() []byte {
	if x != nil {
		return x.VuSoftwareVersion
	}
	return nil
}

func (x *VuSoftwareIdentification) GetVuSoftInstallationDate() int64 {
	if x != nil {
		return x.VuSoftInstallationDate
	}
	return 0
}

type SensorPaired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorSerialNumber     *ExtendedSerialNumberFirstGen `protobuf:"bytes,1,opt,name=sensor_serial_number,json=sensorSerialNumber,proto3" json:"sensor_serial_number,omitempty"`                // SensorSerialNumberFirstGen ExtendedSerialNumberFirstGen
	SensorApprovalNumber   []byte                        `protobuf:"bytes,2,opt,name=sensor_approval_number,json=sensorApprovalNumber,proto3" json:"sensor_approval_number,omitempty"`          // SensorApprovalNumberFirstGen [8]byte
	SensorPairingDateFirst int64                         `protobuf:"varint,3,opt,name=sensor_pairing_date_first,json=sensorPairingDateFirst,proto3" json:"sensor_pairing_date_first,omitempty"` // SensorPairingDate TimeReal
}

func (x *SensorPaired) Reset() {
	*x = SensorPaired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorPaired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorPaired) ProtoMessage() {}

func (x *SensorPaired) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorPaired.ProtoReflect.Descriptor instead.
func (*SensorPaired) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{158}
}

func (x *SensorPaired) GetSensorSerialNumber() *ExtendedSerialNumberFirstGen {
	if x != nil {
		return x.SensorSerialNumber
	}
	return nil
}

func (x *SensorPaired) GetSensorApprovalNumber() []byte {
	if x != nil {
		return x.SensorApprovalNumber
	}
	return nil
}

func (x *SensorPaired) GetSensorPairingDateFirst() int64 {
	if x != nil {
		return x.SensorPairingDateFirst
	}
	return 0
}

type VuCalibrationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOfVuCalibrationRecords uint32                         `protobuf:"varint,1,opt,name=no_of_vu_calibration_records,json=noOfVuCalibrationRecords,proto3" json:"no_of_vu_calibration_records,omitempty"` // byte
	VuCalibrationRecords     []*VuCalibrationRecordFirstGen `protobuf:"bytes,2,rep,name=vu_calibration_records,json=vuCalibrationRecords,proto3" json:"vu_calibration_records,omitempty"`
}

func (x *VuCalibrationData) Reset() {
	*x = VuCalibrationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationData) ProtoMessage() {}

func (x *VuCalibrationData) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationData.ProtoReflect.Descriptor instead.
func (*VuCalibrationData) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{159}
}

func (x *VuCalibrationData) GetNoOfVuCalibrationRecords() uint32 {
	if x != nil {
		return x.NoOfVuCalibrationRecords
	}
	return 0
}

func (x *VuCalibrationData) GetVuCalibrationRecords() []*VuCalibrationRecordFirstGen {
	if x != nil {
		return x.VuCalibrationRecords
	}
	return nil
}

type VuCalibrationRecordFirstGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationPurpose                uint32                             `protobuf:"varint,1,opt,name=calibration_purpose,json=calibrationPurpose,proto3" json:"calibration_purpose,omitempty"` // CalibrationPurpose byte
	WorkshopName                      string                             `protobuf:"bytes,2,opt,name=workshop_name,json=workshopName,proto3" json:"workshop_name,omitempty"`                    // Name (codepage + [35]byte), decoded string
	WorkshopAddress                   string                             `protobuf:"bytes,3,opt,name=workshop_address,json=workshopAddress,proto3" json:"workshop_address,omitempty"`           // Address (codepage + [35]byte), decoded string
	WorkshopCardNumber                *FullCardNumber                    `protobuf:"bytes,4,opt,name=workshop_card_number,json=workshopCardNumber,proto3" json:"workshop_card_number,omitempty"`
	WorkshopCardExpiryDate            int64                              `protobuf:"varint,5,opt,name=workshop_card_expiry_date,json=workshopCardExpiryDate,proto3" json:"workshop_card_expiry_date,omitempty"`             //  TimeReal
	VehicleIdentificationNumber       string                             `protobuf:"bytes,6,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber,proto3" json:"vehicle_identification_number,omitempty"` // VehicleIdentificationNumber [17]byte, decoded string
	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,7,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	WVehicleCharacteristicConstant    uint32                             `protobuf:"varint,8,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant,proto3" json:"w_vehicle_characteristic_constant,omitempty"` // WVehicleCharacteristicConstant uint16
	KConstantOfRecordingEquipment     uint32                             `protobuf:"varint,9,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment,proto3" json:"k_constant_of_recording_equipment,omitempty"`  // KConstantOfRecordingEquipment uint16
	LTyreCircumference                uint32                             `protobuf:"varint,10,opt,name=l_tyre_circumference,json=lTyreCircumference,proto3" json:"l_tyre_circumference,omitempty"`                                      // LTyreCircumference uint16
	TyreSize                          string                             `protobuf:"bytes,11,opt,name=tyre_size,json=tyreSize,proto3" json:"tyre_size,omitempty"`                                                                       // TyreSize [15]byte, decoded string
	AuthorisedSpeed                   uint32                             `protobuf:"varint,12,opt,name=authorised_speed,json=authorisedSpeed,proto3" json:"authorised_speed,omitempty"`                                                 // SpeedAuthorised Speed byte
	OldOdometerValue                  uint32                             `protobuf:"varint,13,opt,name=old_odometer_value,json=oldOdometerValue,proto3" json:"old_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	NewOdometerValue                  uint32                             `protobuf:"varint,14,opt,name=new_odometer_value,json=newOdometerValue,proto3" json:"new_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	OldTimeValue                      int64                              `protobuf:"varint,15,opt,name=old_time_value,json=oldTimeValue,proto3" json:"old_time_value,omitempty"`                                                        //  TimeReal
	NewTimeValue                      int64                              `protobuf:"varint,16,opt,name=new_time_value,json=newTimeValue,proto3" json:"new_time_value,omitempty"`                                                        //  TimeReal
	NextCalibrationDate               int64                              `protobuf:"varint,17,opt,name=next_calibration_date,json=nextCalibrationDate,proto3" json:"next_calibration_date,omitempty"`                                   //  TimeReal
}

func (x *VuCalibrationRecordFirstGen) Reset() {
	*x = VuCalibrationRecordFirstGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationRecordFirstGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationRecordFirstGen) ProtoMessage() {}

func (x *VuCalibrationRecordFirstGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationRecordFirstGen.ProtoReflect.Descriptor instead.
func (*VuCalibrationRecordFirstGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{160}
}

func (x *VuCalibrationRecordFirstGen) GetCalibrationPurpose() uint32 {
	if x != nil {
		return x.CalibrationPurpose
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetWorkshopName() string {
	if x != nil {
		return x.WorkshopName
	}
	return ""
}

func (x *VuCalibrationRecordFirstGen) GetWorkshopAddress() string {
	if x != nil {
		return x.WorkshopAddress
	}
	return ""
}

func (x *VuCalibrationRecordFirstGen) GetWorkshopCardNumber() *FullCardNumber {
	if x != nil {
		return x.WorkshopCardNumber
	}
	return nil
}

func (x *VuCalibrationRecordFirstGen) GetWorkshopCardExpiryDate() int64 {
	if x != nil {
		return x.WorkshopCardExpiryDate
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetVehicleIdentificationNumber() string {
	if x != nil {
		return x.VehicleIdentificationNumber
	}
	return ""
}

func (x *VuCalibrationRecordFirstGen) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *VuCalibrationRecordFirstGen) GetWVehicleCharacteristicConstant() uint32 {
	if x != nil {
		return x.WVehicleCharacteristicConstant
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetKConstantOfRecordingEquipment() uint32 {
	if x != nil {
		return x.KConstantOfRecordingEquipment
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetLTyreCircumference() uint32 {
	if x != nil {
		return x.LTyreCircumference
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetTyreSize() string {
	if x != nil {
		return x.TyreSize
	}
	return ""
}

func (x *VuCalibrationRecordFirstGen) GetAuthorisedSpeed() uint32 {
	if x != nil {
		return x.AuthorisedSpeed
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetOldOdometerValue() uint32 {
	if x != nil {
		return x.OldOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetNewOdometerValue() uint32 {
	if x != nil {
		return x.NewOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetOldTimeValue() int64 {
	if x != nil {
		return x.OldTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetNewTimeValue() int64 {
	if x != nil {
		return x.NewTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordFirstGen) GetNextCalibrationDate() int64 {
	if x != nil {
		return x.NextCalibrationDate
	}
	return 0
}

type VuTechnicalDataSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                               bool                                    `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuIdentificationRecordArray            *VuIdentificationRecordArray            `protobuf:"bytes,2,opt,name=vu_identification_record_array,json=vuIdentificationRecordArray,proto3" json:"vu_identification_record_array,omitempty"`
	VuSensorPairedRecordArray              *VuSensorPairedRecordArray              `protobuf:"bytes,3,opt,name=vu_sensor_paired_record_array,json=vuSensorPairedRecordArray,proto3" json:"vu_sensor_paired_record_array,omitempty"`
	VuSensorExternalGnssCoupledRecordArray *VuSensorExternalGNSSCoupledRecordArray `protobuf:"bytes,4,opt,name=vu_sensor_external_gnss_coupled_record_array,json=vuSensorExternalGnssCoupledRecordArray,proto3" json:"vu_sensor_external_gnss_coupled_record_array,omitempty"`
	VuCalibrationRecordArray               *VuCalibrationRecordArray               `protobuf:"bytes,5,opt,name=vu_calibration_record_array,json=vuCalibrationRecordArray,proto3" json:"vu_calibration_record_array,omitempty"`
	VuCardRecordArray                      *VuCardRecordArray                      `protobuf:"bytes,6,opt,name=vu_card_record_array,json=vuCardRecordArray,proto3" json:"vu_card_record_array,omitempty"`
	VuItsConsentRecordArray                *VuITSConsentRecordArray                `protobuf:"bytes,7,opt,name=vu_its_consent_record_array,json=vuItsConsentRecordArray,proto3" json:"vu_its_consent_record_array,omitempty"`
	VuPowerSupplyInterruptionRecordArray   *VuPowerSupplyInterruptionRecordArray   `protobuf:"bytes,8,opt,name=vu_power_supply_interruption_record_array,json=vuPowerSupplyInterruptionRecordArray,proto3" json:"vu_power_supply_interruption_record_array,omitempty"`
	SignatureRecordArray                   *SignatureRecordArray                   `protobuf:"bytes,9,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuTechnicalDataSecondGen) Reset() {
	*x = VuTechnicalDataSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTechnicalDataSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTechnicalDataSecondGen) ProtoMessage() {}

func (x *VuTechnicalDataSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTechnicalDataSecondGen.ProtoReflect.Descriptor instead.
func (*VuTechnicalDataSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{161}
}

func (x *VuTechnicalDataSecondGen) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuTechnicalDataSecondGen) GetVuIdentificationRecordArray() *VuIdentificationRecordArray {
	if x != nil {
		return x.VuIdentificationRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuSensorPairedRecordArray() *VuSensorPairedRecordArray {
	if x != nil {
		return x.VuSensorPairedRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuSensorExternalGnssCoupledRecordArray() *VuSensorExternalGNSSCoupledRecordArray {
	if x != nil {
		return x.VuSensorExternalGnssCoupledRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuCalibrationRecordArray() *VuCalibrationRecordArray {
	if x != nil {
		return x.VuCalibrationRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuCardRecordArray() *VuCardRecordArray {
	if x != nil {
		return x.VuCardRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuItsConsentRecordArray() *VuITSConsentRecordArray {
	if x != nil {
		return x.VuItsConsentRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetVuPowerSupplyInterruptionRecordArray() *VuPowerSupplyInterruptionRecordArray {
	if x != nil {
		return x.VuPowerSupplyInterruptionRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGen) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuTechnicalDataSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified                               bool                                    `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	VuIdentificationRecordArray            *VuIdentificationRecordArrayV2          `protobuf:"bytes,2,opt,name=vu_identification_record_array,json=vuIdentificationRecordArray,proto3" json:"vu_identification_record_array,omitempty"`
	VuSensorPairedRecordArray              *VuSensorPairedRecordArray              `protobuf:"bytes,3,opt,name=vu_sensor_paired_record_array,json=vuSensorPairedRecordArray,proto3" json:"vu_sensor_paired_record_array,omitempty"`
	VuSensorExternalGnssCoupledRecordArray *VuSensorExternalGNSSCoupledRecordArray `protobuf:"bytes,4,opt,name=vu_sensor_external_gnss_coupled_record_array,json=vuSensorExternalGnssCoupledRecordArray,proto3" json:"vu_sensor_external_gnss_coupled_record_array,omitempty"`
	VuCalibrationRecordArray               *VuCalibrationRecordArrayV2             `protobuf:"bytes,5,opt,name=vu_calibration_record_array,json=vuCalibrationRecordArray,proto3" json:"vu_calibration_record_array,omitempty"`
	VuCardRecordArray                      *VuCardRecordArray                      `protobuf:"bytes,6,opt,name=vu_card_record_array,json=vuCardRecordArray,proto3" json:"vu_card_record_array,omitempty"`
	VuItsConsentRecordArray                *VuITSConsentRecordArray                `protobuf:"bytes,7,opt,name=vu_its_consent_record_array,json=vuItsConsentRecordArray,proto3" json:"vu_its_consent_record_array,omitempty"`
	VuPowerSupplyInterruptionRecordArray   *VuPowerSupplyInterruptionRecordArray   `protobuf:"bytes,8,opt,name=vu_power_supply_interruption_record_array,json=vuPowerSupplyInterruptionRecordArray,proto3" json:"vu_power_supply_interruption_record_array,omitempty"`
	SignatureRecordArray                   *SignatureRecordArray                   `protobuf:"bytes,9,opt,name=signature_record_array,json=signatureRecordArray,proto3" json:"signature_record_array,omitempty"`
}

func (x *VuTechnicalDataSecondGenV2) Reset() {
	*x = VuTechnicalDataSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuTechnicalDataSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuTechnicalDataSecondGenV2) ProtoMessage() {}

func (x *VuTechnicalDataSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuTechnicalDataSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuTechnicalDataSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{162}
}

func (x *VuTechnicalDataSecondGenV2) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VuTechnicalDataSecondGenV2) GetVuIdentificationRecordArray() *VuIdentificationRecordArrayV2 {
	if x != nil {
		return x.VuIdentificationRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuSensorPairedRecordArray() *VuSensorPairedRecordArray {
	if x != nil {
		return x.VuSensorPairedRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuSensorExternalGnssCoupledRecordArray() *VuSensorExternalGNSSCoupledRecordArray {
	if x != nil {
		return x.VuSensorExternalGnssCoupledRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuCalibrationRecordArray() *VuCalibrationRecordArrayV2 {
	if x != nil {
		return x.VuCalibrationRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuCardRecordArray() *VuCardRecordArray {
	if x != nil {
		return x.VuCardRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuItsConsentRecordArray() *VuITSConsentRecordArray {
	if x != nil {
		return x.VuItsConsentRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetVuPowerSupplyInterruptionRecordArray() *VuPowerSupplyInterruptionRecordArray {
	if x != nil {
		return x.VuPowerSupplyInterruptionRecordArray
	}
	return nil
}

func (x *VuTechnicalDataSecondGenV2) GetSignatureRecordArray() *SignatureRecordArray {
	if x != nil {
		return x.SignatureRecordArray
	}
	return nil
}

type VuIdentificationRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                       `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                       `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                       `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuIdentificationSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuIdentificationRecordArray) Reset() {
	*x = VuIdentificationRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuIdentificationRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuIdentificationRecordArray) ProtoMessage() {}

func (x *VuIdentificationRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuIdentificationRecordArray.ProtoReflect.Descriptor instead.
func (*VuIdentificationRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{163}
}

func (x *VuIdentificationRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuIdentificationRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuIdentificationRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuIdentificationRecordArray) GetRecords() []*VuIdentificationSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuIdentificationSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VuManufacturerName       string                         `protobuf:"bytes,1,opt,name=vu_manufacturer_name,json=vuManufacturerName,proto3" json:"vu_manufacturer_name,omitempty"`          // VuManufacturerName Name (codepage + [35]byte), decoded string
	VuManufacturerAddress    string                         `protobuf:"bytes,2,opt,name=vu_manufacturer_address,json=vuManufacturerAddress,proto3" json:"vu_manufacturer_address,omitempty"` // VuManufacturerAddress Address (codepage + [35]byte), decoded string
	VuPartNumber             string                         `protobuf:"bytes,3,opt,name=vu_part_number,json=vuPartNumber,proto3" json:"vu_part_number,omitempty"`                            // VuPartNumber [16]byte, decoded string
	VuSerialNumber           *ExtendedSerialNumberSecondGen `protobuf:"bytes,4,opt,name=vu_serial_number,json=vuSerialNumber,proto3" json:"vu_serial_number,omitempty"`                      // VuSerialNumberSecondGen
	VuSoftwareIdentification *VuSoftwareIdentification      `protobuf:"bytes,5,opt,name=vu_software_identification,json=vuSoftwareIdentification,proto3" json:"vu_software_identification,omitempty"`
	VuManufacturingDate      int64                          `protobuf:"varint,6,opt,name=vu_manufacturing_date,json=vuManufacturingDate,proto3" json:"vu_manufacturing_date,omitempty"` // VuManufacturingDate TimeReal
	VuApprovalNumber         string                         `protobuf:"bytes,7,opt,name=vu_approval_number,json=vuApprovalNumber,proto3" json:"vu_approval_number,omitempty"`           // VuApprovalNumberSecondGen [16]byte, decoded string
	VuGeneration             uint32                         `protobuf:"varint,8,opt,name=vu_generation,json=vuGeneration,proto3" json:"vu_generation,omitempty"`                        // Generation byte
	VuAbility                uint32                         `protobuf:"varint,9,opt,name=vu_ability,json=vuAbility,proto3" json:"vu_ability,omitempty"`                                 // VuAbility byte
}

func (x *VuIdentificationSecondGen) Reset() {
	*x = VuIdentificationSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuIdentificationSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuIdentificationSecondGen) ProtoMessage() {}

func (x *VuIdentificationSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuIdentificationSecondGen.ProtoReflect.Descriptor instead.
func (*VuIdentificationSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{164}
}

func (x *VuIdentificationSecondGen) GetVuManufacturerName() string {
	if x != nil {
		return x.VuManufacturerName
	}
	return ""
}

func (x *VuIdentificationSecondGen) GetVuManufacturerAddress() string {
	if x != nil {
		return x.VuManufacturerAddress
	}
	return ""
}

func (x *VuIdentificationSecondGen) GetVuPartNumber() string {
	if x != nil {
		return x.VuPartNumber
	}
	return ""
}

func (x *VuIdentificationSecondGen) GetVuSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.VuSerialNumber
	}
	return nil
}

func (x *VuIdentificationSecondGen) GetVuSoftwareIdentification() *VuSoftwareIdentification {
	if x != nil {
		return x.VuSoftwareIdentification
	}
	return nil
}

func (x *VuIdentificationSecondGen) GetVuManufacturingDate() int64 {
	if x != nil {
		return x.VuManufacturingDate
	}
	return 0
}

func (x *VuIdentificationSecondGen) GetVuApprovalNumber() string {
	if x != nil {
		return x.VuApprovalNumber
	}
	return ""
}

func (x *VuIdentificationSecondGen) GetVuGeneration() uint32 {
	if x != nil {
		return x.VuGeneration
	}
	return 0
}

func (x *VuIdentificationSecondGen) GetVuAbility() uint32 {
	if x != nil {
		return x.VuAbility
	}
	return 0
}

type VuIdentificationRecordArrayV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                         `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                         `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                         `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuIdentificationSecondGenV2 `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuIdentificationRecordArrayV2) Reset() {
	*x = VuIdentificationRecordArrayV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuIdentificationRecordArrayV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuIdentificationRecordArrayV2) ProtoMessage() {}

func (x *VuIdentificationRecordArrayV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuIdentificationRecordArrayV2.ProtoReflect.Descriptor instead.
func (*VuIdentificationRecordArrayV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{165}
}

func (x *VuIdentificationRecordArrayV2) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuIdentificationRecordArrayV2) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuIdentificationRecordArrayV2) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuIdentificationRecordArrayV2) GetRecords() []*VuIdentificationSecondGenV2 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuIdentificationSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VuManufacturerName       string                         `protobuf:"bytes,1,opt,name=vu_manufacturer_name,json=vuManufacturerName,proto3" json:"vu_manufacturer_name,omitempty"`          // VuManufacturerName Name (codepage + [35]byte), decoded string
	VuManufacturerAddress    string                         `protobuf:"bytes,2,opt,name=vu_manufacturer_address,json=vuManufacturerAddress,proto3" json:"vu_manufacturer_address,omitempty"` // VuManufacturerAddress Address (codepage + [35]byte), decoded string
	VuPartNumber             string                         `protobuf:"bytes,3,opt,name=vu_part_number,json=vuPartNumber,proto3" json:"vu_part_number,omitempty"`                            // VuPartNumber [16]byte, decoded string
	VuSerialNumber           *ExtendedSerialNumberSecondGen `protobuf:"bytes,4,opt,name=vu_serial_number,json=vuSerialNumber,proto3" json:"vu_serial_number,omitempty"`                      // VuSerialNumberSecondGen
	VuSoftwareIdentification *VuSoftwareIdentification      `protobuf:"bytes,5,opt,name=vu_software_identification,json=vuSoftwareIdentification,proto3" json:"vu_software_identification,omitempty"`
	VuManufacturingDate      int64                          `protobuf:"varint,6,opt,name=vu_manufacturing_date,json=vuManufacturingDate,proto3" json:"vu_manufacturing_date,omitempty"`   // VuManufacturingDate TimeReal
	VuApprovalNumber         string                         `protobuf:"bytes,7,opt,name=vu_approval_number,json=vuApprovalNumber,proto3" json:"vu_approval_number,omitempty"`             // VuApprovalNumberSecondGen [16]byte, decoded string
	VuGeneration             uint32                         `protobuf:"varint,8,opt,name=vu_generation,json=vuGeneration,proto3" json:"vu_generation,omitempty"`                          // Generation byte
	VuAbility                uint32                         `protobuf:"varint,9,opt,name=vu_ability,json=vuAbility,proto3" json:"vu_ability,omitempty"`                                   // VuAbility byte
	VuDigitalMapVersion      string                         `protobuf:"bytes,10,opt,name=vu_digital_map_version,json=vuDigitalMapVersion,proto3" json:"vu_digital_map_version,omitempty"` // VuDigitalMapVersion [12]byte, decoded string
}

func (x *VuIdentificationSecondGenV2) Reset() {
	*x = VuIdentificationSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuIdentificationSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuIdentificationSecondGenV2) ProtoMessage() {}

func (x *VuIdentificationSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuIdentificationSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuIdentificationSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{166}
}

func (x *VuIdentificationSecondGenV2) GetVuManufacturerName() string {
	if x != nil {
		return x.VuManufacturerName
	}
	return ""
}

func (x *VuIdentificationSecondGenV2) GetVuManufacturerAddress() string {
	if x != nil {
		return x.VuManufacturerAddress
	}
	return ""
}

func (x *VuIdentificationSecondGenV2) GetVuPartNumber() string {
	if x != nil {
		return x.VuPartNumber
	}
	return ""
}

func (x *VuIdentificationSecondGenV2) GetVuSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.VuSerialNumber
	}
	return nil
}

func (x *VuIdentificationSecondGenV2) GetVuSoftwareIdentification() *VuSoftwareIdentification {
	if x != nil {
		return x.VuSoftwareIdentification
	}
	return nil
}

func (x *VuIdentificationSecondGenV2) GetVuManufacturingDate() int64 {
	if x != nil {
		return x.VuManufacturingDate
	}
	return 0
}

func (x *VuIdentificationSecondGenV2) GetVuApprovalNumber() string {
	if x != nil {
		return x.VuApprovalNumber
	}
	return ""
}

func (x *VuIdentificationSecondGenV2) GetVuGeneration() uint32 {
	if x != nil {
		return x.VuGeneration
	}
	return 0
}

func (x *VuIdentificationSecondGenV2) GetVuAbility() uint32 {
	if x != nil {
		return x.VuAbility
	}
	return 0
}

func (x *VuIdentificationSecondGenV2) GetVuDigitalMapVersion() string {
	if x != nil {
		return x.VuDigitalMapVersion
	}
	return ""
}

type VuSensorPairedRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*SensorPairedRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuSensorPairedRecordArray) Reset() {
	*x = VuSensorPairedRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuSensorPairedRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuSensorPairedRecordArray) ProtoMessage() {}

func (x *VuSensorPairedRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuSensorPairedRecordArray.ProtoReflect.Descriptor instead.
func (*VuSensorPairedRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{167}
}

func (x *VuSensorPairedRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuSensorPairedRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuSensorPairedRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuSensorPairedRecordArray) GetRecords() []*SensorPairedRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type SensorPairedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorSerialNumber   *ExtendedSerialNumberSecondGen `protobuf:"bytes,1,opt,name=sensor_serial_number,json=sensorSerialNumber,proto3" json:"sensor_serial_number,omitempty"`       // SensorSerialNumberSecondGen ExtendedSerialNumberSecondGen
	SensorApprovalNumber []byte                         `protobuf:"bytes,2,opt,name=sensor_approval_number,json=sensorApprovalNumber,proto3" json:"sensor_approval_number,omitempty"` // SensorApprovalNumberSecondGen [16]byte
	SensorPairingDate    int64                          `protobuf:"varint,3,opt,name=sensor_pairing_date,json=sensorPairingDate,proto3" json:"sensor_pairing_date,omitempty"`         // SensorPairingDate TimeReal
}

func (x *SensorPairedRecord) Reset() {
	*x = SensorPairedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorPairedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorPairedRecord) ProtoMessage() {}

func (x *SensorPairedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorPairedRecord.ProtoReflect.Descriptor instead.
func (*SensorPairedRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{168}
}

func (x *SensorPairedRecord) GetSensorSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.SensorSerialNumber
	}
	return nil
}

func (x *SensorPairedRecord) GetSensorApprovalNumber() []byte {
	if x != nil {
		return x.SensorApprovalNumber
	}
	return nil
}

func (x *SensorPairedRecord) GetSensorPairingDate() int64 {
	if x != nil {
		return x.SensorPairingDate
	}
	return 0
}

type VuSensorExternalGNSSCoupledRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                             `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                             `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                             `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*SensorExternalGNSSCoupledRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuSensorExternalGNSSCoupledRecordArray) Reset() {
	*x = VuSensorExternalGNSSCoupledRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuSensorExternalGNSSCoupledRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuSensorExternalGNSSCoupledRecordArray) ProtoMessage() {}

func (x *VuSensorExternalGNSSCoupledRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuSensorExternalGNSSCoupledRecordArray.ProtoReflect.Descriptor instead.
func (*VuSensorExternalGNSSCoupledRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{169}
}

func (x *VuSensorExternalGNSSCoupledRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuSensorExternalGNSSCoupledRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuSensorExternalGNSSCoupledRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuSensorExternalGNSSCoupledRecordArray) GetRecords() []*SensorExternalGNSSCoupledRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type SensorExternalGNSSCoupledRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorSerialNumber   *ExtendedSerialNumberSecondGen `protobuf:"bytes,1,opt,name=sensor_serial_number,json=sensorSerialNumber,proto3" json:"sensor_serial_number,omitempty"`       // SensorGNSSSerialNumber ExtendedSerialNumberSecondGen
	SensorApprovalNumber string                         `protobuf:"bytes,2,opt,name=sensor_approval_number,json=sensorApprovalNumber,proto3" json:"sensor_approval_number,omitempty"` // SensorExternalGNSSApprovalNumber [16]byte, decoded string
	SensorCouplingDate   int64                          `protobuf:"varint,3,opt,name=sensor_coupling_date,json=sensorCouplingDate,proto3" json:"sensor_coupling_date,omitempty"`      // SensorGNSSCouplingDate TimeReal
}

func (x *SensorExternalGNSSCoupledRecord) Reset() {
	*x = SensorExternalGNSSCoupledRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorExternalGNSSCoupledRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorExternalGNSSCoupledRecord) ProtoMessage() {}

func (x *SensorExternalGNSSCoupledRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorExternalGNSSCoupledRecord.ProtoReflect.Descriptor instead.
func (*SensorExternalGNSSCoupledRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{170}
}

func (x *SensorExternalGNSSCoupledRecord) GetSensorSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.SensorSerialNumber
	}
	return nil
}

func (x *SensorExternalGNSSCoupledRecord) GetSensorApprovalNumber() string {
	if x != nil {
		return x.SensorApprovalNumber
	}
	return ""
}

func (x *SensorExternalGNSSCoupledRecord) GetSensorCouplingDate() int64 {
	if x != nil {
		return x.SensorCouplingDate
	}
	return 0
}

type VuCalibrationRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                          `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                          `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                          `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuCalibrationRecordSecondGen `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuCalibrationRecordArray) Reset() {
	*x = VuCalibrationRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationRecordArray) ProtoMessage() {}

func (x *VuCalibrationRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationRecordArray.ProtoReflect.Descriptor instead.
func (*VuCalibrationRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{171}
}

func (x *VuCalibrationRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCalibrationRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCalibrationRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCalibrationRecordArray) GetRecords() []*VuCalibrationRecordSecondGen {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCalibrationRecordSecondGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationPurpose                uint32                             `protobuf:"varint,1,opt,name=calibration_purpose,json=calibrationPurpose,proto3" json:"calibration_purpose,omitempty"` // CalibrationPurpose byte
	WorkshopName                      string                             `protobuf:"bytes,2,opt,name=workshop_name,json=workshopName,proto3" json:"workshop_name,omitempty"`                    // Name (codepage + [35]byte), decoded string
	WorkshopAddress                   string                             `protobuf:"bytes,3,opt,name=workshop_address,json=workshopAddress,proto3" json:"workshop_address,omitempty"`           // Address (codepage + [35]byte), decoded string
	WorkshopCardNumber                *FullCardNumber                    `protobuf:"bytes,4,opt,name=workshop_card_number,json=workshopCardNumber,proto3" json:"workshop_card_number,omitempty"`
	WorkshopCardExpiryDate            int64                              `protobuf:"varint,5,opt,name=workshop_card_expiry_date,json=workshopCardExpiryDate,proto3" json:"workshop_card_expiry_date,omitempty"`             //  TimeReal
	VehicleIdentificationNumber       string                             `protobuf:"bytes,6,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber,proto3" json:"vehicle_identification_number,omitempty"` // VehicleIdentificationNumber [17]byte, decoded string
	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,7,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	WVehicleCharacteristicConstant    uint32                             `protobuf:"varint,8,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant,proto3" json:"w_vehicle_characteristic_constant,omitempty"` // WVehicleCharacteristicConstant uint16
	KConstantOfRecordingEquipment     uint32                             `protobuf:"varint,9,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment,proto3" json:"k_constant_of_recording_equipment,omitempty"`  // KConstantOfRecordingEquipment uint16
	LTyreCircumference                uint32                             `protobuf:"varint,10,opt,name=l_tyre_circumference,json=lTyreCircumference,proto3" json:"l_tyre_circumference,omitempty"`                                      // LTyreCircumference uint16
	TyreSize                          string                             `protobuf:"bytes,11,opt,name=tyre_size,json=tyreSize,proto3" json:"tyre_size,omitempty"`                                                                       // TyreSize [15]byte, decoded string
	AuthorisedSpeed                   uint32                             `protobuf:"varint,12,opt,name=authorised_speed,json=authorisedSpeed,proto3" json:"authorised_speed,omitempty"`                                                 // SpeedAuthorised Speed byte
	OldOdometerValue                  uint32                             `protobuf:"varint,13,opt,name=old_odometer_value,json=oldOdometerValue,proto3" json:"old_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	NewOdometerValue                  uint32                             `protobuf:"varint,14,opt,name=new_odometer_value,json=newOdometerValue,proto3" json:"new_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	OldTimeValue                      int64                              `protobuf:"varint,15,opt,name=old_time_value,json=oldTimeValue,proto3" json:"old_time_value,omitempty"`                                                        //  TimeReal
	NewTimeValue                      int64                              `protobuf:"varint,16,opt,name=new_time_value,json=newTimeValue,proto3" json:"new_time_value,omitempty"`                                                        //  TimeReal
	NextCalibrationDate               int64                              `protobuf:"varint,17,opt,name=next_calibration_date,json=nextCalibrationDate,proto3" json:"next_calibration_date,omitempty"`                                   //  TimeReal
	SealDataVu                        []*SealRecord                      `protobuf:"bytes,18,rep,name=seal_data_vu,json=sealDataVu,proto3" json:"seal_data_vu,omitempty"`                                                               // SealDataVu [5]struct{...}
}

func (x *VuCalibrationRecordSecondGen) Reset() {
	*x = VuCalibrationRecordSecondGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationRecordSecondGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationRecordSecondGen) ProtoMessage() {}

func (x *VuCalibrationRecordSecondGen) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationRecordSecondGen.ProtoReflect.Descriptor instead.
func (*VuCalibrationRecordSecondGen) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{172}
}

func (x *VuCalibrationRecordSecondGen) GetCalibrationPurpose() uint32 {
	if x != nil {
		return x.CalibrationPurpose
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetWorkshopName() string {
	if x != nil {
		return x.WorkshopName
	}
	return ""
}

func (x *VuCalibrationRecordSecondGen) GetWorkshopAddress() string {
	if x != nil {
		return x.WorkshopAddress
	}
	return ""
}

func (x *VuCalibrationRecordSecondGen) GetWorkshopCardNumber() *FullCardNumber {
	if x != nil {
		return x.WorkshopCardNumber
	}
	return nil
}

func (x *VuCalibrationRecordSecondGen) GetWorkshopCardExpiryDate() int64 {
	if x != nil {
		return x.WorkshopCardExpiryDate
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetVehicleIdentificationNumber() string {
	if x != nil {
		return x.VehicleIdentificationNumber
	}
	return ""
}

func (x *VuCalibrationRecordSecondGen) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *VuCalibrationRecordSecondGen) GetWVehicleCharacteristicConstant() uint32 {
	if x != nil {
		return x.WVehicleCharacteristicConstant
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetKConstantOfRecordingEquipment() uint32 {
	if x != nil {
		return x.KConstantOfRecordingEquipment
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetLTyreCircumference() uint32 {
	if x != nil {
		return x.LTyreCircumference
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetTyreSize() string {
	if x != nil {
		return x.TyreSize
	}
	return ""
}

func (x *VuCalibrationRecordSecondGen) GetAuthorisedSpeed() uint32 {
	if x != nil {
		return x.AuthorisedSpeed
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetOldOdometerValue() uint32 {
	if x != nil {
		return x.OldOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetNewOdometerValue() uint32 {
	if x != nil {
		return x.NewOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetOldTimeValue() int64 {
	if x != nil {
		return x.OldTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetNewTimeValue() int64 {
	if x != nil {
		return x.NewTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetNextCalibrationDate() int64 {
	if x != nil {
		return x.NextCalibrationDate
	}
	return 0
}

func (x *VuCalibrationRecordSecondGen) GetSealDataVu() []*SealRecord {
	if x != nil {
		return x.SealDataVu
	}
	return nil
}

type VuCalibrationRecordArrayV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                            `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                            `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                            `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuCalibrationRecordSecondGenV2 `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuCalibrationRecordArrayV2) Reset() {
	*x = VuCalibrationRecordArrayV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationRecordArrayV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationRecordArrayV2) ProtoMessage() {}

func (x *VuCalibrationRecordArrayV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationRecordArrayV2.ProtoReflect.Descriptor instead.
func (*VuCalibrationRecordArrayV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{173}
}

func (x *VuCalibrationRecordArrayV2) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCalibrationRecordArrayV2) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCalibrationRecordArrayV2) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCalibrationRecordArrayV2) GetRecords() []*VuCalibrationRecordSecondGenV2 {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCalibrationRecordSecondGenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationPurpose                uint32                             `protobuf:"varint,1,opt,name=calibration_purpose,json=calibrationPurpose,proto3" json:"calibration_purpose,omitempty"` // CalibrationPurpose byte
	WorkshopName                      string                             `protobuf:"bytes,2,opt,name=workshop_name,json=workshopName,proto3" json:"workshop_name,omitempty"`                    // Name (codepage + [35]byte), decoded string
	WorkshopAddress                   string                             `protobuf:"bytes,3,opt,name=workshop_address,json=workshopAddress,proto3" json:"workshop_address,omitempty"`           // Address (codepage + [35]byte), decoded string
	WorkshopCardNumber                *FullCardNumber                    `protobuf:"bytes,4,opt,name=workshop_card_number,json=workshopCardNumber,proto3" json:"workshop_card_number,omitempty"`
	WorkshopCardExpiryDate            int64                              `protobuf:"varint,5,opt,name=workshop_card_expiry_date,json=workshopCardExpiryDate,proto3" json:"workshop_card_expiry_date,omitempty"`             //  TimeReal
	VehicleIdentificationNumber       string                             `protobuf:"bytes,6,opt,name=vehicle_identification_number,json=vehicleIdentificationNumber,proto3" json:"vehicle_identification_number,omitempty"` // VehicleIdentificationNumber [17]byte, decoded string
	VehicleRegistrationIdentification *VehicleRegistrationIdentification `protobuf:"bytes,7,opt,name=vehicle_registration_identification,json=vehicleRegistrationIdentification,proto3" json:"vehicle_registration_identification,omitempty"`
	WVehicleCharacteristicConstant    uint32                             `protobuf:"varint,8,opt,name=w_vehicle_characteristic_constant,json=wVehicleCharacteristicConstant,proto3" json:"w_vehicle_characteristic_constant,omitempty"` // WVehicleCharacteristicConstant uint16
	KConstantOfRecordingEquipment     uint32                             `protobuf:"varint,9,opt,name=k_constant_of_recording_equipment,json=kConstantOfRecordingEquipment,proto3" json:"k_constant_of_recording_equipment,omitempty"`  // KConstantOfRecordingEquipment uint16
	LTyreCircumference                uint32                             `protobuf:"varint,10,opt,name=l_tyre_circumference,json=lTyreCircumference,proto3" json:"l_tyre_circumference,omitempty"`                                      // LTyreCircumference uint16
	TyreSize                          string                             `protobuf:"bytes,11,opt,name=tyre_size,json=tyreSize,proto3" json:"tyre_size,omitempty"`                                                                       // TyreSize [15]byte, decoded string
	AuthorisedSpeed                   uint32                             `protobuf:"varint,12,opt,name=authorised_speed,json=authorisedSpeed,proto3" json:"authorised_speed,omitempty"`                                                 // SpeedAuthorised Speed byte
	OldOdometerValue                  uint32                             `protobuf:"varint,13,opt,name=old_odometer_value,json=oldOdometerValue,proto3" json:"old_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	NewOdometerValue                  uint32                             `protobuf:"varint,14,opt,name=new_odometer_value,json=newOdometerValue,proto3" json:"new_odometer_value,omitempty"`                                            // OdometerShort [3]byte -> decoded uint32
	OldTimeValue                      int64                              `protobuf:"varint,15,opt,name=old_time_value,json=oldTimeValue,proto3" json:"old_time_value,omitempty"`                                                        //  TimeReal
	NewTimeValue                      int64                              `protobuf:"varint,16,opt,name=new_time_value,json=newTimeValue,proto3" json:"new_time_value,omitempty"`                                                        //  TimeReal
	NextCalibrationDate               int64                              `protobuf:"varint,17,opt,name=next_calibration_date,json=nextCalibrationDate,proto3" json:"next_calibration_date,omitempty"`                                   //  TimeReal
	SensorSerialNumber                *ExtendedSerialNumberSecondGen     `protobuf:"bytes,18,opt,name=sensor_serial_number,json=sensorSerialNumber,proto3" json:"sensor_serial_number,omitempty"`                                       // SensorSerialNumberSecondGen ExtendedSerialNumberSecondGen
	SensorGnssSerialNumber            *ExtendedSerialNumberSecondGen     `protobuf:"bytes,19,opt,name=sensor_gnss_serial_number,json=sensorGnssSerialNumber,proto3" json:"sensor_gnss_serial_number,omitempty"`                         // SensorGNSSSerialNumber ExtendedSerialNumberSecondGen
	RcmSerialNumber                   *ExtendedSerialNumberSecondGen     `protobuf:"bytes,20,opt,name=rcm_serial_number,json=rcmSerialNumber,proto3" json:"rcm_serial_number,omitempty"`                                                // RemoteCommunicationModuleSerialNumber ExtendedSerialNumberSecondGen
	SealDataVu                        []*SealRecord                      `protobuf:"bytes,21,rep,name=seal_data_vu,json=sealDataVu,proto3" json:"seal_data_vu,omitempty"`                                                               // SealDataVu [5]struct{...}
	ByDefaultLoadType                 uint32                             `protobuf:"varint,22,opt,name=by_default_load_type,json=byDefaultLoadType,proto3" json:"by_default_load_type,omitempty"`                                       // LoadType byte
	CalibrationCountry                uint32                             `protobuf:"varint,23,opt,name=calibration_country,json=calibrationCountry,proto3" json:"calibration_country,omitempty"`                                        // NationNumeric byte
	CalibrationCountryTimestamp       int64                              `protobuf:"varint,24,opt,name=calibration_country_timestamp,json=calibrationCountryTimestamp,proto3" json:"calibration_country_timestamp,omitempty"`           // TimeReal
}

func (x *VuCalibrationRecordSecondGenV2) Reset() {
	*x = VuCalibrationRecordSecondGenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCalibrationRecordSecondGenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCalibrationRecordSecondGenV2) ProtoMessage() {}

func (x *VuCalibrationRecordSecondGenV2) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCalibrationRecordSecondGenV2.ProtoReflect.Descriptor instead.
func (*VuCalibrationRecordSecondGenV2) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{174}
}

func (x *VuCalibrationRecordSecondGenV2) GetCalibrationPurpose() uint32 {
	if x != nil {
		return x.CalibrationPurpose
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetWorkshopName() string {
	if x != nil {
		return x.WorkshopName
	}
	return ""
}

func (x *VuCalibrationRecordSecondGenV2) GetWorkshopAddress() string {
	if x != nil {
		return x.WorkshopAddress
	}
	return ""
}

func (x *VuCalibrationRecordSecondGenV2) GetWorkshopCardNumber() *FullCardNumber {
	if x != nil {
		return x.WorkshopCardNumber
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetWorkshopCardExpiryDate() int64 {
	if x != nil {
		return x.WorkshopCardExpiryDate
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetVehicleIdentificationNumber() string {
	if x != nil {
		return x.VehicleIdentificationNumber
	}
	return ""
}

func (x *VuCalibrationRecordSecondGenV2) GetVehicleRegistrationIdentification() *VehicleRegistrationIdentification {
	if x != nil {
		return x.VehicleRegistrationIdentification
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetWVehicleCharacteristicConstant() uint32 {
	if x != nil {
		return x.WVehicleCharacteristicConstant
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetKConstantOfRecordingEquipment() uint32 {
	if x != nil {
		return x.KConstantOfRecordingEquipment
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetLTyreCircumference() uint32 {
	if x != nil {
		return x.LTyreCircumference
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetTyreSize() string {
	if x != nil {
		return x.TyreSize
	}
	return ""
}

func (x *VuCalibrationRecordSecondGenV2) GetAuthorisedSpeed() uint32 {
	if x != nil {
		return x.AuthorisedSpeed
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetOldOdometerValue() uint32 {
	if x != nil {
		return x.OldOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetNewOdometerValue() uint32 {
	if x != nil {
		return x.NewOdometerValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetOldTimeValue() int64 {
	if x != nil {
		return x.OldTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetNewTimeValue() int64 {
	if x != nil {
		return x.NewTimeValue
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetNextCalibrationDate() int64 {
	if x != nil {
		return x.NextCalibrationDate
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetSensorSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.SensorSerialNumber
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetSensorGnssSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.SensorGnssSerialNumber
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetRcmSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.RcmSerialNumber
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetSealDataVu() []*SealRecord {
	if x != nil {
		return x.SealDataVu
	}
	return nil
}

func (x *VuCalibrationRecordSecondGenV2) GetByDefaultLoadType() uint32 {
	if x != nil {
		return x.ByDefaultLoadType
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetCalibrationCountry() uint32 {
	if x != nil {
		return x.CalibrationCountry
	}
	return 0
}

func (x *VuCalibrationRecordSecondGenV2) GetCalibrationCountryTimestamp() int64 {
	if x != nil {
		return x.CalibrationCountryTimestamp
	}
	return 0
}

type SealRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentType          uint32                  `protobuf:"varint,1,opt,name=equipment_type,json=equipmentType,proto3" json:"equipment_type,omitempty"` // EquipmentType byte
	ExtendedSealIdentifier *ExtendedSealIdentifier `protobuf:"bytes,2,opt,name=extended_seal_identifier,json=extendedSealIdentifier,proto3" json:"extended_seal_identifier,omitempty"`
}

func (x *SealRecord) Reset() {
	*x = SealRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealRecord) ProtoMessage() {}

func (x *SealRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealRecord.ProtoReflect.Descriptor instead.
func (*SealRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{175}
}

func (x *SealRecord) GetEquipmentType() uint32 {
	if x != nil {
		return x.EquipmentType
	}
	return 0
}

func (x *SealRecord) GetExtendedSealIdentifier() *ExtendedSealIdentifier {
	if x != nil {
		return x.ExtendedSealIdentifier
	}
	return nil
}

type ExtendedSealIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufacturerCode []byte `protobuf:"bytes,1,opt,name=manufacturer_code,json=manufacturerCode,proto3" json:"manufacturer_code,omitempty"` // [2]byte
	SealIdentifier   []byte `protobuf:"bytes,2,opt,name=seal_identifier,json=sealIdentifier,proto3" json:"seal_identifier,omitempty"`       // [8]byte
}

func (x *ExtendedSealIdentifier) Reset() {
	*x = ExtendedSealIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSealIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSealIdentifier) ProtoMessage() {}

func (x *ExtendedSealIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSealIdentifier.ProtoReflect.Descriptor instead.
func (*ExtendedSealIdentifier) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{176}
}

func (x *ExtendedSealIdentifier) GetManufacturerCode() []byte {
	if x != nil {
		return x.ManufacturerCode
	}
	return nil
}

func (x *ExtendedSealIdentifier) GetSealIdentifier() []byte {
	if x != nil {
		return x.SealIdentifier
	}
	return nil
}

type VuCardRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32          `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32          `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32          `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuCardRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuCardRecordArray) Reset() {
	*x = VuCardRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardRecordArray) ProtoMessage() {}

func (x *VuCardRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardRecordArray.ProtoReflect.Descriptor instead.
func (*VuCardRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{177}
}

func (x *VuCardRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuCardRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuCardRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuCardRecordArray) GetRecords() []*VuCardRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuCardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumberAndGenerationInformation *FullCardNumberAndGeneration   `protobuf:"bytes,1,opt,name=card_number_and_generation_information,json=cardNumberAndGenerationInformation,proto3" json:"card_number_and_generation_information,omitempty"`
	CardExtendedSerialNumber           *ExtendedSerialNumberSecondGen `protobuf:"bytes,2,opt,name=card_extended_serial_number,json=cardExtendedSerialNumber,proto3" json:"card_extended_serial_number,omitempty"`
	CardStuctureVersion                []byte                         `protobuf:"bytes,3,opt,name=card_stucture_version,json=cardStuctureVersion,proto3" json:"card_stucture_version,omitempty"` // [2]byte
	CardNumber                         string                         `protobuf:"bytes,4,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`                              // CardNumber [16]byte, decoded string
}

func (x *VuCardRecord) Reset() {
	*x = VuCardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuCardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuCardRecord) ProtoMessage() {}

func (x *VuCardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuCardRecord.ProtoReflect.Descriptor instead.
func (*VuCardRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{178}
}

func (x *VuCardRecord) GetCardNumberAndGenerationInformation() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenerationInformation
	}
	return nil
}

func (x *VuCardRecord) GetCardExtendedSerialNumber() *ExtendedSerialNumberSecondGen {
	if x != nil {
		return x.CardExtendedSerialNumber
	}
	return nil
}

func (x *VuCardRecord) GetCardStuctureVersion() []byte {
	if x != nil {
		return x.CardStuctureVersion
	}
	return nil
}

func (x *VuCardRecord) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

type VuITSConsentRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuITSConsentRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuITSConsentRecordArray) Reset() {
	*x = VuITSConsentRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuITSConsentRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuITSConsentRecordArray) ProtoMessage() {}

func (x *VuITSConsentRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuITSConsentRecordArray.ProtoReflect.Descriptor instead.
func (*VuITSConsentRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{179}
}

func (x *VuITSConsentRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuITSConsentRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuITSConsentRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuITSConsentRecordArray) GetRecords() []*VuITSConsentRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuITSConsentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumberAndGen *FullCardNumberAndGeneration `protobuf:"bytes,1,opt,name=card_number_and_gen,json=cardNumberAndGen,proto3" json:"card_number_and_gen,omitempty"`
	Consent          uint32                       `protobuf:"varint,2,opt,name=consent,proto3" json:"consent,omitempty"` // byte, actual boolean
}

func (x *VuITSConsentRecord) Reset() {
	*x = VuITSConsentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuITSConsentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuITSConsentRecord) ProtoMessage() {}

func (x *VuITSConsentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuITSConsentRecord.ProtoReflect.Descriptor instead.
func (*VuITSConsentRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{180}
}

func (x *VuITSConsentRecord) GetCardNumberAndGen() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGen
	}
	return nil
}

func (x *VuITSConsentRecord) GetConsent() uint32 {
	if x != nil {
		return x.Consent
	}
	return 0
}

type VuPowerSupplyInterruptionRecordArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType  uint32                             `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`      // RecordType byte
	RecordSize  uint32                             `protobuf:"varint,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`      // uint16
	NoOfRecords uint32                             `protobuf:"varint,3,opt,name=no_of_records,json=noOfRecords,proto3" json:"no_of_records,omitempty"` // uint16
	Records     []*VuPowerSupplyInterruptionRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *VuPowerSupplyInterruptionRecordArray) Reset() {
	*x = VuPowerSupplyInterruptionRecordArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPowerSupplyInterruptionRecordArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPowerSupplyInterruptionRecordArray) ProtoMessage() {}

func (x *VuPowerSupplyInterruptionRecordArray) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPowerSupplyInterruptionRecordArray.ProtoReflect.Descriptor instead.
func (*VuPowerSupplyInterruptionRecordArray) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{181}
}

func (x *VuPowerSupplyInterruptionRecordArray) GetRecordType() uint32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecordArray) GetRecordSize() uint32 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecordArray) GetNoOfRecords() uint32 {
	if x != nil {
		return x.NoOfRecords
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecordArray) GetRecords() []*VuPowerSupplyInterruptionRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VuPowerSupplyInterruptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                         uint32                       `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                              // EventFaultType byte
	EventRecordPurpose                uint32                       `protobuf:"varint,2,opt,name=event_record_purpose,json=eventRecordPurpose,proto3" json:"event_record_purpose,omitempty"` // EventFaultRecordPurpose byte
	EventBeginTime                    int64                        `protobuf:"varint,3,opt,name=event_begin_time,json=eventBeginTime,proto3" json:"event_begin_time,omitempty"`             // TimeReal
	EventEndTime                      int64                        `protobuf:"varint,4,opt,name=event_end_time,json=eventEndTime,proto3" json:"event_end_time,omitempty"`                   // TimeReal
	CardNumberAndGenDriverSlotBegin   *FullCardNumberAndGeneration `protobuf:"bytes,5,opt,name=card_number_and_gen_driver_slot_begin,json=cardNumberAndGenDriverSlotBegin,proto3" json:"card_number_and_gen_driver_slot_begin,omitempty"`
	CardNumberAndGenDriverSlotEnd     *FullCardNumberAndGeneration `protobuf:"bytes,6,opt,name=card_number_and_gen_driver_slot_end,json=cardNumberAndGenDriverSlotEnd,proto3" json:"card_number_and_gen_driver_slot_end,omitempty"`
	CardNumberAndGenCodriverSlotBegin *FullCardNumberAndGeneration `protobuf:"bytes,7,opt,name=card_number_and_gen_codriver_slot_begin,json=cardNumberAndGenCodriverSlotBegin,proto3" json:"card_number_and_gen_codriver_slot_begin,omitempty"`
	CardNumberAndGenCodriverSlotEnd   *FullCardNumberAndGeneration `protobuf:"bytes,8,opt,name=card_number_and_gen_codriver_slot_end,json=cardNumberAndGenCodriverSlotEnd,proto3" json:"card_number_and_gen_codriver_slot_end,omitempty"`
	SimilarEventsNumber               uint32                       `protobuf:"varint,9,opt,name=similar_events_number,json=similarEventsNumber,proto3" json:"similar_events_number,omitempty"` // SimilarEventsNumber byte
}

func (x *VuPowerSupplyInterruptionRecord) Reset() {
	*x = VuPowerSupplyInterruptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VuPowerSupplyInterruptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VuPowerSupplyInterruptionRecord) ProtoMessage() {}

func (x *VuPowerSupplyInterruptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VuPowerSupplyInterruptionRecord.ProtoReflect.Descriptor instead.
func (*VuPowerSupplyInterruptionRecord) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{182}
}

func (x *VuPowerSupplyInterruptionRecord) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecord) GetEventRecordPurpose() uint32 {
	if x != nil {
		return x.EventRecordPurpose
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecord) GetEventBeginTime() int64 {
	if x != nil {
		return x.EventBeginTime
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecord) GetEventEndTime() int64 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *VuPowerSupplyInterruptionRecord) GetCardNumberAndGenDriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotBegin
	}
	return nil
}

func (x *VuPowerSupplyInterruptionRecord) GetCardNumberAndGenDriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenDriverSlotEnd
	}
	return nil
}

func (x *VuPowerSupplyInterruptionRecord) GetCardNumberAndGenCodriverSlotBegin() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotBegin
	}
	return nil
}

func (x *VuPowerSupplyInterruptionRecord) GetCardNumberAndGenCodriverSlotEnd() *FullCardNumberAndGeneration {
	if x != nil {
		return x.CardNumberAndGenCodriverSlotEnd
	}
	return nil
}

func (x *VuPowerSupplyInterruptionRecord) GetSimilarEventsNumber() uint32 {
	if x != nil {
		return x.SimilarEventsNumber
	}
	return 0
}

type CardEventDataFirstGen_CardEventRecordsArrayElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardEventRecords []*CardEventRecord `protobuf:"bytes,1,rep,name=card_event_records,json=cardEventRecords,proto3" json:"card_event_records,omitempty"`
}

func (x *CardEventDataFirstGen_CardEventRecordsArrayElement) Reset() {
	*x = CardEventDataFirstGen_CardEventRecordsArrayElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEventDataFirstGen_CardEventRecordsArrayElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEventDataFirstGen_CardEventRecordsArrayElement) ProtoMessage() {}

func (x *CardEventDataFirstGen_CardEventRecordsArrayElement) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEventDataFirstGen_CardEventRecordsArrayElement.ProtoReflect.Descriptor instead.
func (*CardEventDataFirstGen_CardEventRecordsArrayElement) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CardEventDataFirstGen_CardEventRecordsArrayElement) GetCardEventRecords() []*CardEventRecord {
	if x != nil {
		return x.CardEventRecords
	}
	return nil
}

type CardEventDataSecondGen_CardEventRecordsArrayElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardEventRecords []*CardEventRecord `protobuf:"bytes,1,rep,name=card_event_records,json=cardEventRecords,proto3" json:"card_event_records,omitempty"`
}

func (x *CardEventDataSecondGen_CardEventRecordsArrayElement) Reset() {
	*x = CardEventDataSecondGen_CardEventRecordsArrayElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEventDataSecondGen_CardEventRecordsArrayElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEventDataSecondGen_CardEventRecordsArrayElement) ProtoMessage() {}

func (x *CardEventDataSecondGen_CardEventRecordsArrayElement) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEventDataSecondGen_CardEventRecordsArrayElement.ProtoReflect.Descriptor instead.
func (*CardEventDataSecondGen_CardEventRecordsArrayElement) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CardEventDataSecondGen_CardEventRecordsArrayElement) GetCardEventRecords() []*CardEventRecord {
	if x != nil {
		return x.CardEventRecords
	}
	return nil
}

type CardFaultDataFirstGen_CardFaultRecordsArrayElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardFaultRecords []*CardFaultRecord `protobuf:"bytes,1,rep,name=card_fault_records,json=cardFaultRecords,proto3" json:"card_fault_records,omitempty"`
}

func (x *CardFaultDataFirstGen_CardFaultRecordsArrayElement) Reset() {
	*x = CardFaultDataFirstGen_CardFaultRecordsArrayElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardFaultDataFirstGen_CardFaultRecordsArrayElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardFaultDataFirstGen_CardFaultRecordsArrayElement) ProtoMessage() {}

func (x *CardFaultDataFirstGen_CardFaultRecordsArrayElement) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardFaultDataFirstGen_CardFaultRecordsArrayElement.ProtoReflect.Descriptor instead.
func (*CardFaultDataFirstGen_CardFaultRecordsArrayElement) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CardFaultDataFirstGen_CardFaultRecordsArrayElement) GetCardFaultRecords() []*CardFaultRecord {
	if x != nil {
		return x.CardFaultRecords
	}
	return nil
}

type CardFaultDataSecondGen_CardFaultRecordsArrayElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardFaultRecords []*CardFaultRecord `protobuf:"bytes,1,rep,name=card_fault_records,json=cardFaultRecords,proto3" json:"card_fault_records,omitempty"`
}

func (x *CardFaultDataSecondGen_CardFaultRecordsArrayElement) Reset() {
	*x = CardFaultDataSecondGen_CardFaultRecordsArrayElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardFaultDataSecondGen_CardFaultRecordsArrayElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardFaultDataSecondGen_CardFaultRecordsArrayElement) ProtoMessage() {}

func (x *CardFaultDataSecondGen_CardFaultRecordsArrayElement) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardFaultDataSecondGen_CardFaultRecordsArrayElement.ProtoReflect.Descriptor instead.
func (*CardFaultDataSecondGen_CardFaultRecordsArrayElement) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CardFaultDataSecondGen_CardFaultRecordsArrayElement) GetCardFaultRecords() []*CardFaultRecord {
	if x != nil {
		return x.CardFaultRecords
	}
	return nil
}

type DecodedCertificateSecondGen_CertificateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateProfileIdentifier   uint32                                                 `protobuf:"varint,1,opt,name=certificate_profile_identifier,json=certificateProfileIdentifier,proto3" json:"certificate_profile_identifier,omitempty"` // byte
	CertificateAuthorityReference  uint64                                                 `protobuf:"varint,2,opt,name=certificate_authority_reference,json=certificateAuthorityReference,proto3" json:"certificate_authority_reference,omitempty"`
	CertificateHolderAuthorisation []byte                                                 `protobuf:"bytes,3,opt,name=certificate_holder_authorisation,json=certificateHolderAuthorisation,proto3" json:"certificate_holder_authorisation,omitempty"` // [7]byte
	PublicKey                      *DecodedCertificateSecondGen_CertificateBody_PublicKey `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	CertificateHolderReference     uint64                                                 `protobuf:"varint,5,opt,name=certificate_holder_reference,json=certificateHolderReference,proto3" json:"certificate_holder_reference,omitempty"`
	CertificateEffectiveDate       int64                                                  `protobuf:"varint,6,opt,name=certificate_effective_date,json=certificateEffectiveDate,proto3" json:"certificate_effective_date,omitempty"`
	CertificateExpirationDate      int64                                                  `protobuf:"varint,7,opt,name=certificate_expiration_date,json=certificateExpirationDate,proto3" json:"certificate_expiration_date,omitempty"`
}

func (x *DecodedCertificateSecondGen_CertificateBody) Reset() {
	*x = DecodedCertificateSecondGen_CertificateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateSecondGen_CertificateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateSecondGen_CertificateBody) ProtoMessage() {}

func (x *DecodedCertificateSecondGen_CertificateBody) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateSecondGen_CertificateBody.ProtoReflect.Descriptor instead.
func (*DecodedCertificateSecondGen_CertificateBody) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{72, 0}
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateProfileIdentifier() uint32 {
	if x != nil {
		return x.CertificateProfileIdentifier
	}
	return 0
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateAuthorityReference() uint64 {
	if x != nil {
		return x.CertificateAuthorityReference
	}
	return 0
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateHolderAuthorisation() []byte {
	if x != nil {
		return x.CertificateHolderAuthorisation
	}
	return nil
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetPublicKey() *DecodedCertificateSecondGen_CertificateBody_PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateHolderReference() uint64 {
	if x != nil {
		return x.CertificateHolderReference
	}
	return 0
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateEffectiveDate() int64 {
	if x != nil {
		return x.CertificateEffectiveDate
	}
	return 0
}

func (x *DecodedCertificateSecondGen_CertificateBody) GetCertificateExpirationDate() int64 {
	if x != nil {
		return x.CertificateExpirationDate
	}
	return 0
}

type DecodedCertificateSecondGen_ECCCertificateSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R string `protobuf:"bytes,1,opt,name=R,proto3" json:"R,omitempty"` // big.Int
	S string `protobuf:"bytes,2,opt,name=S,proto3" json:"S,omitempty"` // big.Int
}

func (x *DecodedCertificateSecondGen_ECCCertificateSignature) Reset() {
	*x = DecodedCertificateSecondGen_ECCCertificateSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateSecondGen_ECCCertificateSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateSecondGen_ECCCertificateSignature) ProtoMessage() {}

func (x *DecodedCertificateSecondGen_ECCCertificateSignature) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateSecondGen_ECCCertificateSignature.ProtoReflect.Descriptor instead.
func (*DecodedCertificateSecondGen_ECCCertificateSignature) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{72, 1}
}

func (x *DecodedCertificateSecondGen_ECCCertificateSignature) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *DecodedCertificateSecondGen_ECCCertificateSignature) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type DecodedCertificateSecondGen_CertificateBody_PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainParameters []int64                                                            `protobuf:"varint,1,rep,packed,name=domain_parameters,json=domainParameters,proto3" json:"domain_parameters,omitempty"` // asn1.ObjectIdentifier
	PublicPoint      *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint `protobuf:"bytes,2,opt,name=public_point,json=publicPoint,proto3" json:"public_point,omitempty"`
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey) Reset() {
	*x = DecodedCertificateSecondGen_CertificateBody_PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateSecondGen_CertificateBody_PublicKey) ProtoMessage() {}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateSecondGen_CertificateBody_PublicKey.ProtoReflect.Descriptor instead.
func (*DecodedCertificateSecondGen_CertificateBody_PublicKey) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{72, 0, 0}
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey) GetDomainParameters() []int64 {
	if x != nil {
		return x.DomainParameters
	}
	return nil
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey) GetPublicPoint() *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint {
	if x != nil {
		return x.PublicPoint
	}
	return nil
}

type DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"` // big.Int
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"` // big.Int
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) Reset() {
	*x = DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dddparser_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) ProtoMessage() {}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dddparser_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint.ProtoReflect.Descriptor instead.
func (*DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) Descriptor() ([]byte, []int) {
	return file_dddparser_proto_rawDescGZIP(), []int{72, 0, 0, 0}
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

var File_dddparser_proto protoreflect.FileDescriptor

var file_dddparser_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x64, 0x64, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x56, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x73, 0x65, 0x56, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x02, 0x76, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x52, 0x02, 0x76, 0x75, 0x22, 0x26, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x88, 0x3c, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x5f, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x63, 0x63, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x12, 0x5a, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x63, 0x63,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x31, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x49, 0x63, 0x63, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x53, 0x69, 0x67,
	0x12, 0x60, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x63, 0x63, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x12, 0x5b, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x63, 0x63, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x49, 0x63, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x53, 0x69, 0x67, 0x12,
	0x5a, 0x0a, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x5c, 0x0a, 0x1e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x1a, 0x63,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x53, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x1a, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x5d, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x53, 0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x28, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x24, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x12, 0x77, 0x0a, 0x2c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x73, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x27, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x53, 0x69, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x28, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x52, 0x24, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x78, 0x0a, 0x2c, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x27, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x53,
	0x69, 0x67, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x4a, 0x0a, 0x15, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x31, 0x53, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x12, 0x4b, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x32, 0x53, 0x69, 0x67, 0x12, 0x47,
	0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x31,
	0x53, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x63,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x4b, 0x0a,
	0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x32, 0x53, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x16, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x13, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x31, 0x12, 0x54, 0x0a, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x31, 0x53, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x13, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x32, 0x12, 0x55, 0x0a, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x32, 0x53, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x31,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x31, 0x12, 0x50, 0x0a, 0x18, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x31, 0x53, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61,
	0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x32, 0x12,
	0x51, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x14, 0x63, 0x61,
	0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x32, 0x53,
	0x69, 0x67, 0x12, 0x6a, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x12, 0x62,
	0x0a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x31,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x53,
	0x69, 0x67, 0x12, 0x6b, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x32, 0x12,
	0x63, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x32, 0x53, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x31, 0x12, 0x4c, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x31, 0x5f, 0x73,
	0x69, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x31, 0x53, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x32, 0x12, 0x4d, 0x0a, 0x16, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x32,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x32, 0x53, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x23, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x31,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1e, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x31, 0x12, 0x6c, 0x0a, 0x27,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x21, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x31, 0x53, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x23, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1e, 0x63,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0x12, 0x6d, 0x0a,
	0x27, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x21, 0x63, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0x53, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x50, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x31, 0x5f, 0x73,
	0x69, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x31, 0x53, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x32,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x32, 0x12, 0x51, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x32, 0x53, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x3b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x34, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x9a, 0x01,
	0x0a, 0x3f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x73, 0x69,
	0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x37, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x53, 0x69, 0x67, 0x12, 0xb5, 0x01, 0x0a, 0x3b, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x34, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x12, 0x9b, 0x01, 0x0a, 0x3f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x37, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x53, 0x69, 0x67,
	0x12, 0x70, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x31, 0x12, 0x6b, 0x0a, 0x26, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x21, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x53, 0x69, 0x67, 0x12,
	0x70, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0x6c, 0x0a, 0x26, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x21, 0x63, 0x61,
	0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x53, 0x69, 0x67, 0x12,
	0x55, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x31, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x53, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x15, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x32, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x53, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x57, 0x0a,
	0x1b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x17, 0x63,
	0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x18, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x5a, 0x0a, 0x1c, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x19, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x11, 0x63, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x4f, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x13, 0x63, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x54, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x16,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x2a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f,
	0x32, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x25,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x32, 0x12, 0x7b, 0x0a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x5f, 0x32, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x28, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x32, 0x53,
	0x69, 0x67, 0x12, 0x6c, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x69, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x1d, 0x67,
	0x6e, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x63, 0x0a, 0x21, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x1d, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x1b,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f,
	0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x1f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x67, 0x12, 0x4f, 0x0a,
	0x16, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x63,
	0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x53, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x76, 0x75, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x52, 0x12, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x22, 0xa0, 0x09, 0x0a, 0x02, 0x56, 0x75, 0x12, 0x3d, 0x0a, 0x0d,
	0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0b,
	0x76, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x31, 0x12, 0x3e, 0x0a, 0x0d, 0x76,
	0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0b,
	0x76, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x32, 0x12, 0x43, 0x0a, 0x0f, 0x76,
	0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x0d, 0x76, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x31,
	0x12, 0x44, 0x0a, 0x0f, 0x76, 0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0d, 0x76, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x12, 0x54, 0x0a, 0x16, 0x76, 0x75, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x31,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x76, 0x75, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x31, 0x12, 0x55, 0x0a, 0x16,
	0x76, 0x75, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52,
	0x12, 0x76, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x32, 0x12, 0x4d, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x52, 0x10, 0x76, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x31, 0x12, 0x4e, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x10, 0x76, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x32, 0x12, 0x4d, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52,
	0x10, 0x76, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x31, 0x12, 0x4e, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52,
	0x10, 0x76, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x12, 0x64, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x76, 0x75, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x76, 0x75, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x32, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x0c,
	0x76, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x32, 0x32, 0x12, 0x49, 0x0a, 0x11,
	0x76, 0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x32, 0x5f,
	0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x0e, 0x76, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x32, 0x12, 0x5a, 0x0a, 0x18, 0x76, 0x75, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x32, 0x5f, 0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x13,
	0x76, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x32, 0x32, 0x12, 0x53, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x5f, 0x32, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x11, 0x76, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32, 0x32, 0x22, 0x9e, 0x03, 0x0a, 0x1d, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x62, 0x0a, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52,
	0x18, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x18, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72,
	0x49, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x52, 0x15, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x49, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x69, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa0, 0x03, 0x0a, 0x1e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x63, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x63, 0x0a, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x18, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x72, 0x49, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x15, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x49, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a,
	0x1c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x01,
	0x0a, 0x15, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x49, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35,
	0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69,
	0x63, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x1a, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x18, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x2b,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x61, 0x63, 0x68, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x54, 0x61, 0x63, 0x68, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x4f, 0x66, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x15, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x4f, 0x66,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e,
	0x6f, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x4f, 0x66, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x8f, 0x05,
	0x0a, 0x2c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x61, 0x63, 0x68, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x54, 0x61, 0x63, 0x68, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x15,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x4f,
	0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e,
	0x6f, 0x4f, 0x66, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x1a,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6e, 0x6f, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x6f, 0x4f, 0x66, 0x47, 0x6e, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e, 0x6f,
	0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6e, 0x6f, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x85, 0x03, 0x0a, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4f, 0x66, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x6e, 0x6f, 0x4f, 0x66, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x6f,
	0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x6f, 0x4f, 0x66,
	0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x75, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x72, 0x0a,
	0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x63, 0x61, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x1a, 0x64, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x1a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x21, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x43, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x73, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x63,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x1a, 0x64, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x43,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x72, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x63,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x1a, 0x64, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x43,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a,
	0x1a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x73, 0x0a, 0x18,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x63, 0x61, 0x72, 0x64,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x1a, 0x64, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x44, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x63, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1b, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x17, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x79, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x12,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x1b, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x44, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x43, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x63, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1b, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x43,
	0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x19, 0x43,
	0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x76, 0x75, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x72, 0x64, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x1d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x1a, 0x43, 0x61, 0x72,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x76, 0x75, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x20, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x21,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x1b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xee,
	0x02, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4d, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x47, 0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6b, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x1c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x47, 0x6e, 0x73, 0x73, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x47,
	0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6e, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x3e,
	0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e,
	0x67, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x1d, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x6a, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x33, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x21, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x12,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xe5, 0x01, 0x0a, 0x1e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0e, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x16, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x66, 0x52, 0x13, 0x63,
	0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x61, 0x72, 0x64,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x05, 0x44, 0x61,
	0x74, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22,
	0x81, 0x02, 0x0a, 0x1d, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x21, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x72, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x18, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x18, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x76, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x16, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x67, 0x6e, 0x73, 0x73, 0x41, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x6c, 0x0a, 0x20,
	0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x4e, 0x53, 0x53, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1d, 0x67, 0x6e, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1c, 0x47,
	0x4e, 0x53, 0x53, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e,
	0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x67,
	0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x49, 0x0a, 0x22, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x67, 0x6e, 0x73,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x41, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x1b, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x17,
	0x67, 0x6e, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x16, 0x47, 0x4e, 0x53, 0x53, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x60, 0x0a, 0x1c, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x89, 0x02,
	0x0a, 0x18, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13,
	0x67, 0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f,
	0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x18,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x63, 0x61, 0x72,
	0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x55,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x67,
	0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5e, 0x0a,
	0x1c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x64, 0x0a,
	0x17, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x73, 0x61, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x73,
	0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x73, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x14,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x08, 0x0a, 0x1b,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x76, 0x0a, 0x19, 0x65, 0x63,
	0x63, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x2e, 0x45, 0x43, 0x43, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x17, 0x65, 0x63, 0x63, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x1a, 0xd9, 0x05, 0x0a, 0x0f, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x1e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x1f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x20, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x29, 0x0a, 0x0b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x79, 0x1a, 0x35, 0x0a, 0x17, 0x45, 0x43, 0x43, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x52, 0x12, 0x0c, 0x0a,
	0x01, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x53, 0x22, 0x81, 0x07, 0x0a, 0x12,
	0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x75, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0d, 0x76, 0x75, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x23, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x14,
	0x76, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x60, 0x0a, 0x19, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x16, 0x76, 0x75, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x54, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x76, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x18, 0x76, 0x75, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x52, 0x15, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x7e, 0x0a, 0x14, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x1e, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x56, 0x75, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x4f,
	0x66, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x15, 0x76,
	0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xac,
	0x01, 0x0a, 0x1d, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x4f, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x52, 0x18, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa4, 0x02,
	0x0a, 0x1f, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x1a, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x0a, 0x0a,
	0x13, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x7a, 0x0a, 0x25, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x21, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x5e, 0x0a, 0x1b,
	0x76, 0x75, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x18, 0x76, 0x75, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x89, 0x01, 0x0a,
	0x2a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x26, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x28, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x24, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x65,
	0x0a, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x74, 0x0a, 0x23, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1f, 0x76, 0x75, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x65, 0x0a, 0x1e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x7b, 0x0a, 0x26, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x21, 0x76, 0x75,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x62, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x19, 0x76, 0x75, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x6b, 0x0a, 0x20, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x1c, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x22, 0x9e, 0x0a, 0x0a, 0x15, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x25, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x21, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x5e, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x18, 0x76, 0x75, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x2a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x26, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x9b, 0x01, 0x0a, 0x30, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x2c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x65, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x74, 0x0a, 0x23, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1f, 0x76, 0x75, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x65, 0x0a, 0x1e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x7b, 0x0a, 0x26, 0x76, 0x75, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x21, 0x76,
	0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x62, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x19, 0x76, 0x75, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x6b, 0x0a, 0x20, 0x76, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x1c, 0x76, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x14,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x22, 0xa9, 0x04, 0x0a, 0x14, 0x56, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a,
	0x0a, 0x0f, 0x76, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x76, 0x75,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x16, 0x76, 0x75,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x13,
	0x76, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x1f, 0x76, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x1a, 0x76, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x1a, 0x76, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52,
	0x17, 0x76, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xc0, 0x01, 0x0a, 0x21, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x56, 0x75, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa8, 0x01,
	0x0a, 0x26, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x2c, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1f,
	0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x1a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x21,
	0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x1f, 0x56, 0x75,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x72,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x1b, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x10, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x66, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x19,
	0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xa1, 0x02, 0x0a, 0x1d, 0x56, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xce, 0x02,
	0x0a, 0x20, 0x56, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x77, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e,
	0x6f, 0x4f, 0x66, 0x49, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x76, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0f, 0x76, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xee, 0x04, 0x0a, 0x16, 0x56, 0x75, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x57, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x78, 0x0a, 0x23, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x56, 0x75, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x22, 0x56, 0x75, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x2d,
	0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x6f, 0x4f,
	0x66, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x76, 0x0a,
	0x22, 0x76, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x1d, 0x76, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x24, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x3f,
	0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xc7,
	0x01, 0x0a, 0x1f, 0x56, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e, 0x6f,
	0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x18,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xef, 0x06, 0x0a, 0x15, 0x56, 0x75, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x72,
	0x0a, 0x23, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x1e, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x77, 0x0a, 0x24, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x20, 0x6f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x17, 0x76,
	0x75, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x77, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x13, 0x76, 0x75, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x65, 0x0a,
	0x1e, 0x76, 0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x76, 0x75, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x7c, 0x0a, 0x27, 0x76, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x21, 0x76, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x50, 0x0a, 0x17, 0x76, 0x75, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x47, 0x4e,
	0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x13, 0x76, 0x75, 0x47, 0x6e, 0x73, 0x73, 0x41, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x71, 0x0a, 0x22, 0x76, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1e, 0x76, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xbd, 0x08, 0x0a, 0x17, 0x56,
	0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x72, 0x0a, 0x23, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1e, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x77, 0x0a, 0x24, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x20, 0x6f,
	0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x64, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x50, 0x0a, 0x17, 0x76, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x77, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x57, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x13, 0x76, 0x75,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x65, 0x0a, 0x1e, 0x76, 0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1a, 0x76, 0x75,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x7e, 0x0a, 0x27, 0x76, 0x75, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x56, 0x32, 0x52, 0x21, 0x76, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x52, 0x0a, 0x17, 0x76, 0x75, 0x5f, 0x67,
	0x6e, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x52, 0x13, 0x76, 0x75, 0x47, 0x6e, 0x73, 0x73, 0x41,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x71, 0x0a, 0x22,
	0x76, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x1e, 0x76, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x68, 0x0a, 0x1f, 0x76, 0x75, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1b, 0x76, 0x75,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x5c, 0x0a, 0x1b, 0x76, 0x75, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x17,
	0x76, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x44,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x20, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x57, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x99, 0x05, 0x0a, 0x17, 0x56,
	0x75, 0x43, 0x61, 0x72, 0x64, 0x49, 0x57, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x24, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x12, 0x57, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xef, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x78, 0x0a, 0x23, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x63, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x75, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x75, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x56, 0x75, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x21, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x23, 0x56, 0x75, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd1,
	0x01, 0x0a, 0x25, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x68, 0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x27, 0x56, 0x75, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x12, 0x68,
	0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x66, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x13, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x0e,
	0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x67, 0x0a,
	0x1f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x6b, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x67, 0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x15, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x32, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x8e, 0x03, 0x0a, 0x10, 0x56, 0x75, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x44, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x67, 0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x6b, 0x0a,
	0x21, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6e,
	0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x67, 0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x56, 0x75, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x56, 0x75, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x16, 0x56, 0x75, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x67,
	0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x6b, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x67, 0x6e,
	0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x56, 0x75, 0x4c, 0x6f,
	0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f,
	0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb7,
	0x03, 0x0a, 0x12, 0x56, 0x75, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x1f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x6b, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x4f, 0x0a, 0x16, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x67,
	0x6e, 0x73, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x64,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf5, 0x03, 0x0a, 0x19, 0x56, 0x75, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x76, 0x75, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x76,
	0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0d, 0x76, 0x75,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x76, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x62, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x76, 0x75, 0x4f,
	0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x76, 0x75, 0x4f,
	0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x17, 0x76, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x14, 0x76, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x7c, 0x0a, 0x0b, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x75, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x4f, 0x66, 0x56, 0x75,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x76, 0x75, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0e,
	0x76, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9c,
	0x04, 0x0a, 0x15, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1d, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x53, 0x0a, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x17, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x7c, 0x0a,
	0x0b, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0f,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x75, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x4f, 0x66, 0x56, 0x75, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x76, 0x75, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x76, 0x75, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd0, 0x04, 0x0a, 0x15,
	0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x5b, 0x0a, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x1b, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x1b,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x17, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e,
	0x64, 0x12, 0x57, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x19, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc9,
	0x01, 0x0a, 0x19, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x1b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x65, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x56,
	0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f,
	0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e,
	0x6f, 0x4f, 0x66, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x1e, 0x76, 0x75, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x1a, 0x76, 0x75, 0x4f, 0x76, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x21, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x19, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x19, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e,
	0x6f, 0x4f, 0x66, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x1a, 0x76, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x17,
	0x76, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x1e, 0x56, 0x75, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x8d, 0x05, 0x0a, 0x1a, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x76, 0x75,
	0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x12, 0x76, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x12, 0x76, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x2a, 0x76, 0x75, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x24, 0x76, 0x75, 0x4f, 0x76, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x72,
	0x0a, 0x23, 0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x1e, 0x76, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x68, 0x0a, 0x1f, 0x76, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x1b, 0x76, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x8f, 0x05, 0x0a, 0x1c, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x15,
	0x76, 0x75, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x12, 0x76, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x15, 0x76, 0x75,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x12, 0x76, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x2a, 0x76, 0x75, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x24, 0x76, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x72, 0x0a, 0x23, 0x76, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x1e, 0x76, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x68, 0x0a, 0x1f, 0x76, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x1b, 0x76, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51,
	0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x88, 0x06, 0x0a, 0x16, 0x56, 0x75, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x27, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x6e, 0x0a, 0x23, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x12,
	0x72, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x45, 0x6e, 0x64, 0x12, 0x7d, 0x0a, 0x26, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x22,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x22, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x1d, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xb3, 0x01, 0x0a, 0x12, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbc, 0x06, 0x0a, 0x16, 0x56, 0x75, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x72, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x27, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x6e, 0x0a,
	0x23, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x72, 0x0a,
	0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x26, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x22, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x01, 0x0a, 0x24, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x4f,
	0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0xcb, 0x01, 0x0a, 0x1e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc5, 0x03,
	0x0a, 0x22, 0x56, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a,
	0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xaf, 0x02,
	0x0a, 0x1f, 0x56, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x70, 0x0a,
	0x23, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbe, 0x01, 0x0a, 0x17, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x76, 0x75, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x13, 0x76, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x13, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x76, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x15, 0x76, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x77, 0x0a, 0x14, 0x56,
	0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x18, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x75, 0x0a,
	0x24, 0x76, 0x75, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x1f, 0x76, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x1f, 0x56, 0x75, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x17, 0x56, 0x75, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x4c, 0x0a, 0x11, 0x76, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x10, 0x76, 0x75,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x11, 0x76, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x18, 0x56,
	0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x75, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x75, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x75, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x75, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x75, 0x50, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x75, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x76, 0x75, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1a, 0x76, 0x75, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x76, 0x75, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x75, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x75, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x56, 0x75, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x75, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x76, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x75, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x76, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xd6, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x56, 0x75, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x1c, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x75, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x6f, 0x4f, 0x66, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x58,
	0x0a, 0x16, 0x76, 0x75, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x52, 0x14, 0x76, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcb, 0x07, 0x0a, 0x1b, 0x56, 0x75, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x1d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x78, 0x0a, 0x23, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x77,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x77, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x5f, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6c, 0x54, 0x79, 0x72, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x73, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6c,
	0x64, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x4f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f,
	0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf4, 0x06, 0x0a, 0x18, 0x56, 0x75, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x67, 0x0a, 0x1e, 0x76, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x1b, 0x76, 0x75, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x62, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x19, 0x76, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x8b, 0x01, 0x0a,
	0x2c, 0x76, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x4e, 0x53, 0x53,
	0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x26, 0x76, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x47, 0x6e, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x5e, 0x0a, 0x1b, 0x76, 0x75,
	0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x18, 0x76, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x49, 0x0a, 0x14, 0x76, 0x75,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x11, 0x76, 0x75, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x5c, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x69, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x49, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x17, 0x76, 0x75, 0x49, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x29, 0x76, 0x75, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x24, 0x76, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xfa, 0x06,
	0x0a, 0x1a, 0x56, 0x75, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x1e, 0x76, 0x75, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x52, 0x1b, 0x76, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x62, 0x0a, 0x1d, 0x76, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x19, 0x76, 0x75,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x2c, 0x76, 0x75, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x67,
	0x6e, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x4e, 0x53, 0x53, 0x43, 0x6f, 0x75, 0x70, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x26, 0x76,
	0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47,
	0x6e, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x52, 0x18, 0x76,
	0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x49, 0x0a, 0x14, 0x76, 0x75, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x11, 0x76, 0x75, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x5c, 0x0a, 0x1b, 0x76, 0x75, 0x5f, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x49, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x17, 0x76, 0x75, 0x49, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x84, 0x01, 0x0a, 0x29, 0x76, 0x75, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x24, 0x76, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x56,
	0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x80, 0x04, 0x0a,
	0x19, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x75,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x76, 0x75, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76,
	0x75, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x75, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x75,
	0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x10, 0x76, 0x75,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x76, 0x75, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1a, 0x76, 0x75,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x76, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x75, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x76, 0x75, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x75, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x75, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x75, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x75, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x75, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xc3, 0x01, 0x0a, 0x1d, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb7, 0x04, 0x0a, 0x1b, 0x56, 0x75, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x75, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x75, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x76, 0x75, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x75, 0x50, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x10, 0x76, 0x75, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0e, 0x76, 0x75, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1a, 0x76, 0x75, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x75, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x76, 0x75, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x75, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x76, 0x75, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x75, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x75, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x75, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76,
	0x75, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x75, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x76, 0x75, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x75,
	0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x75, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb6, 0x01, 0x0a, 0x19, 0x56, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x56, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x01,
	0x0a, 0x26, 0x56, 0x75, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x47, 0x4e, 0x53, 0x53, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x4e, 0x53, 0x53, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x47, 0x4e, 0x53, 0x53, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x81, 0x08, 0x0a, 0x1c, 0x56, 0x75, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1d,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x78, 0x0a, 0x23, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x77, 0x5f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x77, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x5f, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c,
	0x54, 0x79, 0x72, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x73, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6c, 0x64,
	0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6f,
	0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x75, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x56, 0x75, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x56,
	0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x3f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x56, 0x32, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xb4, 0x0b, 0x0a, 0x1e, 0x56, 0x75, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x56, 0x32, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x23,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x77, 0x5f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1e, 0x77, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x21, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6b, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x5f, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x54, 0x79, 0x72, 0x65,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6e, 0x65, 0x77, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x19, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x67, 0x6e, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x6e, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x72, 0x63,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x0f, 0x72, 0x63, 0x6d,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x75, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x75, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x62, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a,
	0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x56, 0x75, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x56, 0x75, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x76, 0x0a, 0x26, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x56, 0x75, 0x49, 0x54, 0x53, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x75, 0x49, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x12,
	0x56, 0x75, 0x49, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0xce, 0x01, 0x0a, 0x24, 0x56, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xc6, 0x05, 0x0a, 0x1f, 0x56, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x6e, 0x0a, 0x23, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x76, 0x0a, 0x27, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x72, 0x0a, 0x25, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x89, 0x01, 0x0a, 0x09, 0x44, 0x44,
	0x44, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x56, 0x75, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x56, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x56, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dddparser_proto_rawDescOnce sync.Once
	file_dddparser_proto_rawDescData = file_dddparser_proto_rawDesc
)

func file_dddparser_proto_rawDescGZIP() []byte {
	file_dddparser_proto_rawDescOnce.Do(func() {
		file_dddparser_proto_rawDescData = protoimpl.X.CompressGZIP(file_dddparser_proto_rawDescData)
	})
	return file_dddparser_proto_rawDescData
}

var file_dddparser_proto_msgTypes = make([]protoimpl.MessageInfo, 191)
var file_dddparser_proto_goTypes = []interface{}{
	(*ParseVuRequest)(nil),                                                    // 0: proto.ParseVuRequest
	(*ParseVuResponse)(nil),                                                   // 1: proto.ParseVuResponse
	(*ParseCardRequest)(nil),                                                  // 2: proto.ParseCardRequest
	(*ParseCardResponse)(nil),                                                 // 3: proto.ParseCardResponse
	(*Card)(nil),                                                              // 4: proto.Card
	(*Vu)(nil),                                                                // 5: proto.Vu
	(*CardIccIdentificationFirstGen)(nil),                                     // 6: proto.CardIccIdentificationFirstGen
	(*CardIccIdentificationSecondGen)(nil),                                    // 7: proto.CardIccIdentificationSecondGen
	(*ExtendedSerialNumberFirstGen)(nil),                                      // 8: proto.ExtendedSerialNumberFirstGen
	(*ExtendedSerialNumberSecondGen)(nil),                                     // 9: proto.ExtendedSerialNumberSecondGen
	(*EmbedderIcAssemblerId)(nil),                                             // 10: proto.EmbedderIcAssemblerId
	(*MonthYear)(nil),                                                         // 11: proto.MonthYear
	(*SignatureFirstGen)(nil),                                                 // 12: proto.SignatureFirstGen
	(*SignatureSecondGen)(nil),                                                // 13: proto.SignatureSecondGen
	(*CardChipIdentification)(nil),                                            // 14: proto.CardChipIdentification
	(*DriverCardApplicationIdentificationFirstGen)(nil),                       // 15: proto.DriverCardApplicationIdentificationFirstGen
	(*DriverCardApplicationIdentificationSecondGen)(nil),                      // 16: proto.DriverCardApplicationIdentificationSecondGen
	(*DriverCardApplicationIdentificationSecondGenV2)(nil),                    // 17: proto.DriverCardApplicationIdentificationSecondGenV2
	(*CardEventDataFirstGen)(nil),                                             // 18: proto.CardEventDataFirstGen
	(*CardEventRecord)(nil),                                                   // 19: proto.CardEventRecord
	(*VehicleRegistrationIdentification)(nil),                                 // 20: proto.VehicleRegistrationIdentification
	(*CardEventDataSecondGen)(nil),                                            // 21: proto.CardEventDataSecondGen
	(*CardFaultDataFirstGen)(nil),                                             // 22: proto.CardFaultDataFirstGen
	(*CardFaultRecord)(nil),                                                   // 23: proto.CardFaultRecord
	(*CardFaultDataSecondGen)(nil),                                            // 24: proto.CardFaultDataSecondGen
	(*CardDriverActivityFirstGen)(nil),                                        // 25: proto.CardDriverActivityFirstGen
	(*CardActivityDailyRecord)(nil),                                           // 26: proto.CardActivityDailyRecord
	(*ActivityChangeInfo)(nil),                                                // 27: proto.ActivityChangeInfo
	(*CardDriverActivitySecondGen)(nil),                                       // 28: proto.CardDriverActivitySecondGen
	(*CardVehiclesUsedFirstGen)(nil),                                          // 29: proto.CardVehiclesUsedFirstGen
	(*CardVehicleRecordFirstGen)(nil),                                         // 30: proto.CardVehicleRecordFirstGen
	(*CardVehiclesUsedSecondGen)(nil),                                         // 31: proto.CardVehiclesUsedSecondGen
	(*CardVehicleRecordSecondGen)(nil),                                        // 32: proto.CardVehicleRecordSecondGen
	(*CardPlaceDailyWorkPeriodFirstGen)(nil),                                  // 33: proto.CardPlaceDailyWorkPeriodFirstGen
	(*PlaceRecordFirstGen)(nil),                                               // 34: proto.PlaceRecordFirstGen
	(*CardPlaceDailyWorkPeriodSecondGen)(nil),                                 // 35: proto.CardPlaceDailyWorkPeriodSecondGen
	(*PlaceRecordSecondGen)(nil),                                              // 36: proto.PlaceRecordSecondGen
	(*CardPlaceAuthDailyWorkPeriod)(nil),                                      // 37: proto.CardPlaceAuthDailyWorkPeriod
	(*PlaceAuthStatusRecord)(nil),                                             // 38: proto.PlaceAuthStatusRecord
	(*PlaceAuthRecord)(nil),                                                   // 39: proto.PlaceAuthRecord
	(*GNSSPlaceRecord)(nil),                                                   // 40: proto.GNSSPlaceRecord
	(*GNSSPlaceAuthRecord)(nil),                                               // 41: proto.GNSSPlaceAuthRecord
	(*GeoCoordinates)(nil),                                                    // 42: proto.GeoCoordinates
	(*CardCurrentUse)(nil),                                                    // 43: proto.CardCurrentUse
	(*CardControlActivityDataRecord)(nil),                                     // 44: proto.CardControlActivityDataRecord
	(*FullCardNumber)(nil),                                                    // 45: proto.FullCardNumber
	(*LastCardDownload)(nil),                                                  // 46: proto.LastCardDownload
	(*CardIdentificationAndDriverCardHolderIdentification)(nil),               // 47: proto.CardIdentificationAndDriverCardHolderIdentification
	(*CardIdentification)(nil),                                                // 48: proto.CardIdentification
	(*DriverCardHolderIdentification)(nil),                                    // 49: proto.DriverCardHolderIdentification
	(*HolderName)(nil),                                                        // 50: proto.HolderName
	(*Datef)(nil),                                                             // 51: proto.Datef
	(*CardDrivingLicenceInformation)(nil),                                     // 52: proto.CardDrivingLicenceInformation
	(*SpecificConditionsFirstGen)(nil),                                        // 53: proto.SpecificConditionsFirstGen
	(*SpecificConditionRecord)(nil),                                           // 54: proto.SpecificConditionRecord
	(*SpecificConditionsSecondGen)(nil),                                       // 55: proto.SpecificConditionsSecondGen
	(*CardVehicleUnitsUsed)(nil),                                              // 56: proto.CardVehicleUnitsUsed
	(*CardVehicleUnitRecord)(nil),                                             // 57: proto.CardVehicleUnitRecord
	(*GNSSAccumulatedDriving)(nil),                                            // 58: proto.GNSSAccumulatedDriving
	(*GNSSAccumulatedDrivingRecord)(nil),                                      // 59: proto.GNSSAccumulatedDrivingRecord
	(*GNSSAuthAccumulatedDriving)(nil),                                        // 60: proto.GNSSAuthAccumulatedDriving
	(*GNSSAuthStatusADRecord)(nil),                                            // 61: proto.GNSSAuthStatusADRecord
	(*CardBorderCrossings)(nil),                                               // 62: proto.CardBorderCrossings
	(*CardBorderCrossingRecord)(nil),                                          // 63: proto.CardBorderCrossingRecord
	(*CardLoadUnloadOperations)(nil),                                          // 64: proto.CardLoadUnloadOperations
	(*CardLoadUnloadRecord)(nil),                                              // 65: proto.CardLoadUnloadRecord
	(*CardLoadTypeEntries)(nil),                                               // 66: proto.CardLoadTypeEntries
	(*CardLoadTypeEntryRecord)(nil),                                           // 67: proto.CardLoadTypeEntryRecord
	(*VuConfiguration)(nil),                                                   // 68: proto.VuConfiguration
	(*CertificateFirstGen)(nil),                                               // 69: proto.CertificateFirstGen
	(*DecodedCertificateFirstGen)(nil),                                        // 70: proto.DecodedCertificateFirstGen
	(*CertificateSecondGen)(nil),                                              // 71: proto.CertificateSecondGen
	(*DecodedCertificateSecondGen)(nil),                                       // 72: proto.DecodedCertificateSecondGen
	(*VuOverviewFirstGen)(nil),                                                // 73: proto.VuOverviewFirstGen
	(*VuDownloadablePeriod)(nil),                                              // 74: proto.VuDownloadablePeriod
	(*VuDownloadActivityDataFirstGen)(nil),                                    // 75: proto.VuDownloadActivityDataFirstGen
	(*VuCompanyLocksDataFirstGen)(nil),                                        // 76: proto.VuCompanyLocksDataFirstGen
	(*VuCompanyLocksRecordFirstGen)(nil),                                      // 77: proto.VuCompanyLocksRecordFirstGen
	(*VuControlActivityDataFirstGen)(nil),                                     // 78: proto.VuControlActivityDataFirstGen
	(*VuControlActivityRecordFirstGen)(nil),                                   // 79: proto.VuControlActivityRecordFirstGen
	(*VuDownloadInterfaceVersion)(nil),                                        // 80: proto.VuDownloadInterfaceVersion
	(*VuOverviewSecondGen)(nil),                                               // 81: proto.VuOverviewSecondGen
	(*VuOverviewSecondGenV2)(nil),                                             // 82: proto.VuOverviewSecondGenV2
	(*VuActivitiesFirstGen)(nil),                                              // 83: proto.VuActivitiesFirstGen
	(*MemberStateCertificateRecordArray)(nil),                                 // 84: proto.MemberStateCertificateRecordArray
	(*VuCertificateRecordArray)(nil),                                          // 85: proto.VuCertificateRecordArray
	(*VehicleIdentificationNumberRecordArray)(nil),                            // 86: proto.VehicleIdentificationNumberRecordArray
	(*VehicleRegistrationIdentificationRecordArray)(nil),                      // 87: proto.VehicleRegistrationIdentificationRecordArray
	(*VehicleRegistrationNumberRecordArray)(nil),                              // 88: proto.VehicleRegistrationNumberRecordArray
	(*CurrentDateTimeRecordArray)(nil),                                        // 89: proto.CurrentDateTimeRecordArray
	(*VuDownloadablePeriodRecordArray)(nil),                                   // 90: proto.VuDownloadablePeriodRecordArray
	(*CardSlotsStatusRecordArray)(nil),                                        // 91: proto.CardSlotsStatusRecordArray
	(*VuDownloadActivityDataRecordArray)(nil),                                 // 92: proto.VuDownloadActivityDataRecordArray
	(*VuDownloadActivityDataSecondGen)(nil),                                   // 93: proto.VuDownloadActivityDataSecondGen
	(*FullCardNumberAndGeneration)(nil),                                       // 94: proto.FullCardNumberAndGeneration
	(*VuCompanyLocksRecordArray)(nil),                                         // 95: proto.VuCompanyLocksRecordArray
	(*VuCompanyLocksRecordSecondGen)(nil),                                     // 96: proto.VuCompanyLocksRecordSecondGen
	(*VuControlActivityRecordArray)(nil),                                      // 97: proto.VuControlActivityRecordArray
	(*VuControlActivityRecordSecondGen)(nil),                                  // 98: proto.VuControlActivityRecordSecondGen
	(*SignatureRecordArray)(nil),                                              // 99: proto.SignatureRecordArray
	(*VuCardIWData)(nil),                                                      // 100: proto.VuCardIWData
	(*VuCardIWRecordFirstGen)(nil),                                            // 101: proto.VuCardIWRecordFirstGen
	(*PreviousVehicleInfoFirstGen)(nil),                                       // 102: proto.PreviousVehicleInfoFirstGen
	(*VuActivityDailyDataFirstGen)(nil),                                       // 103: proto.VuActivityDailyDataFirstGen
	(*VuPlaceDailyWorkPeriodDataFirstGen)(nil),                                // 104: proto.VuPlaceDailyWorkPeriodDataFirstGen
	(*VuPlaceDailyWorkPeriodRecordFirstGen)(nil),                              // 105: proto.VuPlaceDailyWorkPeriodRecordFirstGen
	(*VuSpecificConditionDataFirstGen)(nil),                                   // 106: proto.VuSpecificConditionDataFirstGen
	(*VuActivitiesSecondGen)(nil),                                             // 107: proto.VuActivitiesSecondGen
	(*VuActivitiesSecondGenV2)(nil),                                           // 108: proto.VuActivitiesSecondGenV2
	(*DateOfDayDownloadedRecordArray)(nil),                                    // 109: proto.DateOfDayDownloadedRecordArray
	(*OdometerValueMidnightRecordArray)(nil),                                  // 110: proto.OdometerValueMidnightRecordArray
	(*VuCardIWRecordArray)(nil),                                               // 111: proto.VuCardIWRecordArray
	(*VuCardIWRecordSecondGen)(nil),                                           // 112: proto.VuCardIWRecordSecondGen
	(*PreviousVehicleInfoSecondGen)(nil),                                      // 113: proto.PreviousVehicleInfoSecondGen
	(*VuActivityDailyRecordArray)(nil),                                        // 114: proto.VuActivityDailyRecordArray
	(*VuPlaceDailyWorkPeriodRecordArray)(nil),                                 // 115: proto.VuPlaceDailyWorkPeriodRecordArray
	(*VuPlaceDailyWorkPeriodRecordArrayV2)(nil),                               // 116: proto.VuPlaceDailyWorkPeriodRecordArrayV2
	(*VuPlaceDailyWorkPeriodRecordSecondGen)(nil),                             // 117: proto.VuPlaceDailyWorkPeriodRecordSecondGen
	(*VuPlaceDailyWorkPeriodRecordSecondGenV2)(nil),                           // 118: proto.VuPlaceDailyWorkPeriodRecordSecondGenV2
	(*VuGNSSADRecordArray)(nil),                                               // 119: proto.VuGNSSADRecordArray
	(*VuGNSSADRecord)(nil),                                                    // 120: proto.VuGNSSADRecord
	(*VuGNSSADRecordArrayV2)(nil),                                             // 121: proto.VuGNSSADRecordArrayV2
	(*VuGNSSADRecordV2)(nil),                                                  // 122: proto.VuGNSSADRecordV2
	(*VuSpecificConditionRecordArray)(nil),                                    // 123: proto.VuSpecificConditionRecordArray
	(*VuBorderCrossingRecordArray)(nil),                                       // 124: proto.VuBorderCrossingRecordArray
	(*VuBorderCrossingRecord)(nil),                                            // 125: proto.VuBorderCrossingRecord
	(*VuLoadUnloadRecordArray)(nil),                                           // 126: proto.VuLoadUnloadRecordArray
	(*VuLoadUnloadRecord)(nil),                                                // 127: proto.VuLoadUnloadRecord
	(*VuEventsAndFaultsFirstGen)(nil),                                         // 128: proto.VuEventsAndFaultsFirstGen
	(*VuFaultData)(nil),                                                       // 129: proto.VuFaultData
	(*VuFaultRecordFirstGen)(nil),                                             // 130: proto.VuFaultRecordFirstGen
	(*VuEventData)(nil),                                                       // 131: proto.VuEventData
	(*VuEventRecordFirstGen)(nil),                                             // 132: proto.VuEventRecordFirstGen
	(*VuOverSpeedingControlData)(nil),                                         // 133: proto.VuOverSpeedingControlData
	(*VuOverSpeedingEventData)(nil),                                           // 134: proto.VuOverSpeedingEventData
	(*VuOverSpeedingEventRecordFirstGen)(nil),                                 // 135: proto.VuOverSpeedingEventRecordFirstGen
	(*VuTimeAdjustmentData)(nil),                                              // 136: proto.VuTimeAdjustmentData
	(*VuTimeAdjustmentRecordFirstGen)(nil),                                    // 137: proto.VuTimeAdjustmentRecordFirstGen
	(*VuEventsAndFaultsSecondGen)(nil),                                        // 138: proto.VuEventsAndFaultsSecondGen
	(*VuEventsAndFaultsSecondGenV2)(nil),                                      // 139: proto.VuEventsAndFaultsSecondGenV2
	(*VuFaultRecordArray)(nil),                                                // 140: proto.VuFaultRecordArray
	(*VuFaultRecordSecondGen)(nil),                                            // 141: proto.VuFaultRecordSecondGen
	(*ManufacturerSpecificEventFaultData)(nil),                                // 142: proto.ManufacturerSpecificEventFaultData
	(*VuEventRecordArray)(nil),                                                // 143: proto.VuEventRecordArray
	(*VuEventRecordSecondGen)(nil),                                            // 144: proto.VuEventRecordSecondGen
	(*VuOverSpeedingControlDataRecordArray)(nil),                              // 145: proto.VuOverSpeedingControlDataRecordArray
	(*VuOverSpeedingEventRecordArray)(nil),                                    // 146: proto.VuOverSpeedingEventRecordArray
	(*VuOverSpeedingEventRecordSecondGen)(nil),                                // 147: proto.VuOverSpeedingEventRecordSecondGen
	(*VuTimeAdjustmentRecordArray)(nil),                                       // 148: proto.VuTimeAdjustmentRecordArray
	(*VuTimeAdjustmentRecordSecondGen)(nil),                                   // 149: proto.VuTimeAdjustmentRecordSecondGen
	(*VuDetailedSpeedFirstGen)(nil),                                           // 150: proto.VuDetailedSpeedFirstGen
	(*VuDetailedSpeedData)(nil),                                               // 151: proto.VuDetailedSpeedData
	(*VuDetailedSpeedBlock)(nil),                                              // 152: proto.VuDetailedSpeedBlock
	(*VuDetailedSpeedSecondGen)(nil),                                          // 153: proto.VuDetailedSpeedSecondGen
	(*VuDetailedSpeedBlockRecordArray)(nil),                                   // 154: proto.VuDetailedSpeedBlockRecordArray
	(*VuTechnicalDataFirstGen)(nil),                                           // 155: proto.VuTechnicalDataFirstGen
	(*VuIdentificationFirstGen)(nil),                                          // 156: proto.VuIdentificationFirstGen
	(*VuSoftwareIdentification)(nil),                                          // 157: proto.VuSoftwareIdentification
	(*SensorPaired)(nil),                                                      // 158: proto.SensorPaired
	(*VuCalibrationData)(nil),                                                 // 159: proto.VuCalibrationData
	(*VuCalibrationRecordFirstGen)(nil),                                       // 160: proto.VuCalibrationRecordFirstGen
	(*VuTechnicalDataSecondGen)(nil),                                          // 161: proto.VuTechnicalDataSecondGen
	(*VuTechnicalDataSecondGenV2)(nil),                                        // 162: proto.VuTechnicalDataSecondGenV2
	(*VuIdentificationRecordArray)(nil),                                       // 163: proto.VuIdentificationRecordArray
	(*VuIdentificationSecondGen)(nil),                                         // 164: proto.VuIdentificationSecondGen
	(*VuIdentificationRecordArrayV2)(nil),                                     // 165: proto.VuIdentificationRecordArrayV2
	(*VuIdentificationSecondGenV2)(nil),                                       // 166: proto.VuIdentificationSecondGenV2
	(*VuSensorPairedRecordArray)(nil),                                         // 167: proto.VuSensorPairedRecordArray
	(*SensorPairedRecord)(nil),                                                // 168: proto.SensorPairedRecord
	(*VuSensorExternalGNSSCoupledRecordArray)(nil),                            // 169: proto.VuSensorExternalGNSSCoupledRecordArray
	(*SensorExternalGNSSCoupledRecord)(nil),                                   // 170: proto.SensorExternalGNSSCoupledRecord
	(*VuCalibrationRecordArray)(nil),                                          // 171: proto.VuCalibrationRecordArray
	(*VuCalibrationRecordSecondGen)(nil),                                      // 172: proto.VuCalibrationRecordSecondGen
	(*VuCalibrationRecordArrayV2)(nil),                                        // 173: proto.VuCalibrationRecordArrayV2
	(*VuCalibrationRecordSecondGenV2)(nil),                                    // 174: proto.VuCalibrationRecordSecondGenV2
	(*SealRecord)(nil),                                                        // 175: proto.SealRecord
	(*ExtendedSealIdentifier)(nil),                                            // 176: proto.ExtendedSealIdentifier
	(*VuCardRecordArray)(nil),                                                 // 177: proto.VuCardRecordArray
	(*VuCardRecord)(nil),                                                      // 178: proto.VuCardRecord
	(*VuITSConsentRecordArray)(nil),                                           // 179: proto.VuITSConsentRecordArray
	(*VuITSConsentRecord)(nil),                                                // 180: proto.VuITSConsentRecord
	(*VuPowerSupplyInterruptionRecordArray)(nil),                              // 181: proto.VuPowerSupplyInterruptionRecordArray
	(*VuPowerSupplyInterruptionRecord)(nil),                                   // 182: proto.VuPowerSupplyInterruptionRecord
	(*CardEventDataFirstGen_CardEventRecordsArrayElement)(nil),                // 183: proto.CardEventDataFirstGen.CardEventRecordsArrayElement
	(*CardEventDataSecondGen_CardEventRecordsArrayElement)(nil),               // 184: proto.CardEventDataSecondGen.CardEventRecordsArrayElement
	(*CardFaultDataFirstGen_CardFaultRecordsArrayElement)(nil),                // 185: proto.CardFaultDataFirstGen.CardFaultRecordsArrayElement
	(*CardFaultDataSecondGen_CardFaultRecordsArrayElement)(nil),               // 186: proto.CardFaultDataSecondGen.CardFaultRecordsArrayElement
	(*DecodedCertificateSecondGen_CertificateBody)(nil),                       // 187: proto.DecodedCertificateSecondGen.CertificateBody
	(*DecodedCertificateSecondGen_ECCCertificateSignature)(nil),               // 188: proto.DecodedCertificateSecondGen.ECCCertificateSignature
	(*DecodedCertificateSecondGen_CertificateBody_PublicKey)(nil),             // 189: proto.DecodedCertificateSecondGen.CertificateBody.PublicKey
	(*DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint)(nil), // 190: proto.DecodedCertificateSecondGen.CertificateBody.PublicKey.PublicPoint
}
var file_dddparser_proto_depIdxs = []int32{
	5,   // 0: proto.ParseVuResponse.vu:type_name -> proto.Vu
	4,   // 1: proto.ParseCardResponse.card:type_name -> proto.Card
	6,   // 2: proto.Card.card_icc_identification_1:type_name -> proto.CardIccIdentificationFirstGen
	12,  // 3: proto.Card.card_icc_identification_1_sig:type_name -> proto.SignatureFirstGen
	7,   // 4: proto.Card.card_icc_identification_2:type_name -> proto.CardIccIdentificationSecondGen
	13,  // 5: proto.Card.card_icc_identification_2_sig:type_name -> proto.SignatureSecondGen
	14,  // 6: proto.Card.card_chip_identification_1:type_name -> proto.CardChipIdentification
	12,  // 7: proto.Card.card_chip_identification_1_sig:type_name -> proto.SignatureFirstGen
	14,  // 8: proto.Card.card_chip_identification_2:type_name -> proto.CardChipIdentification
	13,  // 9: proto.Card.card_chip_identification_2_sig:type_name -> proto.SignatureSecondGen
	15,  // 10: proto.Card.driver_card_application_identification_1:type_name -> proto.DriverCardApplicationIdentificationFirstGen
	12,  // 11: proto.Card.driver_card_application_identification_1_sig:type_name -> proto.SignatureFirstGen
	16,  // 12: proto.Card.driver_card_application_identification_2:type_name -> proto.DriverCardApplicationIdentificationSecondGen
	13,  // 13: proto.Card.driver_card_application_identification_2_sig:type_name -> proto.SignatureSecondGen
	18,  // 14: proto.Card.card_event_data_1:type_name -> proto.CardEventDataFirstGen
	12,  // 15: proto.Card.card_event_data_1_sig:type_name -> proto.SignatureFirstGen
	21,  // 16: proto.Card.card_event_data_2:type_name -> proto.CardEventDataSecondGen
	13,  // 17: proto.Card.card_event_data_2_sig:type_name -> proto.SignatureSecondGen
	22,  // 18: proto.Card.card_fault_data_1:type_name -> proto.CardFaultDataFirstGen
	12,  // 19: proto.Card.card_fault_data_1_sig:type_name -> proto.SignatureFirstGen
	24,  // 20: proto.Card.card_fault_data_2:type_name -> proto.CardFaultDataSecondGen
	13,  // 21: proto.Card.card_fault_data_2_sig:type_name -> proto.SignatureSecondGen
	25,  // 22: proto.Card.card_driver_activity_1:type_name -> proto.CardDriverActivityFirstGen
	12,  // 23: proto.Card.card_driver_activity_1_sig:type_name -> proto.SignatureFirstGen
	28,  // 24: proto.Card.card_driver_activity_2:type_name -> proto.CardDriverActivitySecondGen
	13,  // 25: proto.Card.card_driver_activity_2_sig:type_name -> proto.SignatureSecondGen
	29,  // 26: proto.Card.card_vehicles_used_1:type_name -> proto.CardVehiclesUsedFirstGen
	12,  // 27: proto.Card.card_vehicles_used_1_sig:type_name -> proto.SignatureFirstGen
	31,  // 28: proto.Card.card_vehicles_used_2:type_name -> proto.CardVehiclesUsedSecondGen
	13,  // 29: proto.Card.card_vehicles_used_2_sig:type_name -> proto.SignatureSecondGen
	33,  // 30: proto.Card.card_place_daily_work_period_1:type_name -> proto.CardPlaceDailyWorkPeriodFirstGen
	12,  // 31: proto.Card.card_place_daily_work_period_1_sig:type_name -> proto.SignatureFirstGen
	35,  // 32: proto.Card.card_place_daily_work_period_2:type_name -> proto.CardPlaceDailyWorkPeriodSecondGen
	13,  // 33: proto.Card.card_place_daily_work_period_2_sig:type_name -> proto.SignatureSecondGen
	43,  // 34: proto.Card.card_current_use_1:type_name -> proto.CardCurrentUse
	12,  // 35: proto.Card.card_current_use_1_sig:type_name -> proto.SignatureFirstGen
	43,  // 36: proto.Card.card_current_use_2:type_name -> proto.CardCurrentUse
	13,  // 37: proto.Card.card_current_use_2_sig:type_name -> proto.SignatureSecondGen
	44,  // 38: proto.Card.card_control_activity_data_record_1:type_name -> proto.CardControlActivityDataRecord
	12,  // 39: proto.Card.card_control_activity_data_record_1_sig:type_name -> proto.SignatureFirstGen
	44,  // 40: proto.Card.card_control_activity_data_record_2:type_name -> proto.CardControlActivityDataRecord
	13,  // 41: proto.Card.card_control_activity_data_record_2_sig:type_name -> proto.SignatureSecondGen
	46,  // 42: proto.Card.last_card_download_1:type_name -> proto.LastCardDownload
	12,  // 43: proto.Card.last_card_download_1_sig:type_name -> proto.SignatureFirstGen
	46,  // 44: proto.Card.last_card_download_2:type_name -> proto.LastCardDownload
	13,  // 45: proto.Card.last_card_download_2_sig:type_name -> proto.SignatureSecondGen
	47,  // 46: proto.Card.card_identification_and_driver_card_holder_identification_1:type_name -> proto.CardIdentificationAndDriverCardHolderIdentification
	12,  // 47: proto.Card.card_identification_and_driver_card_holder_identification_1_sig:type_name -> proto.SignatureFirstGen
	47,  // 48: proto.Card.card_identification_and_driver_card_holder_identification_2:type_name -> proto.CardIdentificationAndDriverCardHolderIdentification
	13,  // 49: proto.Card.card_identification_and_driver_card_holder_identification_2_sig:type_name -> proto.SignatureSecondGen
	52,  // 50: proto.Card.card_driving_licence_information_1:type_name -> proto.CardDrivingLicenceInformation
	12,  // 51: proto.Card.card_driving_licence_information_1_sig:type_name -> proto.SignatureFirstGen
	52,  // 52: proto.Card.card_driving_licence_information_2:type_name -> proto.CardDrivingLicenceInformation
	13,  // 53: proto.Card.card_driving_licence_information_2_sig:type_name -> proto.SignatureSecondGen
	53,  // 54: proto.Card.specific_conditions_1:type_name -> proto.SpecificConditionsFirstGen
	12,  // 55: proto.Card.specific_conditions_1_sig:type_name -> proto.SignatureFirstGen
	55,  // 56: proto.Card.specific_conditions_2:type_name -> proto.SpecificConditionsSecondGen
	13,  // 57: proto.Card.specific_conditions_2_sig:type_name -> proto.SignatureSecondGen
	56,  // 58: proto.Card.card_vehicle_units_used:type_name -> proto.CardVehicleUnitsUsed
	13,  // 59: proto.Card.card_vehicle_units_used_sig:type_name -> proto.SignatureSecondGen
	58,  // 60: proto.Card.gnss_accumulated_driving:type_name -> proto.GNSSAccumulatedDriving
	13,  // 61: proto.Card.gnss_accumulated_driving_sig:type_name -> proto.SignatureSecondGen
	69,  // 62: proto.Card.card_certificate:type_name -> proto.CertificateFirstGen
	71,  // 63: proto.Card.card_ma_certificate:type_name -> proto.CertificateSecondGen
	71,  // 64: proto.Card.card_sign_certificate:type_name -> proto.CertificateSecondGen
	69,  // 65: proto.Card.member_state_certificate:type_name -> proto.CertificateFirstGen
	71,  // 66: proto.Card.ca_certificate:type_name -> proto.CertificateSecondGen
	71,  // 67: proto.Card.link_certificate:type_name -> proto.CertificateSecondGen
	17,  // 68: proto.Card.driver_card_application_identification_2_2:type_name -> proto.DriverCardApplicationIdentificationSecondGenV2
	13,  // 69: proto.Card.driver_card_application_identification_2_2_sig:type_name -> proto.SignatureSecondGen
	37,  // 70: proto.Card.card_place_auth_daily_work_period:type_name -> proto.CardPlaceAuthDailyWorkPeriod
	13,  // 71: proto.Card.card_place_auth_daily_work_period_sig:type_name -> proto.SignatureSecondGen
	60,  // 72: proto.Card.gnss_auth_accumulated_driving:type_name -> proto.GNSSAuthAccumulatedDriving
	13,  // 73: proto.Card.gnss_auth_accumulated_driving_sig:type_name -> proto.SignatureSecondGen
	62,  // 74: proto.Card.card_border_crossings:type_name -> proto.CardBorderCrossings
	13,  // 75: proto.Card.card_border_crossings_sig:type_name -> proto.SignatureSecondGen
	64,  // 76: proto.Card.card_load_unload_operations:type_name -> proto.CardLoadUnloadOperations
	13,  // 77: proto.Card.card_load_unload_operations_sig:type_name -> proto.SignatureSecondGen
	66,  // 78: proto.Card.card_load_type_entries:type_name -> proto.CardLoadTypeEntries
	13,  // 79: proto.Card.card_load_type_entries_sig:type_name -> proto.SignatureSecondGen
	68,  // 80: proto.Card.vu_configuration:type_name -> proto.VuConfiguration
	13,  // 81: proto.Card.vu_configuration_sig:type_name -> proto.SignatureSecondGen
	73,  // 82: proto.Vu.vu_overview_1:type_name -> proto.VuOverviewFirstGen
	81,  // 83: proto.Vu.vu_overview_2:type_name -> proto.VuOverviewSecondGen
	83,  // 84: proto.Vu.vu_activities_1:type_name -> proto.VuActivitiesFirstGen
	107, // 85: proto.Vu.vu_activities_2:type_name -> proto.VuActivitiesSecondGen
	128, // 86: proto.Vu.vu_events_and_faults_1:type_name -> proto.VuEventsAndFaultsFirstGen
	138, // 87: proto.Vu.vu_events_and_faults_2:type_name -> proto.VuEventsAndFaultsSecondGen
	150, // 88: proto.Vu.vu_detailed_speed_1:type_name -> proto.VuDetailedSpeedFirstGen
	153, // 89: proto.Vu.vu_detailed_speed_2:type_name -> proto.VuDetailedSpeedSecondGen
	155, // 90: proto.Vu.vu_technical_data_1:type_name -> proto.VuTechnicalDataFirstGen
	161, // 91: proto.Vu.vu_technical_data_2:type_name -> proto.VuTechnicalDataSecondGen
	80,  // 92: proto.Vu.vu_download_interface_version:type_name -> proto.VuDownloadInterfaceVersion
	82,  // 93: proto.Vu.vu_overview_2_2:type_name -> proto.VuOverviewSecondGenV2
	108, // 94: proto.Vu.vu_activities_2_2:type_name -> proto.VuActivitiesSecondGenV2
	139, // 95: proto.Vu.vu_events_and_faults_2_2:type_name -> proto.VuEventsAndFaultsSecondGenV2
	162, // 96: proto.Vu.vu_technical_data_2_2:type_name -> proto.VuTechnicalDataSecondGenV2
	8,   // 97: proto.CardIccIdentificationFirstGen.card_extended_serial_number:type_name -> proto.ExtendedSerialNumberFirstGen
	10,  // 98: proto.CardIccIdentificationFirstGen.embedder_ic_assembler_id:type_name -> proto.EmbedderIcAssemblerId
	9,   // 99: proto.CardIccIdentificationSecondGen.card_extended_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	10,  // 100: proto.CardIccIdentificationSecondGen.embedder_ic_assembler_id:type_name -> proto.EmbedderIcAssemblerId
	11,  // 101: proto.ExtendedSerialNumberFirstGen.month_year:type_name -> proto.MonthYear
	11,  // 102: proto.ExtendedSerialNumberSecondGen.month_year:type_name -> proto.MonthYear
	183, // 103: proto.CardEventDataFirstGen.card_event_records_array:type_name -> proto.CardEventDataFirstGen.CardEventRecordsArrayElement
	20,  // 104: proto.CardEventRecord.event_vehicle_registration:type_name -> proto.VehicleRegistrationIdentification
	184, // 105: proto.CardEventDataSecondGen.card_event_records_array:type_name -> proto.CardEventDataSecondGen.CardEventRecordsArrayElement
	185, // 106: proto.CardFaultDataFirstGen.card_fault_records_array:type_name -> proto.CardFaultDataFirstGen.CardFaultRecordsArrayElement
	20,  // 107: proto.CardFaultRecord.fault_vehicle_registration:type_name -> proto.VehicleRegistrationIdentification
	186, // 108: proto.CardFaultDataSecondGen.card_fault_records_array:type_name -> proto.CardFaultDataSecondGen.CardFaultRecordsArrayElement
	26,  // 109: proto.CardDriverActivityFirstGen.decoded_activity_daily_records:type_name -> proto.CardActivityDailyRecord
	27,  // 110: proto.CardActivityDailyRecord.activity_change_info:type_name -> proto.ActivityChangeInfo
	26,  // 111: proto.CardDriverActivitySecondGen.decoded_activity_daily_records:type_name -> proto.CardActivityDailyRecord
	30,  // 112: proto.CardVehiclesUsedFirstGen.card_vehicle_records:type_name -> proto.CardVehicleRecordFirstGen
	20,  // 113: proto.CardVehicleRecordFirstGen.vehicle_registration:type_name -> proto.VehicleRegistrationIdentification
	32,  // 114: proto.CardVehiclesUsedSecondGen.card_vehicle_records:type_name -> proto.CardVehicleRecordSecondGen
	20,  // 115: proto.CardVehicleRecordSecondGen.vehicle_registration:type_name -> proto.VehicleRegistrationIdentification
	34,  // 116: proto.CardPlaceDailyWorkPeriodFirstGen.place_records:type_name -> proto.PlaceRecordFirstGen
	36,  // 117: proto.CardPlaceDailyWorkPeriodSecondGen.place_records:type_name -> proto.PlaceRecordSecondGen
	40,  // 118: proto.PlaceRecordSecondGen.entry_gnss_place_record:type_name -> proto.GNSSPlaceRecord
	38,  // 119: proto.CardPlaceAuthDailyWorkPeriod.place_auth_status_records:type_name -> proto.PlaceAuthStatusRecord
	41,  // 120: proto.PlaceAuthRecord.entry_gnss_place_record:type_name -> proto.GNSSPlaceAuthRecord
	42,  // 121: proto.GNSSPlaceRecord.geo_coordinates:type_name -> proto.GeoCoordinates
	42,  // 122: proto.GNSSPlaceAuthRecord.geo_coordinates:type_name -> proto.GeoCoordinates
	20,  // 123: proto.CardCurrentUse.session_open_vehicle:type_name -> proto.VehicleRegistrationIdentification
	45,  // 124: proto.CardControlActivityDataRecord.control_card_number:type_name -> proto.FullCardNumber
	20,  // 125: proto.CardControlActivityDataRecord.control_vehicle_registration:type_name -> proto.VehicleRegistrationIdentification
	48,  // 126: proto.CardIdentificationAndDriverCardHolderIdentification.card_identification:type_name -> proto.CardIdentification
	49,  // 127: proto.CardIdentificationAndDriverCardHolderIdentification.driver_card_holder_identification:type_name -> proto.DriverCardHolderIdentification
	50,  // 128: proto.DriverCardHolderIdentification.card_holder_name:type_name -> proto.HolderName
	51,  // 129: proto.DriverCardHolderIdentification.card_holder_birth_date:type_name -> proto.Datef
	54,  // 130: proto.SpecificConditionsFirstGen.specific_condition_records:type_name -> proto.SpecificConditionRecord
	54,  // 131: proto.SpecificConditionsSecondGen.specific_condition_records:type_name -> proto.SpecificConditionRecord
	57,  // 132: proto.CardVehicleUnitsUsed.card_vehicle_unit_records:type_name -> proto.CardVehicleUnitRecord
	59,  // 133: proto.GNSSAccumulatedDriving.gnss_accumulated_driving_records:type_name -> proto.GNSSAccumulatedDrivingRecord
	40,  // 134: proto.GNSSAccumulatedDrivingRecord.gnss_place_record:type_name -> proto.GNSSPlaceRecord
	61,  // 135: proto.GNSSAuthAccumulatedDriving.gnss_auth_status_ad_records:type_name -> proto.GNSSAuthStatusADRecord
	63,  // 136: proto.CardBorderCrossings.card_border_crossing_records:type_name -> proto.CardBorderCrossingRecord
	41,  // 137: proto.CardBorderCrossingRecord.gnss_place_auth_record:type_name -> proto.GNSSPlaceAuthRecord
	65,  // 138: proto.CardLoadUnloadOperations.card_load_unload_records:type_name -> proto.CardLoadUnloadRecord
	41,  // 139: proto.CardLoadUnloadRecord.gnss_place_auth_record:type_name -> proto.GNSSPlaceAuthRecord
	67,  // 140: proto.CardLoadTypeEntries.card_load_type_entry_records:type_name -> proto.CardLoadTypeEntryRecord
	70,  // 141: proto.CertificateFirstGen.decoded_certificate:type_name -> proto.DecodedCertificateFirstGen
	72,  // 142: proto.CertificateSecondGen.decoded_certificate:type_name -> proto.DecodedCertificateSecondGen
	187, // 143: proto.DecodedCertificateSecondGen.certificate_body:type_name -> proto.DecodedCertificateSecondGen.CertificateBody
	188, // 144: proto.DecodedCertificateSecondGen.ecc_certificate_signature:type_name -> proto.DecodedCertificateSecondGen.ECCCertificateSignature
	69,  // 145: proto.VuOverviewFirstGen.member_state_certificate:type_name -> proto.CertificateFirstGen
	69,  // 146: proto.VuOverviewFirstGen.vu_certificate:type_name -> proto.CertificateFirstGen
	20,  // 147: proto.VuOverviewFirstGen.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	74,  // 148: proto.VuOverviewFirstGen.vu_downloadable_period:type_name -> proto.VuDownloadablePeriod
	75,  // 149: proto.VuOverviewFirstGen.vu_download_activity_data:type_name -> proto.VuDownloadActivityDataFirstGen
	76,  // 150: proto.VuOverviewFirstGen.vu_company_locks_data:type_name -> proto.VuCompanyLocksDataFirstGen
	78,  // 151: proto.VuOverviewFirstGen.vu_control_activity_data:type_name -> proto.VuControlActivityDataFirstGen
	12,  // 152: proto.VuOverviewFirstGen.signature:type_name -> proto.SignatureFirstGen
	45,  // 153: proto.VuDownloadActivityDataFirstGen.full_card_number:type_name -> proto.FullCardNumber
	77,  // 154: proto.VuCompanyLocksDataFirstGen.vu_company_locks_records:type_name -> proto.VuCompanyLocksRecordFirstGen
	45,  // 155: proto.VuCompanyLocksRecordFirstGen.company_card_number:type_name -> proto.FullCardNumber
	79,  // 156: proto.VuControlActivityDataFirstGen.vu_control_activity_records:type_name -> proto.VuControlActivityRecordFirstGen
	45,  // 157: proto.VuControlActivityRecordFirstGen.control_card_number:type_name -> proto.FullCardNumber
	84,  // 158: proto.VuOverviewSecondGen.member_state_certificate_record_array:type_name -> proto.MemberStateCertificateRecordArray
	85,  // 159: proto.VuOverviewSecondGen.vu_certificate_record_array:type_name -> proto.VuCertificateRecordArray
	86,  // 160: proto.VuOverviewSecondGen.vehicle_identification_number_record_array:type_name -> proto.VehicleIdentificationNumberRecordArray
	88,  // 161: proto.VuOverviewSecondGen.vehicle_registration_number_record_array:type_name -> proto.VehicleRegistrationNumberRecordArray
	89,  // 162: proto.VuOverviewSecondGen.current_date_time_record_array:type_name -> proto.CurrentDateTimeRecordArray
	90,  // 163: proto.VuOverviewSecondGen.vu_downloadable_period_record_array:type_name -> proto.VuDownloadablePeriodRecordArray
	91,  // 164: proto.VuOverviewSecondGen.card_slots_status_record_array:type_name -> proto.CardSlotsStatusRecordArray
	92,  // 165: proto.VuOverviewSecondGen.vu_download_activity_data_record_array:type_name -> proto.VuDownloadActivityDataRecordArray
	95,  // 166: proto.VuOverviewSecondGen.vu_company_locks_record_array:type_name -> proto.VuCompanyLocksRecordArray
	97,  // 167: proto.VuOverviewSecondGen.vu_control_activity_record_array:type_name -> proto.VuControlActivityRecordArray
	99,  // 168: proto.VuOverviewSecondGen.signature_record_array:type_name -> proto.SignatureRecordArray
	84,  // 169: proto.VuOverviewSecondGenV2.member_state_certificate_record_array:type_name -> proto.MemberStateCertificateRecordArray
	85,  // 170: proto.VuOverviewSecondGenV2.vu_certificate_record_array:type_name -> proto.VuCertificateRecordArray
	86,  // 171: proto.VuOverviewSecondGenV2.vehicle_identification_number_record_array:type_name -> proto.VehicleIdentificationNumberRecordArray
	87,  // 172: proto.VuOverviewSecondGenV2.vehicle_registration_identification_record_array:type_name -> proto.VehicleRegistrationIdentificationRecordArray
	89,  // 173: proto.VuOverviewSecondGenV2.current_date_time_record_array:type_name -> proto.CurrentDateTimeRecordArray
	90,  // 174: proto.VuOverviewSecondGenV2.vu_downloadable_period_record_array:type_name -> proto.VuDownloadablePeriodRecordArray
	91,  // 175: proto.VuOverviewSecondGenV2.card_slots_status_record_array:type_name -> proto.CardSlotsStatusRecordArray
	92,  // 176: proto.VuOverviewSecondGenV2.vu_download_activity_data_record_array:type_name -> proto.VuDownloadActivityDataRecordArray
	95,  // 177: proto.VuOverviewSecondGenV2.vu_company_locks_record_array:type_name -> proto.VuCompanyLocksRecordArray
	97,  // 178: proto.VuOverviewSecondGenV2.vu_control_activity_record_array:type_name -> proto.VuControlActivityRecordArray
	99,  // 179: proto.VuOverviewSecondGenV2.signature_record_array:type_name -> proto.SignatureRecordArray
	100, // 180: proto.VuActivitiesFirstGen.vu_card_iw_data:type_name -> proto.VuCardIWData
	103, // 181: proto.VuActivitiesFirstGen.vu_activity_daily_data:type_name -> proto.VuActivityDailyDataFirstGen
	104, // 182: proto.VuActivitiesFirstGen.vu_place_daily_work_period_data:type_name -> proto.VuPlaceDailyWorkPeriodDataFirstGen
	106, // 183: proto.VuActivitiesFirstGen.vu_specific_condition_data:type_name -> proto.VuSpecificConditionDataFirstGen
	12,  // 184: proto.VuActivitiesFirstGen.signature:type_name -> proto.SignatureFirstGen
	71,  // 185: proto.MemberStateCertificateRecordArray.records:type_name -> proto.CertificateSecondGen
	71,  // 186: proto.VuCertificateRecordArray.records:type_name -> proto.CertificateSecondGen
	20,  // 187: proto.VehicleRegistrationIdentificationRecordArray.records:type_name -> proto.VehicleRegistrationIdentification
	74,  // 188: proto.VuDownloadablePeriodRecordArray.records:type_name -> proto.VuDownloadablePeriod
	93,  // 189: proto.VuDownloadActivityDataRecordArray.records:type_name -> proto.VuDownloadActivityDataSecondGen
	94,  // 190: proto.VuDownloadActivityDataSecondGen.full_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	45,  // 191: proto.FullCardNumberAndGeneration.full_card_number:type_name -> proto.FullCardNumber
	96,  // 192: proto.VuCompanyLocksRecordArray.records:type_name -> proto.VuCompanyLocksRecordSecondGen
	94,  // 193: proto.VuCompanyLocksRecordSecondGen.company_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	98,  // 194: proto.VuControlActivityRecordArray.records:type_name -> proto.VuControlActivityRecordSecondGen
	94,  // 195: proto.VuControlActivityRecordSecondGen.control_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	13,  // 196: proto.SignatureRecordArray.records:type_name -> proto.SignatureSecondGen
	101, // 197: proto.VuCardIWData.vu_card_iw_records:type_name -> proto.VuCardIWRecordFirstGen
	50,  // 198: proto.VuCardIWRecordFirstGen.card_holder_name:type_name -> proto.HolderName
	45,  // 199: proto.VuCardIWRecordFirstGen.full_card_number:type_name -> proto.FullCardNumber
	102, // 200: proto.VuCardIWRecordFirstGen.previous_vehicle_info:type_name -> proto.PreviousVehicleInfoFirstGen
	20,  // 201: proto.PreviousVehicleInfoFirstGen.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	27,  // 202: proto.VuActivityDailyDataFirstGen.activity_change_info:type_name -> proto.ActivityChangeInfo
	105, // 203: proto.VuPlaceDailyWorkPeriodDataFirstGen.vu_place_daily_work_period_records:type_name -> proto.VuPlaceDailyWorkPeriodRecordFirstGen
	45,  // 204: proto.VuPlaceDailyWorkPeriodRecordFirstGen.full_card_number:type_name -> proto.FullCardNumber
	34,  // 205: proto.VuPlaceDailyWorkPeriodRecordFirstGen.place_record:type_name -> proto.PlaceRecordFirstGen
	54,  // 206: proto.VuSpecificConditionDataFirstGen.specific_condition_records:type_name -> proto.SpecificConditionRecord
	109, // 207: proto.VuActivitiesSecondGen.date_of_day_downloaded_record_array:type_name -> proto.DateOfDayDownloadedRecordArray
	110, // 208: proto.VuActivitiesSecondGen.odometer_value_midnight_record_array:type_name -> proto.OdometerValueMidnightRecordArray
	111, // 209: proto.VuActivitiesSecondGen.vu_card_iw_record_array:type_name -> proto.VuCardIWRecordArray
	114, // 210: proto.VuActivitiesSecondGen.vu_activity_daily_record_array:type_name -> proto.VuActivityDailyRecordArray
	115, // 211: proto.VuActivitiesSecondGen.vu_place_daily_work_period_record_array:type_name -> proto.VuPlaceDailyWorkPeriodRecordArray
	119, // 212: proto.VuActivitiesSecondGen.vu_gnss_ad_record_array:type_name -> proto.VuGNSSADRecordArray
	123, // 213: proto.VuActivitiesSecondGen.vu_specific_condition_record_array:type_name -> proto.VuSpecificConditionRecordArray
	99,  // 214: proto.VuActivitiesSecondGen.signature_record_array:type_name -> proto.SignatureRecordArray
	109, // 215: proto.VuActivitiesSecondGenV2.date_of_day_downloaded_record_array:type_name -> proto.DateOfDayDownloadedRecordArray
	110, // 216: proto.VuActivitiesSecondGenV2.odometer_value_midnight_record_array:type_name -> proto.OdometerValueMidnightRecordArray
	111, // 217: proto.VuActivitiesSecondGenV2.vu_card_iw_record_array:type_name -> proto.VuCardIWRecordArray
	114, // 218: proto.VuActivitiesSecondGenV2.vu_activity_daily_record_array:type_name -> proto.VuActivityDailyRecordArray
	116, // 219: proto.VuActivitiesSecondGenV2.vu_place_daily_work_period_record_array:type_name -> proto.VuPlaceDailyWorkPeriodRecordArrayV2
	121, // 220: proto.VuActivitiesSecondGenV2.vu_gnss_ad_record_array:type_name -> proto.VuGNSSADRecordArrayV2
	123, // 221: proto.VuActivitiesSecondGenV2.vu_specific_condition_record_array:type_name -> proto.VuSpecificConditionRecordArray
	124, // 222: proto.VuActivitiesSecondGenV2.vu_border_crossing_record_array:type_name -> proto.VuBorderCrossingRecordArray
	126, // 223: proto.VuActivitiesSecondGenV2.vu_load_unload_record_array:type_name -> proto.VuLoadUnloadRecordArray
	99,  // 224: proto.VuActivitiesSecondGenV2.signature_record_array:type_name -> proto.SignatureRecordArray
	112, // 225: proto.VuCardIWRecordArray.records:type_name -> proto.VuCardIWRecordSecondGen
	50,  // 226: proto.VuCardIWRecordSecondGen.card_holder_name:type_name -> proto.HolderName
	94,  // 227: proto.VuCardIWRecordSecondGen.full_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	113, // 228: proto.VuCardIWRecordSecondGen.previous_vehicle_info:type_name -> proto.PreviousVehicleInfoSecondGen
	20,  // 229: proto.PreviousVehicleInfoSecondGen.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	27,  // 230: proto.VuActivityDailyRecordArray.records:type_name -> proto.ActivityChangeInfo
	117, // 231: proto.VuPlaceDailyWorkPeriodRecordArray.records:type_name -> proto.VuPlaceDailyWorkPeriodRecordSecondGen
	118, // 232: proto.VuPlaceDailyWorkPeriodRecordArrayV2.records:type_name -> proto.VuPlaceDailyWorkPeriodRecordSecondGenV2
	94,  // 233: proto.VuPlaceDailyWorkPeriodRecordSecondGen.full_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	36,  // 234: proto.VuPlaceDailyWorkPeriodRecordSecondGen.place_record:type_name -> proto.PlaceRecordSecondGen
	94,  // 235: proto.VuPlaceDailyWorkPeriodRecordSecondGenV2.full_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	39,  // 236: proto.VuPlaceDailyWorkPeriodRecordSecondGenV2.place_auth_record:type_name -> proto.PlaceAuthRecord
	120, // 237: proto.VuGNSSADRecordArray.records:type_name -> proto.VuGNSSADRecord
	94,  // 238: proto.VuGNSSADRecord.card_number_and_gen_driver_slot:type_name -> proto.FullCardNumberAndGeneration
	94,  // 239: proto.VuGNSSADRecord.card_number_and_gen_codriver_slot:type_name -> proto.FullCardNumberAndGeneration
	40,  // 240: proto.VuGNSSADRecord.gnss_place_record:type_name -> proto.GNSSPlaceRecord
	122, // 241: proto.VuGNSSADRecordArrayV2.records:type_name -> proto.VuGNSSADRecordV2
	94,  // 242: proto.VuGNSSADRecordV2.card_number_and_gen_driver_slot:type_name -> proto.FullCardNumberAndGeneration
	94,  // 243: proto.VuGNSSADRecordV2.card_number_and_gen_codriver_slot:type_name -> proto.FullCardNumberAndGeneration
	41,  // 244: proto.VuGNSSADRecordV2.gnss_place_auth_record:type_name -> proto.GNSSPlaceAuthRecord
	54,  // 245: proto.VuSpecificConditionRecordArray.records:type_name -> proto.SpecificConditionRecord
	125, // 246: proto.VuBorderCrossingRecordArray.records:type_name -> proto.VuBorderCrossingRecord
	94,  // 247: proto.VuBorderCrossingRecord.card_number_and_gen_driver_slot:type_name -> proto.FullCardNumberAndGeneration
	94,  // 248: proto.VuBorderCrossingRecord.card_number_and_gen_codriver_slot:type_name -> proto.FullCardNumberAndGeneration
	41,  // 249: proto.VuBorderCrossingRecord.gnss_place_auth_record:type_name -> proto.GNSSPlaceAuthRecord
	127, // 250: proto.VuLoadUnloadRecordArray.records:type_name -> proto.VuLoadUnloadRecord
	94,  // 251: proto.VuLoadUnloadRecord.card_number_and_gen_driver_slot:type_name -> proto.FullCardNumberAndGeneration
	94,  // 252: proto.VuLoadUnloadRecord.card_number_and_gen_codriver_slot:type_name -> proto.FullCardNumberAndGeneration
	41,  // 253: proto.VuLoadUnloadRecord.gnss_place_auth_record:type_name -> proto.GNSSPlaceAuthRecord
	129, // 254: proto.VuEventsAndFaultsFirstGen.vu_fault_data:type_name -> proto.VuFaultData
	131, // 255: proto.VuEventsAndFaultsFirstGen.vu_event_data:type_name -> proto.VuEventData
	133, // 256: proto.VuEventsAndFaultsFirstGen.vu_over_speeding_control_data:type_name -> proto.VuOverSpeedingControlData
	134, // 257: proto.VuEventsAndFaultsFirstGen.vu_over_speeding_event_data:type_name -> proto.VuOverSpeedingEventData
	136, // 258: proto.VuEventsAndFaultsFirstGen.vu_time_adjustment_data:type_name -> proto.VuTimeAdjustmentData
	12,  // 259: proto.VuEventsAndFaultsFirstGen.signature:type_name -> proto.SignatureFirstGen
	130, // 260: proto.VuFaultData.vu_fault_records:type_name -> proto.VuFaultRecordFirstGen
	45,  // 261: proto.VuFaultRecordFirstGen.card_number_driver_slot_begin:type_name -> proto.FullCardNumber
	45,  // 262: proto.VuFaultRecordFirstGen.card_number_codriver_slot_begin:type_name -> proto.FullCardNumber
	45,  // 263: proto.VuFaultRecordFirstGen.card_number_driver_slot_end:type_name -> proto.FullCardNumber
	45,  // 264: proto.VuFaultRecordFirstGen.card_number_codriver_slot_end:type_name -> proto.FullCardNumber
	132, // 265: proto.VuEventData.vu_event_records:type_name -> proto.VuEventRecordFirstGen
	45,  // 266: proto.VuEventRecordFirstGen.card_number_driver_slot_begin:type_name -> proto.FullCardNumber
	45,  // 267: proto.VuEventRecordFirstGen.card_number_codriver_slot_begin:type_name -> proto.FullCardNumber
	45,  // 268: proto.VuEventRecordFirstGen.card_number_driver_slot_end:type_name -> proto.FullCardNumber
	45,  // 269: proto.VuEventRecordFirstGen.card_number_codriver_slot_end:type_name -> proto.FullCardNumber
	135, // 270: proto.VuOverSpeedingEventData.vu_over_speeding_event_records:type_name -> proto.VuOverSpeedingEventRecordFirstGen
	45,  // 271: proto.VuOverSpeedingEventRecordFirstGen.card_number_driver_slot_begin:type_name -> proto.FullCardNumber
	137, // 272: proto.VuTimeAdjustmentData.vu_time_adjustment_records:type_name -> proto.VuTimeAdjustmentRecordFirstGen
	45,  // 273: proto.VuTimeAdjustmentRecordFirstGen.workshop_card_number:type_name -> proto.FullCardNumber
	140, // 274: proto.VuEventsAndFaultsSecondGen.vu_fault_record_array:type_name -> proto.VuFaultRecordArray
	143, // 275: proto.VuEventsAndFaultsSecondGen.vu_event_record_array:type_name -> proto.VuEventRecordArray
	145, // 276: proto.VuEventsAndFaultsSecondGen.vu_over_speeding_control_data_record_array:type_name -> proto.VuOverSpeedingControlDataRecordArray
	146, // 277: proto.VuEventsAndFaultsSecondGen.vu_over_speeding_event_record_array:type_name -> proto.VuOverSpeedingEventRecordArray
	148, // 278: proto.VuEventsAndFaultsSecondGen.vu_time_adjustment_record_array:type_name -> proto.VuTimeAdjustmentRecordArray
	99,  // 279: proto.VuEventsAndFaultsSecondGen.signature_record_array:type_name -> proto.SignatureRecordArray
	140, // 280: proto.VuEventsAndFaultsSecondGenV2.vu_fault_record_array:type_name -> proto.VuFaultRecordArray
	143, // 281: proto.VuEventsAndFaultsSecondGenV2.vu_event_record_array:type_name -> proto.VuEventRecordArray
	145, // 282: proto.VuEventsAndFaultsSecondGenV2.vu_over_speeding_control_data_record_array:type_name -> proto.VuOverSpeedingControlDataRecordArray
	146, // 283: proto.VuEventsAndFaultsSecondGenV2.vu_over_speeding_event_record_array:type_name -> proto.VuOverSpeedingEventRecordArray
	148, // 284: proto.VuEventsAndFaultsSecondGenV2.vu_time_adjustment_record_array:type_name -> proto.VuTimeAdjustmentRecordArray
	99,  // 285: proto.VuEventsAndFaultsSecondGenV2.signature_record_array:type_name -> proto.SignatureRecordArray
	141, // 286: proto.VuFaultRecordArray.records:type_name -> proto.VuFaultRecordSecondGen
	94,  // 287: proto.VuFaultRecordSecondGen.card_number_and_gen_driver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 288: proto.VuFaultRecordSecondGen.card_number_and_gen_codriver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 289: proto.VuFaultRecordSecondGen.card_number_and_gen_driver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	94,  // 290: proto.VuFaultRecordSecondGen.card_number_and_gen_codriver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	142, // 291: proto.VuFaultRecordSecondGen.manufacturer_specific_event_fault_data:type_name -> proto.ManufacturerSpecificEventFaultData
	144, // 292: proto.VuEventRecordArray.records:type_name -> proto.VuEventRecordSecondGen
	94,  // 293: proto.VuEventRecordSecondGen.card_number_and_gen_driver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 294: proto.VuEventRecordSecondGen.card_number_and_gen_codriver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 295: proto.VuEventRecordSecondGen.card_number_and_gen_driver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	94,  // 296: proto.VuEventRecordSecondGen.card_number_and_gen_codriver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	142, // 297: proto.VuEventRecordSecondGen.manufacturer_specific_event_fault_data:type_name -> proto.ManufacturerSpecificEventFaultData
	133, // 298: proto.VuOverSpeedingControlDataRecordArray.records:type_name -> proto.VuOverSpeedingControlData
	147, // 299: proto.VuOverSpeedingEventRecordArray.records:type_name -> proto.VuOverSpeedingEventRecordSecondGen
	94,  // 300: proto.VuOverSpeedingEventRecordSecondGen.card_number_and_gen_driver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	149, // 301: proto.VuTimeAdjustmentRecordArray.records:type_name -> proto.VuTimeAdjustmentRecordSecondGen
	94,  // 302: proto.VuTimeAdjustmentRecordSecondGen.workshop_card_number_and_generation:type_name -> proto.FullCardNumberAndGeneration
	151, // 303: proto.VuDetailedSpeedFirstGen.vu_detailed_speed_data:type_name -> proto.VuDetailedSpeedData
	12,  // 304: proto.VuDetailedSpeedFirstGen.signature:type_name -> proto.SignatureFirstGen
	152, // 305: proto.VuDetailedSpeedData.vu_detailed_speed_blocks:type_name -> proto.VuDetailedSpeedBlock
	154, // 306: proto.VuDetailedSpeedSecondGen.vu_detailed_speed_block_record_array:type_name -> proto.VuDetailedSpeedBlockRecordArray
	99,  // 307: proto.VuDetailedSpeedSecondGen.signature_record_array:type_name -> proto.SignatureRecordArray
	152, // 308: proto.VuDetailedSpeedBlockRecordArray.records:type_name -> proto.VuDetailedSpeedBlock
	156, // 309: proto.VuTechnicalDataFirstGen.vu_identification:type_name -> proto.VuIdentificationFirstGen
	158, // 310: proto.VuTechnicalDataFirstGen.sensor_paired:type_name -> proto.SensorPaired
	159, // 311: proto.VuTechnicalDataFirstGen.vu_calibration_data:type_name -> proto.VuCalibrationData
	12,  // 312: proto.VuTechnicalDataFirstGen.signature:type_name -> proto.SignatureFirstGen
	8,   // 313: proto.VuIdentificationFirstGen.vu_serial_number:type_name -> proto.ExtendedSerialNumberFirstGen
	157, // 314: proto.VuIdentificationFirstGen.vu_software_identification:type_name -> proto.VuSoftwareIdentification
	8,   // 315: proto.SensorPaired.sensor_serial_number:type_name -> proto.ExtendedSerialNumberFirstGen
	160, // 316: proto.VuCalibrationData.vu_calibration_records:type_name -> proto.VuCalibrationRecordFirstGen
	45,  // 317: proto.VuCalibrationRecordFirstGen.workshop_card_number:type_name -> proto.FullCardNumber
	20,  // 318: proto.VuCalibrationRecordFirstGen.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	163, // 319: proto.VuTechnicalDataSecondGen.vu_identification_record_array:type_name -> proto.VuIdentificationRecordArray
	167, // 320: proto.VuTechnicalDataSecondGen.vu_sensor_paired_record_array:type_name -> proto.VuSensorPairedRecordArray
	169, // 321: proto.VuTechnicalDataSecondGen.vu_sensor_external_gnss_coupled_record_array:type_name -> proto.VuSensorExternalGNSSCoupledRecordArray
	171, // 322: proto.VuTechnicalDataSecondGen.vu_calibration_record_array:type_name -> proto.VuCalibrationRecordArray
	177, // 323: proto.VuTechnicalDataSecondGen.vu_card_record_array:type_name -> proto.VuCardRecordArray
	179, // 324: proto.VuTechnicalDataSecondGen.vu_its_consent_record_array:type_name -> proto.VuITSConsentRecordArray
	181, // 325: proto.VuTechnicalDataSecondGen.vu_power_supply_interruption_record_array:type_name -> proto.VuPowerSupplyInterruptionRecordArray
	99,  // 326: proto.VuTechnicalDataSecondGen.signature_record_array:type_name -> proto.SignatureRecordArray
	165, // 327: proto.VuTechnicalDataSecondGenV2.vu_identification_record_array:type_name -> proto.VuIdentificationRecordArrayV2
	167, // 328: proto.VuTechnicalDataSecondGenV2.vu_sensor_paired_record_array:type_name -> proto.VuSensorPairedRecordArray
	169, // 329: proto.VuTechnicalDataSecondGenV2.vu_sensor_external_gnss_coupled_record_array:type_name -> proto.VuSensorExternalGNSSCoupledRecordArray
	173, // 330: proto.VuTechnicalDataSecondGenV2.vu_calibration_record_array:type_name -> proto.VuCalibrationRecordArrayV2
	177, // 331: proto.VuTechnicalDataSecondGenV2.vu_card_record_array:type_name -> proto.VuCardRecordArray
	179, // 332: proto.VuTechnicalDataSecondGenV2.vu_its_consent_record_array:type_name -> proto.VuITSConsentRecordArray
	181, // 333: proto.VuTechnicalDataSecondGenV2.vu_power_supply_interruption_record_array:type_name -> proto.VuPowerSupplyInterruptionRecordArray
	99,  // 334: proto.VuTechnicalDataSecondGenV2.signature_record_array:type_name -> proto.SignatureRecordArray
	164, // 335: proto.VuIdentificationRecordArray.records:type_name -> proto.VuIdentificationSecondGen
	9,   // 336: proto.VuIdentificationSecondGen.vu_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	157, // 337: proto.VuIdentificationSecondGen.vu_software_identification:type_name -> proto.VuSoftwareIdentification
	166, // 338: proto.VuIdentificationRecordArrayV2.records:type_name -> proto.VuIdentificationSecondGenV2
	9,   // 339: proto.VuIdentificationSecondGenV2.vu_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	157, // 340: proto.VuIdentificationSecondGenV2.vu_software_identification:type_name -> proto.VuSoftwareIdentification
	168, // 341: proto.VuSensorPairedRecordArray.records:type_name -> proto.SensorPairedRecord
	9,   // 342: proto.SensorPairedRecord.sensor_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	170, // 343: proto.VuSensorExternalGNSSCoupledRecordArray.records:type_name -> proto.SensorExternalGNSSCoupledRecord
	9,   // 344: proto.SensorExternalGNSSCoupledRecord.sensor_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	172, // 345: proto.VuCalibrationRecordArray.records:type_name -> proto.VuCalibrationRecordSecondGen
	45,  // 346: proto.VuCalibrationRecordSecondGen.workshop_card_number:type_name -> proto.FullCardNumber
	20,  // 347: proto.VuCalibrationRecordSecondGen.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	175, // 348: proto.VuCalibrationRecordSecondGen.seal_data_vu:type_name -> proto.SealRecord
	174, // 349: proto.VuCalibrationRecordArrayV2.records:type_name -> proto.VuCalibrationRecordSecondGenV2
	45,  // 350: proto.VuCalibrationRecordSecondGenV2.workshop_card_number:type_name -> proto.FullCardNumber
	20,  // 351: proto.VuCalibrationRecordSecondGenV2.vehicle_registration_identification:type_name -> proto.VehicleRegistrationIdentification
	9,   // 352: proto.VuCalibrationRecordSecondGenV2.sensor_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	9,   // 353: proto.VuCalibrationRecordSecondGenV2.sensor_gnss_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	9,   // 354: proto.VuCalibrationRecordSecondGenV2.rcm_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	175, // 355: proto.VuCalibrationRecordSecondGenV2.seal_data_vu:type_name -> proto.SealRecord
	176, // 356: proto.SealRecord.extended_seal_identifier:type_name -> proto.ExtendedSealIdentifier
	178, // 357: proto.VuCardRecordArray.records:type_name -> proto.VuCardRecord
	94,  // 358: proto.VuCardRecord.card_number_and_generation_information:type_name -> proto.FullCardNumberAndGeneration
	9,   // 359: proto.VuCardRecord.card_extended_serial_number:type_name -> proto.ExtendedSerialNumberSecondGen
	180, // 360: proto.VuITSConsentRecordArray.records:type_name -> proto.VuITSConsentRecord
	94,  // 361: proto.VuITSConsentRecord.card_number_and_gen:type_name -> proto.FullCardNumberAndGeneration
	182, // 362: proto.VuPowerSupplyInterruptionRecordArray.records:type_name -> proto.VuPowerSupplyInterruptionRecord
	94,  // 363: proto.VuPowerSupplyInterruptionRecord.card_number_and_gen_driver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 364: proto.VuPowerSupplyInterruptionRecord.card_number_and_gen_driver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	94,  // 365: proto.VuPowerSupplyInterruptionRecord.card_number_and_gen_codriver_slot_begin:type_name -> proto.FullCardNumberAndGeneration
	94,  // 366: proto.VuPowerSupplyInterruptionRecord.card_number_and_gen_codriver_slot_end:type_name -> proto.FullCardNumberAndGeneration
	19,  // 367: proto.CardEventDataFirstGen.CardEventRecordsArrayElement.card_event_records:type_name -> proto.CardEventRecord
	19,  // 368: proto.CardEventDataSecondGen.CardEventRecordsArrayElement.card_event_records:type_name -> proto.CardEventRecord
	23,  // 369: proto.CardFaultDataFirstGen.CardFaultRecordsArrayElement.card_fault_records:type_name -> proto.CardFaultRecord
	23,  // 370: proto.CardFaultDataSecondGen.CardFaultRecordsArrayElement.card_fault_records:type_name -> proto.CardFaultRecord
	189, // 371: proto.DecodedCertificateSecondGen.CertificateBody.public_key:type_name -> proto.DecodedCertificateSecondGen.CertificateBody.PublicKey
	190, // 372: proto.DecodedCertificateSecondGen.CertificateBody.PublicKey.public_point:type_name -> proto.DecodedCertificateSecondGen.CertificateBody.PublicKey.PublicPoint
	0,   // 373: proto.DDDParser.ParseVu:input_type -> proto.ParseVuRequest
	2,   // 374: proto.DDDParser.ParseCard:input_type -> proto.ParseCardRequest
	1,   // 375: proto.DDDParser.ParseVu:output_type -> proto.ParseVuResponse
	3,   // 376: proto.DDDParser.ParseCard:output_type -> proto.ParseCardResponse
	375, // [375:377] is the sub-list for method output_type
	373, // [373:375] is the sub-list for method input_type
	373, // [373:373] is the sub-list for extension type_name
	373, // [373:373] is the sub-list for extension extendee
	0,   // [0:373] is the sub-list for field type_name
}

func init() { file_dddparser_proto_init() }
func file_dddparser_proto_init() {
	if File_dddparser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dddparser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseVuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseVuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIccIdentificationFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIccIdentificationSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSerialNumberFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSerialNumberSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedderIcAssemblerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChipIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCardApplicationIdentificationFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCardApplicationIdentificationSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCardApplicationIdentificationSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEventDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEventRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleRegistrationIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEventDataSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardFaultDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardFaultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardFaultDataSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDriverActivityFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardActivityDailyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDriverActivitySecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehiclesUsedFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehicleRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehiclesUsedSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehicleRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPlaceDailyWorkPeriodFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPlaceDailyWorkPeriodSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPlaceAuthDailyWorkPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceAuthStatusRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceAuthRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSPlaceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSPlaceAuthRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardCurrentUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardControlActivityDataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCardNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastCardDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIdentificationAndDriverCardHolderIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCardHolderIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolderName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDrivingLicenceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificConditionsFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificConditionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificConditionsSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehicleUnitsUsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardVehicleUnitRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSAccumulatedDriving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSAccumulatedDrivingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSAuthAccumulatedDriving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNSSAuthStatusADRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBorderCrossings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBorderCrossingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardLoadUnloadOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardLoadUnloadRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardLoadTypeEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardLoadTypeEntryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverviewFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadablePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadActivityDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCompanyLocksDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCompanyLocksRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuControlActivityDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuControlActivityRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadInterfaceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverviewSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverviewSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuActivitiesFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberStateCertificateRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCertificateRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleIdentificationNumberRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleRegistrationIdentificationRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleRegistrationNumberRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentDateTimeRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadablePeriodRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardSlotsStatusRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadActivityDataRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDownloadActivityDataSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullCardNumberAndGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCompanyLocksRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCompanyLocksRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuControlActivityRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuControlActivityRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardIWData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardIWRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviousVehicleInfoFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuActivityDailyDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuSpecificConditionDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuActivitiesSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuActivitiesSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateOfDayDownloadedRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OdometerValueMidnightRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardIWRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardIWRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviousVehicleInfoSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuActivityDailyRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodRecordArrayV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPlaceDailyWorkPeriodRecordSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuGNSSADRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuGNSSADRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuGNSSADRecordArrayV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuGNSSADRecordV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuSpecificConditionRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuBorderCrossingRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuBorderCrossingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuLoadUnloadRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuLoadUnloadRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventsAndFaultsFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuFaultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuFaultRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingControlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingEventRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTimeAdjustmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTimeAdjustmentRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventsAndFaultsSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventsAndFaultsSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuFaultRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuFaultRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManufacturerSpecificEventFaultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuEventRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingControlDataRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingEventRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuOverSpeedingEventRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTimeAdjustmentRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTimeAdjustmentRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDetailedSpeedFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDetailedSpeedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDetailedSpeedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDetailedSpeedSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuDetailedSpeedBlockRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTechnicalDataFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuIdentificationFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuSoftwareIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorPaired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationRecordFirstGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTechnicalDataSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuTechnicalDataSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuIdentificationRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuIdentificationSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuIdentificationRecordArrayV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuIdentificationSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuSensorPairedRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorPairedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuSensorExternalGNSSCoupledRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorExternalGNSSCoupledRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationRecordSecondGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationRecordArrayV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCalibrationRecordSecondGenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSealIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuCardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuITSConsentRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuITSConsentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPowerSupplyInterruptionRecordArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VuPowerSupplyInterruptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEventDataFirstGen_CardEventRecordsArrayElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEventDataSecondGen_CardEventRecordsArrayElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardFaultDataFirstGen_CardFaultRecordsArrayElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardFaultDataSecondGen_CardFaultRecordsArrayElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateSecondGen_CertificateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateSecondGen_ECCCertificateSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateSecondGen_CertificateBody_PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dddparser_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedCertificateSecondGen_CertificateBody_PublicKey_PublicPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dddparser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   191,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dddparser_proto_goTypes,
		DependencyIndexes: file_dddparser_proto_depIdxs,
		MessageInfos:      file_dddparser_proto_msgTypes,
	}.Build()
	File_dddparser_proto = out.File
	file_dddparser_proto_rawDesc = nil
	file_dddparser_proto_goTypes = nil
	file_dddparser_proto_depIdxs = nil
}
