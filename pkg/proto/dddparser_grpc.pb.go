// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DDDParserClient is the client API for DDDParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DDDParserClient interface {
	ParseVu(ctx context.Context, in *ParseVuRequest, opts ...grpc.CallOption) (*ParseVuResponse, error)
	ParseCard(ctx context.Context, in *ParseCardRequest, opts ...grpc.CallOption) (*ParseCardResponse, error)
}

type dDDParserClient struct {
	cc grpc.ClientConnInterface
}

func NewDDDParserClient(cc grpc.ClientConnInterface) DDDParserClient {
	return &dDDParserClient{cc}
}

func (c *dDDParserClient) ParseVu(ctx context.Context, in *ParseVuRequest, opts ...grpc.CallOption) (*ParseVuResponse, error) {
	out := new(ParseVuResponse)
	err := c.cc.Invoke(ctx, "/proto.DDDParser/ParseVu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDDParserClient) ParseCard(ctx context.Context, in *ParseCardRequest, opts ...grpc.CallOption) (*ParseCardResponse, error) {
	out := new(ParseCardResponse)
	err := c.cc.Invoke(ctx, "/proto.DDDParser/ParseCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDDParserServer is the server API for DDDParser service.
// All implementations must embed UnimplementedDDDParserServer
// for forward compatibility
type DDDParserServer interface {
	ParseVu(context.Context, *ParseVuRequest) (*ParseVuResponse, error)
	ParseCard(context.Context, *ParseCardRequest) (*ParseCardResponse, error)
	mustEmbedUnimplementedDDDParserServer()
}

// UnimplementedDDDParserServer must be embedded to have forward compatible implementations.
type UnimplementedDDDParserServer struct {
}

func (UnimplementedDDDParserServer) ParseVu(context.Context, *ParseVuRequest) (*ParseVuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseVu not implemented")
}
func (UnimplementedDDDParserServer) ParseCard(context.Context, *ParseCardRequest) (*ParseCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseCard not implemented")
}
func (UnimplementedDDDParserServer) mustEmbedUnimplementedDDDParserServer() {}

// UnsafeDDDParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDDParserServer will
// result in compilation errors.
type UnsafeDDDParserServer interface {
	mustEmbedUnimplementedDDDParserServer()
}

func RegisterDDDParserServer(s grpc.ServiceRegistrar, srv DDDParserServer) {
	s.RegisterService(&DDDParser_ServiceDesc, srv)
}

func _DDDParser_ParseVu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseVuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDDParserServer).ParseVu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDDParser/ParseVu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDDParserServer).ParseVu(ctx, req.(*ParseVuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDDParser_ParseCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDDParserServer).ParseCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDDParser/ParseCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDDParserServer).ParseCard(ctx, req.(*ParseCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DDDParser_ServiceDesc is the grpc.ServiceDesc for DDDParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDDParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DDDParser",
	HandlerType: (*DDDParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseVu",
			Handler:    _DDDParser_ParseVu_Handler,
		},
		{
			MethodName: "ParseCard",
			Handler:    _DDDParser_ParseCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dddparser.proto",
}
